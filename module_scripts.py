# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from ID_animations import *


####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [

  
  #script_game_start:
  # This script is called when a new game is started
  # INPUT: none
  ("game_start",
   [
   (assign, "$team_1_balance", 1),
   (assign, "$team_2_balance", 1),
   (assign, "$ratio_balance_used", 0),
   (assign, "$prioritize_arthur", 0),
   (assign, "$nodmgteam", 0),
   (assign, "$force_partisan", 0),
   (assign, "$g_auto_FF", 0),
   (assign, "$admin_unlimited_building", 1),
   (assign, "$zombie_mode", 0),
   (assign, "$trp_availability", 0), #0 = default, #1 = infantry only, #2 = cavalry only, #3 = all OK
   
   # (assign,"$g_sp_money_gained",0),
   # (assign,"$g_sp_allies_lost",0),
   # (assign,"$g_sp_companions_lost",0),
   # (assign,"$g_sp_enemies_killed",0),
   # (assign,"$g_sp_personal_kills",0),
   
   # Give the player some random companions.
   # (assign,":found_companions",0),
   # (assign,":loop_end",1000),
   # (try_for_range, ":companion_number", 0, ":loop_end"),
     # (store_random_in_range,":random_companion",companions_begin, companions_end),
     # (neg|troop_slot_eq,":random_companion", slot_troop_occupation, slto_player_companion),
     # (troop_set_slot,":random_companion", slot_troop_occupation, slto_player_companion),
     # (val_add,":found_companions",1),
     # (eq,":found_companions",10),
     # (assign,":loop_end",0),
     # (eq,":companion_number",":companion_number"), # remove warning
   # (try_end),
   
  ##   Beaver - added below for custom battles - NEEDS TWEAKING
  ##    BRITAIN
      # (troop_set_slot,"trp_british_infantry_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_british_infantry2_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_british_highlander_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_british_foot_guard_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_british_rifle_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_british_dragoon_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_british_dragoon2_ai", slot_troop_initial_morale, 5000),
      
     ## FRANCE
      # (troop_set_slot,"trp_french_infantry_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_french_infantry2_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_french_infantry_vistula_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_french_voltigeur_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_french_old_guard_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_french_hussar_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_french_lancer_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_french_dragoon_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_french_cuirassier_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_french_carabineer_ai", slot_troop_initial_morale, 5000),
      
    ##  PRUSSIA
      # (troop_set_slot,"trp_prussian_infantry_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_prussian_infantry_kurmark_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_prussian_infantry_15_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_prussian_infantry_rifle_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_prussian_dragoon_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_prussian_ulany_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_prussian_landwehr_cav_ai", slot_troop_initial_morale, 4000),
      
     ## RUSSIA
      # (troop_set_slot,"trp_russian_opol_ai", slot_troop_initial_morale, 2000),
      # (troop_set_slot,"trp_russian_infantry_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_russian_grenadier_ai", slot_troop_initial_morale, 4000),
      # (troop_set_slot,"trp_russian_foot_guard_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_russian_infantry_rifle_ai", slot_troop_initial_morale, 3000),
      # (troop_set_slot,"trp_russian_hussar_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_russian_cossack_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_russian_dragoon_ai", slot_troop_initial_morale, 5000),
      # (troop_set_slot,"trp_russian_horse_guard_ai", slot_troop_initial_morale, 5000),
      
      # (try_for_range,":value",0,20),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      # (try_end),
      # (try_for_range,":value",20,40),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",20),
      # (try_end),
      # (try_for_range,":value",40,60),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      # (try_end),
      # (try_for_range,":value",60,80),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      # (try_end),
      # (try_for_range,":value",80,100),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      # (try_end),
      # (try_for_range,":value",100,120),
         # (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      # (try_end),
      
       ##  faction banners
      # (faction_set_slot, "fac_britain", slot_faction_banner, "mesh_banner_kingdom_f"),
      # (faction_set_slot, "fac_france", slot_faction_banner, "mesh_banner_kingdom_b"),
      # (faction_set_slot, "fac_prussia", slot_faction_banner, "mesh_banner_kingdom_c"),
      # (faction_set_slot, "fac_russia", slot_faction_banner, "mesh_banner_kingdom_a"),
      # (faction_set_slot, "fac_austria", slot_faction_banner, "mesh_banner_kingdom_d"),
      # (faction_set_slot, "fac_rhine", slot_faction_banner, "mesh_banner_kingdom_e"),
   
    # (try_for_range, ":cur_companion", companions_begin, companions_end),
       # (troop_slot_eq, ":cur_companion", slot_troop_occupation, slto_player_companion),
     # (try_end),
   
    #(assign,"$g_next_presentation",-1),
   
 
    ]),

  #script_game_get_use_string
  # This script is called from the game engine for getting using information text
  # INPUT: used_scene_prop_id  
  # OUTPUT: s0
  ("game_get_use_string",
   [
     (store_script_param, ":instance_id", 1),

     (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
     
     (try_begin),
       (this_or_next|eq, ":scene_prop_id", "spr_winch_b"),
       (eq, ":scene_prop_id", "spr_winch"),
       (assign, ":effected_object", "spr_portcullis"),
     (else_try),
       (assign, ":effected_object", ":scene_prop_id"),
     (try_end),   

     (scene_prop_get_slot, ":item_situation", ":instance_id", scene_prop_open_or_close_slot),
   
     (try_begin), #opening/closing portcullis
       (eq, ":effected_object", "spr_portcullis"),

       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_open_gate"),
       (else_try), 
         (str_store_string, s0, "str_close_gate"),
       (try_end),
     # MM begin
     (else_try),
       (is_between,":effected_object","spr_mm_weather_time","spr_scene_props_end"), # only for mm props.
       (neg|is_between, ":effected_object", "spr_door_destructible", "spr_mm_barrier_20m"),
       
       #default no string.
       (str_clear,s0),
       
       (call_script, "script_client_get_my_agent"),
       (assign,":agent_id",reg0),
       
       (assign, ":troop_class", -1),
       (assign, ":troop_no", -1),
       (try_begin),
         (agent_is_active,":agent_id"),
         (agent_get_troop_id,":troop_no",":agent_id"),
         (troop_get_slot,":troop_class",":troop_no",slot_troop_class),
       (try_end),
       
       (try_begin),# no string for these.
         (is_between,":effected_object","spr_mm_cannon_12pdr_limber","spr_mm_ship_rudder"),
         (try_begin),
           (eq,":troop_class",multi_troop_class_mm_artillery),
           (try_begin),
             (is_between, ":effected_object", "spr_mm_12pdr_push_button", "spr_mm_round_button"),
             (str_store_string, s0, "str_push_cannon"),
           (else_try), # unlimber
             (is_between, ":effected_object", mm_unlimber_button_types_begin, mm_unlimber_button_types_end), 
             (str_store_string, s0, "str_unlimber_cannon"),
           (else_try), # limber
             (eq, ":effected_object", "spr_mm_limber_button"),
             (str_store_string, s0, "str_limber_cannon"),
           (else_try), # aim
             (eq, ":effected_object", "spr_mm_aim_button"),
             (str_store_string, s0, "str_aim_cannon"),
           (else_try), # load ball
             (eq, ":effected_object", "spr_mm_load_cartridge_button"),
             (str_store_string, s0, "str_load_cartridge"),
           (else_try), # load ball
             (eq, ":effected_object", "spr_mm_load_bomb_button"),
             (str_store_string, s0, "str_load_bomb"),
           (else_try), # reload
             (eq, ":effected_object", "spr_mm_reload_button"),
             (str_store_string, s0, "str_reload_cannon"), 
           (else_try), # pick up ball
             (eq, ":effected_object", "spr_mm_round_button"),
             (str_store_string, s0, "str_pick_up_round"),
           (else_try), # pick up ball
             (eq, ":effected_object", "spr_mm_shell_button"),
             (str_store_string, s0, "str_pick_up_shell"),
           (else_try), # pick up ball
             (eq, ":effected_object", "spr_mm_canister_button"),
             (str_store_string, s0, "str_pick_up_canister"), 
           (else_try), # pick up ball
             (eq, ":effected_object", "spr_mm_bomb_button"),
             (str_store_string, s0, "str_pick_up_bomb"),
           (try_end),
         (try_end),
         
         (try_begin),
           (this_or_next|eq,":troop_class",multi_troop_class_mm_rocket),
           (eq,":troop_no","trp_player"),
           (try_begin), # load ball
             (eq, ":effected_object", "spr_mm_load_rocket_button"),
             (str_store_string, s0, "str_load_rocket"),
           (else_try), # pick up rocket
             (eq, ":effected_object", "spr_mm_pickup_rocket_button"),
             (str_store_string, s0, "str_pick_up_rocket"), 
           (else_try), # aim
             (eq, ":effected_object", "spr_mm_aim_button"),
             (str_store_string, s0, "str_aim_cannon"),
           (try_end),
         (try_end),
       (else_try),
         (this_or_next|is_between, ":effected_object", "spr_mm_palisadedd",mm_construct_props_end),
         (this_or_next|is_between, ":effected_object", "spr_mm_stakes_destructible","spr_mm_destructible_pioneer_builds_end"),
         (eq, ":effected_object", "spr_plank_destructible"),
         (neq,":effected_object","spr_crate_explosive"),

         (try_begin),
           (is_between, ":effected_object", "spr_mm_palisadedd",mm_construct_props_end),
           (neq, ":effected_object", "spr_earthwork1_destructible"),
           (eq,":troop_class",multi_troop_class_mm_sapper),
           (try_begin),
             (agent_get_wielded_item,":item_id",":agent_id",0),
             (eq,":item_id","itm_construction_hammer"),
             (str_store_string, s0, "str_build_prop"),
           (else_try),
             (str_store_string, s0, "str_construct_deconstruct"),
           (try_end),
         (else_try),
           (eq, ":effected_object", "spr_earthwork1_destructible"),
           (try_begin),
             (agent_get_wielded_item,":item_id",":agent_id",0),
             (try_begin),
               (eq,":item_id","itm_shovel"),
               (str_store_string, s0, "str_dig_prop"),
             (else_try),
               (eq,":item_id","itm_shovel_undig"),
               (str_store_string, s0, "str_undig_prop"),
             (try_end),
           (try_end),
         (else_try),
           (this_or_next|is_between, ":effected_object", "spr_mm_stakes_destructible","spr_mm_destructible_pioneer_builds_end"),
           (eq, ":effected_object", "spr_plank_destructible"),
           (try_begin),
             (eq,":troop_class",multi_troop_class_mm_sapper),
             (agent_get_wielded_item,":item_id",":agent_id",0),
             (eq,":item_id","itm_construction_hammer"),
             (str_store_string, s0, "str_repair_prop"),
           (else_try),
             (str_store_string, s0, "str_destructible_object"),
           (try_end),
         (try_end),

       (else_try), # piano
         (eq, ":effected_object", "spr_mm_piano"),
         (str_store_string, s0, "str_play_piano"), 
       (else_try), # organ
         (eq, ":effected_object", "spr_mm_organ"),
         (str_store_string, s0, "str_play_organ"), 
       (else_try), # organ
         (eq, ":effected_object", "spr_mm_shithouse_button"),
         (str_store_string, s0, "str_take_a_shit"), 
       (else_try),
         (this_or_next|eq, ":effected_object", "spr_mm_ship_rudder_control"),
         (this_or_next|eq, ":effected_object", "spr_mm_ship_longboat_rudder_control"),
         (eq, ":effected_object", "spr_mm_ship_schooner_rudder_control"),
         (str_store_string, s0, "str_take_ship_control"), 
       (else_try),
         (eq, ":effected_object", "spr_ze_treasure"),
         (str_store_string, s0, "@Open ze Treasure"), 
       (else_try),
         (eq, ":effected_object", "spr_mm_campaign_table"),
         (str_store_string, s0, "@View Caimpaign Map"), 
       (else_try),
         (is_between,":effected_object", mm_explosive_props_begin, mm_explosive_props_end),
         (str_store_string, s0, "str_ignite"),
       (else_try),
         (eq,":effected_object","spr_mm_build_church_rope"),
         (str_store_string, s0, "str_play_bell"),
       (else_try), #custom_buttons:
         (is_between, ":effected_object", "spr_custom_button_instant", "spr_custom_buttons_end"),
           (prop_instance_get_variation_id,":var_1", ":instance_id"),
                #   If var1 is between 1 and 40 label will be troop's name,
                #   otherwise send default "Use" label
           (try_begin),
            (is_between, ":var_1", 1, 41),
                (store_sub, ":start_index", "trp_custom_string_1", 1),  # because string indexing via var_1 will start with 1 and not 0
                (store_add, ":custom_string_index", ":start_index", ":var_1"),
                (str_store_troop_name,s0,":custom_string_index"),       # label will be corresponding troop's name
           (else_try),
                (str_store_string, s0, "@Use"), # default use label
           (try_end),
           
       (else_try), # royale
         (is_between,":effected_object","spr_royale_weapon_spawn_musket","spr_royale_horse_spawn"),
         
         (assign,":string_to_use","str_royale_weapon_musket"),
         (val_add,":string_to_use",":effected_object"),
         (val_sub,":string_to_use","spr_royale_weapon_spawn_musket"),
         
         (str_store_string, s0, ":string_to_use"), 
        # (eq, ":effected_object", "spr_royale_weapon_spawn_musket"),
        # (str_store_string, s0, "str_royale_weapon_musket"), 
       (else_try), 
         (is_between,":effected_object","spr_door_teleport_vertical","spr_door_teleport_props_end"), # TP door
         (str_store_string, s0, "str_open_door"),
       (else_try),
         (str_store_string, s0, "@Use Prop"),
       (try_end),
     # MM end
       
     (else_try), #opening/closing door
       (is_between, ":effected_object", "spr_door_destructible", "spr_mm_barrier_20m"),
        
       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_open_door"),
       (else_try),
         (str_store_string, s0, "str_close_door"),
       (try_end),
     (else_try), #raising/dropping ladder
       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_raise_ladder"),
       (else_try),
         (str_store_string, s0, "str_drop_ladder"),
       (try_end),
     (try_end),
   ]),

  #script_game_quick_start
  # This script is called from the game engine for initializing the global variables for tutorial, multiplayer and custom battle modes.
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_quick_start",
    [
      (assign,"$g_is_tutorial",0),
    
      #for quick battle mode
      (assign, "$g_is_quick_battle", 0),
      (assign, "$g_quick_battle_game_type", 0),
      (assign, "$g_quick_battle_troop", quick_battle_troops_begin),
      (assign, "$g_quick_battle_map", quick_battle_scenes_begin),
      (assign, "$g_quick_battle_team_1_faction", "fac_britain"),
      (assign, "$g_quick_battle_team_2_faction", "fac_france"),
      (assign, "$g_quick_battle_army_1_size", 25),
      (assign, "$g_quick_battle_army_2_size", 25),
      (assign, "$g_quick_battle_day_time_value", 1),
      (assign, "$g_quick_battle_fog_value", 0),
      (assign, "$g_quick_battle_rain_value", 0),
      (try_for_range,":value",0,20),
        (try_begin),
          (eq,":value",0),
          (troop_set_slot,"trp_custom_battle_dummy",":value",9),
        (else_try),
          (eq,":value",10),
          (troop_set_slot,"trp_custom_battle_dummy",":value",11),
        (else_try),
          (troop_set_slot,"trp_custom_battle_dummy",":value",0),
        (try_end),
      (try_end),
      (try_for_range,":value",20,40),
         (troop_set_slot,"trp_custom_battle_dummy",":value",20),
      (try_end),
      
  # Beaver - added below for custom battles - NEEDS TWEAKING
      # BRITAIN
      (troop_set_slot,"trp_british_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_infantry2_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_highlander_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_foot_guard_ai", slot_troop_initial_morale, 5000),
      (troop_set_slot,"trp_british_light_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_rifle_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_light_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_british_hussar_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_british_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_british_horseguard_ai", slot_troop_initial_morale, 4500),
      (troop_set_slot,"trp_british_ship_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_british_ship_marine_ai", slot_troop_initial_morale, 3000),
      # FRANCE
      (troop_set_slot,"trp_french_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_french_infantry2_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_french_infantry_vistula_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_french_voltigeur_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_french_old_guard_ai", slot_troop_initial_morale, 5000),
      (troop_set_slot,"trp_french_hussar_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_french_lancer_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_french_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_french_cuirassier_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_french_carabineer_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_french_grenadier_a_cheval_ai", slot_troop_initial_morale, 5000),
      (troop_set_slot,"trp_french_ship_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_french_ship_marine_ai", slot_troop_initial_morale, 3000),
      # PRUSSIA
      (troop_set_slot,"trp_prussian_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_prussian_infantry2_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_prussian_infantry_kurmark_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_prussian_infantry_freikorps_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_prussian_infantry_15_ai", slot_troop_initial_morale, 5000),
      (troop_set_slot,"trp_prussian_infantry_rifle_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_prussian_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_prussian_hussar_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_prussian_landwehr_cav_ai", slot_troop_initial_morale, 3500),
      # RUSSIA
      (troop_set_slot,"trp_russian_partizan_ai", slot_troop_initial_morale, 2000),
      (troop_set_slot,"trp_russian_opol_ai", slot_troop_initial_morale, 2500),
      (troop_set_slot,"trp_russian_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_russian_grenadier_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_russian_foot_guard_ai", slot_troop_initial_morale, 5000),
      (troop_set_slot,"trp_russian_infantry_rifle_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_russian_hussar_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_russian_uhlan_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_russian_cossack_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_russian_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_russian_horse_guard_ai", slot_troop_initial_morale, 4000),
      # AUSTRIA
      (troop_set_slot,"trp_austrian_infantry_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_austrian_infantry2_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_austrian_grenadier_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_austrian_grenzer_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_austrian_infantry_rifle_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_austrian_hussar_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_austrian_uhlan_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_austrian_light_horse_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_austrian_dragoon_ai", slot_troop_initial_morale, 4000),
      (troop_set_slot,"trp_austrian_cuirassier_ai", slot_troop_initial_morale, 4000),    
      # RHINE
      (troop_set_slot,"trp_rhine_infantry_bavaria_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_infantry_saxony_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg2_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_grenadier_guard_ai", slot_troop_initial_morale, 4000), 
      (troop_set_slot,"trp_rhine_light_infantry_hessen_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_light_infantry_bavaria_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_mounted_jaeger_ai", slot_troop_initial_morale, 4000), 
      (troop_set_slot,"trp_rhine_uhlan_ai", slot_troop_initial_morale, 4000), 
      (troop_set_slot,"trp_rhine_light_dragoon_ai", slot_troop_initial_morale, 3000),
      (troop_set_slot,"trp_rhine_cuirassier_ai", slot_troop_initial_morale, 4000), 
      (troop_set_slot,"trp_rhine_garde_du_corps_ai", slot_troop_initial_morale, 4000), 
      
      # Base unit types, for AI tactics
      # BRITAIN
      (troop_set_slot,"trp_british_infantry_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_british_infantry2_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_british_highlander_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_british_ship_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_british_ship_marine_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_british_foot_guard_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_british_light_infantry_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_british_rifle_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_british_light_dragoon_ai", slot_troop_base_type, basetroop_light_cav),
      (troop_set_slot,"trp_british_hussar_ai", slot_troop_base_type, basetroop_light_cav),
      (troop_set_slot,"trp_british_dragoon_ai", slot_troop_base_type, basetroop_heavy_cav),
      (troop_set_slot,"trp_british_horseguard_ai", slot_troop_base_type, basetroop_heavy_cav),
      # FRANCE
      (troop_set_slot,"trp_french_infantry_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_french_infantry2_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_french_infantry_vistula_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_french_voltigeur_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_french_old_guard_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_french_hussar_ai", slot_troop_base_type, basetroop_hussar),
      (troop_set_slot,"trp_french_lancer_ai", slot_troop_base_type, basetroop_lancer),
      (troop_set_slot,"trp_french_dragoon_ai", slot_troop_base_type, basetroop_dragoon),
      (troop_set_slot,"trp_french_cuirassier_ai", slot_troop_base_type, basetroop_heavy_cav),
      (troop_set_slot,"trp_french_carabineer_ai", slot_troop_base_type, basetroop_heavy_cav),
      (troop_set_slot,"trp_french_grenadier_a_cheval_ai", slot_troop_base_type, basetroop_heavy_cav),
      (troop_set_slot,"trp_french_ship_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_french_ship_marine_ai", slot_troop_base_type, basetroop_infantry),
      # PRUSSIA
      (troop_set_slot,"trp_prussian_infantry_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_prussian_infantry2_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_prussian_infantry_kurmark_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_prussian_infantry_freikorps_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_prussian_infantry_15_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_prussian_infantry_rifle_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_prussian_dragoon_ai", slot_troop_base_type, basetroop_dragoon),
      (troop_set_slot,"trp_prussian_hussar_ai", slot_troop_base_type, basetroop_hussar),
      (troop_set_slot,"trp_prussian_landwehr_cav_ai", slot_troop_base_type, basetroop_lancer),
      # RUSSIA
      (troop_set_slot,"trp_russian_partizan_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_russian_opol_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_russian_infantry_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_russian_grenadier_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_russian_foot_guard_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_russian_infantry_rifle_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_russian_hussar_ai", slot_troop_base_type, basetroop_hussar),
      (troop_set_slot,"trp_russian_uhlan_ai", slot_troop_base_type, basetroop_lancer),
      (troop_set_slot,"trp_russian_cossack_ai", slot_troop_base_type, basetroop_lancer),
      (troop_set_slot,"trp_russian_dragoon_ai", slot_troop_base_type, basetroop_dragoon),
      (troop_set_slot,"trp_russian_horse_guard_ai", slot_troop_base_type, basetroop_heavy_cav),
      # AUSTRIA
      (troop_set_slot,"trp_austrian_infantry_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_austrian_infantry2_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_austrian_grenadier_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_austrian_grenzer_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_austrian_infantry_rifle_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_austrian_hussar_ai", slot_troop_base_type, basetroop_hussar),
      (troop_set_slot,"trp_austrian_uhlan_ai", slot_troop_base_type, basetroop_lancer),
      (troop_set_slot,"trp_austrian_light_horse_ai", slot_troop_base_type, basetroop_light_cav),
      (troop_set_slot,"trp_austrian_dragoon_ai", slot_troop_base_type, basetroop_dragoon),
      (troop_set_slot,"trp_austrian_cuirassier_ai", slot_troop_base_type, basetroop_heavy_cav),   
      # RHINE
      (troop_set_slot,"trp_rhine_infantry_bavaria_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_rhine_infantry_saxony_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg2_ai", slot_troop_base_type, basetroop_infantry),
      (troop_set_slot,"trp_rhine_grenadier_guard_ai", slot_troop_base_type, basetroop_guard),
      (troop_set_slot,"trp_rhine_light_infantry_hessen_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_rhine_light_infantry_bavaria_ai", slot_troop_base_type, basetroop_skirmisher),
      (troop_set_slot,"trp_rhine_mounted_jaeger_ai", slot_troop_base_type, basetroop_hussar),
      (troop_set_slot,"trp_rhine_uhlan_ai", slot_troop_base_type, basetroop_lancer),
      (troop_set_slot,"trp_rhine_light_dragoon_ai", slot_troop_base_type, basetroop_light_cav),
      (troop_set_slot,"trp_rhine_cuirassier_ai", slot_troop_base_type, basetroop_heavy_cav),
      (troop_set_slot,"trp_rhine_garde_du_corps_ai", slot_troop_base_type, basetroop_heavy_cav),


      #Assign officer troops for Commander Battle Mode
      
      # BRITAIN
      (troop_set_slot,"trp_british_infantry_ai", slot_troop_officer_troop, "trp_british_infantry_officer"),
      (troop_set_slot,"trp_british_infantry2_ai", slot_troop_officer_troop, "trp_british_infantry2_officer"),
      (troop_set_slot,"trp_british_highlander_ai", slot_troop_officer_troop, "trp_british_highlander_officer"),
      (troop_set_slot,"trp_british_foot_guard_ai", slot_troop_officer_troop, "trp_british_foot_guard_officer"),
      (troop_set_slot,"trp_british_light_infantry_ai", slot_troop_officer_troop, "trp_british_light_infantry_officer"),
      (troop_set_slot,"trp_british_rifle_ai", slot_troop_officer_troop, "trp_british_rifle_officer"),
      (troop_set_slot,"trp_british_hussar_ai", slot_troop_officer_troop, "trp_british_hussar_officer"),
      (troop_set_slot,"trp_british_light_dragoon_ai", slot_troop_officer_troop, "trp_british_light_dragoon_officer"),
      (troop_set_slot,"trp_british_dragoon_ai", slot_troop_officer_troop, "trp_british_dragoon_officer"),
      (troop_set_slot,"trp_british_horseguard_ai", slot_troop_officer_troop, "trp_british_horseguard_officer"),
      (troop_set_slot,"trp_british_ship_ai", slot_troop_officer_troop, "trp_british_ship_captain"),
      (troop_set_slot,"trp_british_ship_marine_ai", slot_troop_officer_troop, "trp_british_ship_captain"),
      (troop_set_slot,"trp_british_arty_ai", slot_troop_officer_troop, "trp_british_arty_commander"),
      (troop_set_slot,"trp_british_arty_alt_ai", slot_troop_officer_troop, "trp_british_arty_alt_commander"),
      (troop_set_slot,"trp_british_rocket_ai", slot_troop_officer_troop, "trp_british_rocket"),

      # FRANCE
      (troop_set_slot,"trp_french_infantry_ai", slot_troop_officer_troop, "trp_french_infantry_officer"),
      (troop_set_slot,"trp_french_infantry2_ai", slot_troop_officer_troop, "trp_french_infantry2_officer"),
      (troop_set_slot,"trp_french_infantry_vistula_ai", slot_troop_officer_troop, "trp_french_infantry_vistula_officer"),
      (troop_set_slot,"trp_french_voltigeur_ai", slot_troop_officer_troop, "trp_french_voltigeur_officer"),
      (troop_set_slot,"trp_french_old_guard_ai", slot_troop_officer_troop, "trp_french_old_guard_officer"),
      (troop_set_slot,"trp_french_hussar_ai", slot_troop_officer_troop, "trp_french_hussar_officer"),
      (troop_set_slot,"trp_french_lancer_ai", slot_troop_officer_troop, "trp_french_lancer_officer"),
      (troop_set_slot,"trp_french_dragoon_ai", slot_troop_officer_troop, "trp_french_dragoon_officer"),
      (troop_set_slot,"trp_french_cuirassier_ai", slot_troop_officer_troop, "trp_french_cuirassier_officer"),
      (troop_set_slot,"trp_french_carabineer_ai", slot_troop_officer_troop, "trp_french_carabineer_officer"),
      (troop_set_slot,"trp_french_grenadier_a_cheval_ai", slot_troop_officer_troop, "trp_french_grenadier_a_cheval_officer"),
      (troop_set_slot,"trp_french_ship_ai", slot_troop_officer_troop, "trp_french_ship_captain"),
      (troop_set_slot,"trp_french_ship_marine_ai", slot_troop_officer_troop, "trp_french_ship_captain"),
      (troop_set_slot,"trp_french_arty_ai", slot_troop_officer_troop, "trp_french_arty_commander"),
      (troop_set_slot,"trp_french_arty_alt_ai", slot_troop_officer_troop, "trp_french_arty_alt_commander"),
      
      # PRUSSIA
      (troop_set_slot,"trp_prussian_infantry_ai", slot_troop_officer_troop, "trp_prussian_infantry_officer"),
      (troop_set_slot,"trp_prussian_infantry2_ai", slot_troop_officer_troop, "trp_prussian_infantry2_officer"),
      (troop_set_slot,"trp_prussian_infantry_kurmark_ai", slot_troop_officer_troop, "trp_prussian_infantry_kurmark_officer"),
      (troop_set_slot,"trp_prussian_infantry_freikorps_ai", slot_troop_officer_troop, "trp_prussian_infantry_freikorps_officer"),
      (troop_set_slot,"trp_prussian_infantry_15_ai", slot_troop_officer_troop, "trp_prussian_infantry_15_officer"),
      (troop_set_slot,"trp_prussian_infantry_rifle_ai", slot_troop_officer_troop, "trp_prussian_infantry_rifle_officer"),
      (troop_set_slot,"trp_prussian_dragoon_ai", slot_troop_officer_troop, "trp_prussian_dragoon_officer"),
      (troop_set_slot,"trp_prussian_hussar_ai", slot_troop_officer_troop, "trp_prussian_hussar_officer"),
      (troop_set_slot,"trp_prussian_landwehr_cav_ai", slot_troop_officer_troop, "trp_prussian_landwehr_cav_officer"),
      (troop_set_slot,"trp_prussian_cuirassier_ai", slot_troop_officer_troop, "trp_prussian_cuirassier_officer"),
      (troop_set_slot,"trp_prussian_arty_ai", slot_troop_officer_troop, "trp_prussian_arty_commander"),
      (troop_set_slot,"trp_prussian_arty_alt_ai", slot_troop_officer_troop, "trp_prussian_arty_alt_commander"),
      
      # RUSSIA
      (troop_set_slot,"trp_russian_partizan_ai", slot_troop_officer_troop, "trp_russian_partizan"),
      (troop_set_slot,"trp_russian_opol_ai", slot_troop_officer_troop, "trp_russian_opol_officer"),
      (troop_set_slot,"trp_russian_infantry_ai", slot_troop_officer_troop, "trp_russian_infantry_officer"),
      (troop_set_slot,"trp_russian_grenadier_ai", slot_troop_officer_troop, "trp_russian_grenadier_officer"),
      (troop_set_slot,"trp_russian_foot_guard_ai", slot_troop_officer_troop, "trp_russian_foot_guard_officer"),
      (troop_set_slot,"trp_russian_infantry_rifle_ai", slot_troop_officer_troop, "trp_russian_infantry_rifle_officer"),
      (troop_set_slot,"trp_russian_hussar_ai", slot_troop_officer_troop, "trp_russian_hussar_officer"),
      (troop_set_slot,"trp_russian_uhlan_ai", slot_troop_officer_troop, "trp_russian_uhlan_officer"),
      (troop_set_slot,"trp_russian_cossack_ai", slot_troop_officer_troop, "trp_russian_cossack_officer"),
      (troop_set_slot,"trp_russian_dragoon_ai", slot_troop_officer_troop, "trp_russian_dragoon_officer"),
      (troop_set_slot,"trp_russian_horse_guard_ai", slot_troop_officer_troop, "trp_russian_horse_guard_officer"),
      (troop_set_slot,"trp_russian_arty_ai", slot_troop_officer_troop, "trp_russian_arty_commander"),
      (troop_set_slot,"trp_russian_arty_alt_ai", slot_troop_officer_troop, "trp_russian_arty_alt_commander"),
      
      # AUSTRIA
      (troop_set_slot,"trp_austrian_infantry_ai", slot_troop_officer_troop, "trp_austrian_infantry_officer"),
      (troop_set_slot,"trp_austrian_infantry2_ai", slot_troop_officer_troop, "trp_austrian_infantry2_officer"),
      (troop_set_slot,"trp_austrian_grenzer_ai", slot_troop_officer_troop, "trp_austrian_grenzer_officer"),
      (troop_set_slot,"trp_austrian_grenadier_ai", slot_troop_officer_troop, "trp_austrian_grenadier_officer"),
      (troop_set_slot,"trp_austrian_infantry_rifle_ai", slot_troop_officer_troop, "trp_austrian_infantry_rifle_officer"),
      (troop_set_slot,"trp_austrian_hussar_ai", slot_troop_officer_troop, "trp_austrian_hussar_officer"),
      (troop_set_slot,"trp_austrian_uhlan_ai", slot_troop_officer_troop, "trp_austrian_uhlan_officer"),
      (troop_set_slot,"trp_austrian_light_horse_ai", slot_troop_officer_troop, "trp_austrian_light_horse_officer"),
      (troop_set_slot,"trp_austrian_dragoon_ai", slot_troop_officer_troop, "trp_austrian_dragoon_officer"),
      (troop_set_slot,"trp_austrian_cuirassier_ai", slot_troop_officer_troop, "trp_austrian_cuirassier_officer"),
      (troop_set_slot,"trp_austrian_arty_ai", slot_troop_officer_troop, "trp_austrian_arty_commander"),
      (troop_set_slot,"trp_austrian_arty_alt_ai", slot_troop_officer_troop, "trp_austrian_arty_alt_commander"),
      
      # RHINE
      (troop_set_slot,"trp_rhine_infantry_bavaria_ai", slot_troop_officer_troop, "trp_rhine_infantry_bavaria_officer"),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg_ai", slot_troop_officer_troop, "trp_rhine_infantry_wurttemberg_officer"),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg2_ai", slot_troop_officer_troop, "trp_rhine_infantry_wurttemberg2_officer"),
      (troop_set_slot,"trp_rhine_infantry_saxony_ai", slot_troop_officer_troop, "trp_rhine_infantry_saxony_officer"),
      (troop_set_slot,"trp_rhine_grenadier_guard_ai", slot_troop_officer_troop, "trp_rhine_grenadier_guard_officer"),
      (troop_set_slot,"trp_rhine_light_infantry_hessen_ai", slot_troop_officer_troop, "trp_rhine_light_infantry_hessen_officer"),
      (troop_set_slot,"trp_rhine_light_infantry_bavaria_ai", slot_troop_officer_troop, "trp_rhine_light_infantry_bavaria_officer"),
      (troop_set_slot,"trp_rhine_mounted_jaeger_ai", slot_troop_officer_troop, "trp_rhine_mounted_jaeger_officer"),
      (troop_set_slot,"trp_rhine_uhlan_ai", slot_troop_officer_troop, "trp_rhine_uhlan_officer"),
      (troop_set_slot,"trp_rhine_light_dragoon_ai", slot_troop_officer_troop, "trp_rhine_light_dragoon_officer"),
      (troop_set_slot,"trp_rhine_cuirassier_ai", slot_troop_officer_troop, "trp_rhine_cuirassier_officer"),
      (troop_set_slot,"trp_rhine_garde_du_corps_ai", slot_troop_officer_troop, "trp_rhine_garde_du_corps_officer"),
      (troop_set_slot,"trp_rhine_arty_ai", slot_troop_officer_troop, "trp_rhine_arty_commander"),
      (troop_set_slot,"trp_rhine_arty_alt_ai", slot_troop_officer_troop, "trp_rhine_arty_alt_commander"),
      
      #Assign scale factor for Commander Battle Mode
      
      # BRITAIN
      (troop_set_slot,"trp_british_infantry_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_british_infantry2_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_british_highlander_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_british_foot_guard_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_british_light_infantry_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_british_rifle_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_british_light_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_british_hussar_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_british_dragoon_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_british_horseguard_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_british_ship_ai", slot_troop_scale_factor, 180),
      (troop_set_slot,"trp_british_ship_marine_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_british_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_british_arty_alt_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_british_rocket_ai", slot_troop_scale_factor, 80),

      # FRANCE
      (troop_set_slot,"trp_french_infantry_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_french_infantry2_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_french_infantry_vistula_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_french_voltigeur_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_french_old_guard_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_french_hussar_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_french_lancer_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_french_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_french_cuirassier_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_french_carabineer_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_french_grenadier_a_cheval_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_french_ship_ai", slot_troop_scale_factor, 180),
      (troop_set_slot,"trp_french_ship_marine_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_french_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_french_arty_alt_ai", slot_troop_scale_factor, 40),
      
      # PRUSSIA
      (troop_set_slot,"trp_prussian_infantry_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_prussian_infantry2_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_prussian_infantry_kurmark_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_prussian_infantry_freikorps_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_prussian_infantry_15_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_prussian_infantry_rifle_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_prussian_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_prussian_hussar_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_prussian_landwehr_cav_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_prussian_cuirassier_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_prussian_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_prussian_arty_alt_ai", slot_troop_scale_factor, 40),
      
      # RUSSIA
      (troop_set_slot,"trp_russian_partizan_ai", slot_troop_scale_factor, 180),
      (troop_set_slot,"trp_russian_opol_ai", slot_troop_scale_factor, 120),
      (troop_set_slot,"trp_russian_infantry_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_russian_grenadier_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_russian_foot_guard_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_russian_infantry_rifle_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_russian_hussar_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_russian_uhlan_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_russian_cossack_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_russian_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_russian_horse_guard_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_russian_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_russian_arty_alt_ai", slot_troop_scale_factor, 40),
      
      # AUSTRIA
      (troop_set_slot,"trp_austrian_infantry_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_austrian_infantry2_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_austrian_grenzer_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_austrian_grenadier_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_austrian_infantry_rifle_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_austrian_hussar_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_austrian_uhlan_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_austrian_light_horse_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_austrian_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_austrian_cuirassier_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_austrian_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_austrian_arty_alt_ai", slot_troop_scale_factor, 40),
      
      # RHINE
      (troop_set_slot,"trp_rhine_infantry_bavaria_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_rhine_infantry_wurttemberg2_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_rhine_infantry_saxony_ai", slot_troop_scale_factor, 100),
      (troop_set_slot,"trp_rhine_grenadier_guard_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_rhine_light_infantry_hessen_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_rhine_light_infantry_bavaria_ai", slot_troop_scale_factor, 90),
      (troop_set_slot,"trp_rhine_mounted_jaeger_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_rhine_uhlan_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_rhine_light_dragoon_ai", slot_troop_scale_factor, 80),
      (troop_set_slot,"trp_rhine_cuirassier_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_rhine_garde_du_corps_ai", slot_troop_scale_factor, 65),
      (troop_set_slot,"trp_rhine_arty_ai", slot_troop_scale_factor, 40),
      (troop_set_slot,"trp_rhine_arty_alt_ai", slot_troop_scale_factor, 40),
      
      (try_for_range,":value",40,60),
         (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      (try_end),
      (try_for_range,":value",60,80),
         (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      (try_end),
      (try_for_range,":value",80,100),
         (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      (try_end),
      (try_for_range,":value",100,120),
         (troop_set_slot,"trp_custom_battle_dummy",":value",0),
      (try_end),
      
      #for multiplayer mode
      (assign, "$g_multiplayer_selected_map", multiplayer_scenes_begin),
      (assign, "$g_multiplayer_respawn_period", 5),
      (assign, "$g_multiplayer_round_max_seconds", 300),
      (assign, "$g_multiplayer_game_max_minutes", 30),
      (assign, "$g_multiplayer_game_max_points", 300),

      (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
      (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
      (assign, "$g_multiplayer_point_gained_from_flags", 100),
      (assign, "$g_multiplayer_point_gained_from_capturing_flag", 5),
      (assign, "$g_multiplayer_game_type", 0),
      (assign, "$g_multiplayer_team_1_faction", "fac_britain"),
      (assign, "$g_multiplayer_team_2_faction", "fac_france"),
      (assign, "$g_multiplayer_next_team_1_faction", "$g_multiplayer_team_1_faction"),
      (assign, "$g_multiplayer_next_team_2_faction", "$g_multiplayer_team_2_faction"),
      (assign, "$g_multiplayer_num_bots_team_1", 0),
      (assign, "$g_multiplayer_num_bots_team_2", 0),
      (assign, "$g_multiplayer_number_of_respawn_count", 0),
      (assign, "$g_multiplayer_num_bots_voteable", 50),
      (assign, "$g_multiplayer_max_num_bots", 251),
      (assign, "$g_multiplayer_factions_voteable", 1),
      (assign, "$g_multiplayer_maps_voteable", 1),
      (assign, "$g_multiplayer_kick_voteable", 1),
      (assign, "$g_multiplayer_ban_voteable", 1),
      (assign, "$g_multiplayer_valid_vote_ratio", 51), #more than 50 percent
      (assign, "$g_multiplayer_auto_team_balance_limit", 3), #auto balance when difference is more than 2
      (assign, "$g_multiplayer_player_respawn_as_bot", 1),
      (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
      (assign, "$g_multiplayer_mission_end_screen", 0),
      (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
      (assign, "$g_multiplayer_welcome_message_shown", 0),
      (assign, "$g_multiplayer_allow_player_banners", 1),
      
      # Vincenzo begin
      (assign, "$g_auto_kick", 1),
      (assign, "$g_max_teamkills_before_kick", 5),
      (assign, "$g_auto_horse", 1),
      (assign, "$g_auto_swap", 0),
      (assign, "$g_next_auto_admin_slot",0),
      (assign, "$g_next_auto_admin_slot_2",100),

      (try_for_range, ":slot", 0, 200),
        (troop_set_slot, "trp_admin_dummy", ":slot", -1),
      (try_end),
	  
      (assign,"$g_admin_chat_type",admin_chat_type_everyone),

      (assign,"$g_rain_type",0),
      (assign,"$g_rain_amount",0),
      (assign,"$g_scene_water_level",-40),
      (assign,"$g_scene_has_snowy_ground",0),
      (assign, "$g_hq_last_spawn_wave", 0),
      (assign, "$g_original_selected_troop", 0),
      (assign, "$g_cur_control_prop_kind", 0),
      (assign, "$g_cur_control_prop_instance", 0),
      (assign, "$g_currently_controlling_object", 0),
      (assign, "$g_time_between_voice_commands", 10), # 20
      (assign, "$g_time_between_voice_commands_officer", 5), # 5  ##patch1115 change begin  fix 9/1
      (assign, "$g_client_drown_sound_channel", -1),
      
      (assign,"$g_used_piano_type",-1),
      
      (assign,"$g_started_playing_music_at",0),
      
      # cannon spawns stuff
      (assign,"$g_artillery_available_on_map",0),
      (assign,"$g_spawn_with_artillery",0),
      
      # inf/cav only spawn stuff.
      (assign,"$g_infantry_available_on_map",1),
      (assign,"$g_cavalry_available_on_map",1),
      
      # explosive restriction
      (assign,"$g_explosives_available_on_map",1),
      (assign,"$g_explosives_available_team1",1),
      (assign,"$g_explosives_available_team2",1),
      
      (assign, "$g_use_class_limits", 1),
      (assign, "$g_use_class_limits_player_count", 13),
      (assign, "$g_limit_grenadier", 30),
      (assign, "$g_limit_skirmisher", 20),
      (assign, "$g_limit_rifle", 100),
      (assign, "$g_limit_cavalry", 30),
      (assign, "$g_limit_lancer", 50),
      (assign, "$g_limit_hussar", 100),
      (assign, "$g_limit_dragoon", 100),
      (assign, "$g_limit_cuirassier", 80),
      (assign, "$g_limit_heavycav", 80),
      (assign, "$g_limit_artillery", 100),
      (assign, "$g_limit_rocket", 5),
      (assign, "$g_limit_arty_train", 5),#patch1115 65/1
      (assign, "$g_limit_sapper", 20),
      (assign, "$g_limit_surgeon", 10),#patch1115 59/2
      (assign, "$g_limit_musician", 1),
      (assign, "$g_limit_sergeant", 2),
      (assign, "$g_limit_officer", 1),
      (assign, "$g_limit_general", 1),     
      
      (assign, "$g_team_1_max_build_points", 40),
      (assign, "$g_team_2_max_build_points", 40),
      
      (assign, "$g_allow_multiple_firearms", 0), # disable doublegunning
      
      (assign, "$g_groupfight_mode", 0),#patch1115 60/1
      (assign, "$g_competitive_score_mode", 0), #G:comp_score:
      (assign, "$g_enable_custom_directional_keys", 0), #set to 1 to enable custom actions on directional keys
      (assign, "$g_enable_action_v", 0), #set to 1 to enable custom actions on v key
      (assign, "$g_enable_action_b", 0), #same for b key
      (assign, "$g_number_of_custom_strings", 0), #set to no less than number of custom string troops you intend to use (to reduce number of server messages on player join)
      (assign, "$g_enable_custom_chat", 1), #set to 1 to enable custom chat initiated on O key
      (assign, "$g_welcome_message", 1),
      
      (assign,"$g_multiplayer_respawn_start_time",-1), # patch1115
      
      (assign, "$g_bonuses_enabled", 1), # enable bonuses
      (assign, "$g_bonus_strength", 100),
      (assign, "$g_bonus_range", 10),
      (assign, "$g_no_rambo_range", 50),
      
      (assign, "$g_squad_size_limit", 20),
      (assign, "$g_scale_squad_size", 1),   
      (assign, "$g_prev_squad_size_limit", "$g_squad_size_limit"),
      (assign, "$g_max_num_bots", 500),
      
      (assign,"$g_should_tp", 0),#patch1115 46/36
      (assign,"$g_auto_FF", 0),
      (assign,"$g_auto_FF_2", 0),
      
      (assign, "$g_no_rambo", 1),
      (assign, "$g_no_line_inf_spread", 0), #DISABLE THIS BY DEFAULT #patch1115 63/2
      (assign, "$g_num_custom_maps", 0),#patch1115 64/1
      (assign, "$g_admin_white_list", 0),
      
      (assign, "$g_chance_of_falling_off_horse", 0),
      (assign, "$g_damage_from_horse_dying", 100),
      
      (assign, "$g_player_loops_begin", 1),
      (assign, "$g_ignore_server", 1),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (assign, "$g_player_loops_begin", 0),
        (assign,"$g_ignore_server", 0),
      (try_end),
      # Vincenzo end
      
      #Beaver begin
      # Setting default build point costs for build props
      (store_add,":cost_index",construct_costs_offset,"spr_mm_stakes_construct"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",5),
      (store_add,":cost_index",construct_costs_offset,"spr_mm_stakes2_construct"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",4),
      (store_add,":cost_index",construct_costs_offset,"spr_sandbags_construct"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",5),
      (store_add,":cost_index",construct_costs_offset,"spr_chevaux_de_frise_tri_construct"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",2),#patch1115 53/1
      (store_add,":cost_index",construct_costs_offset,"spr_gabiondeploy_construct"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",3),
      (store_add,":cost_index",construct_costs_offset,"spr_mm_fence1d"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",6),
      (store_add,":cost_index",construct_costs_offset,"spr_plank_construct_dummy"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",2),#patch1115 53/2
      (store_add,":cost_index",construct_costs_offset,"spr_earthwork1_construct_dummy"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",4),
      (store_add,":cost_index",construct_costs_offset,"spr_crate_explosive"),(val_sub,":cost_index",mm_construct_props_begin),
      (troop_set_slot,"trp_track_select_dummy",":cost_index",6),
      #Beaver end

      #faction banners
      (faction_set_slot, "fac_britain", slot_faction_banner, "mesh_banner_kingdom_f"),
      (faction_set_slot, "fac_france", slot_faction_banner, "mesh_banner_kingdom_b"),
      (faction_set_slot, "fac_prussia", slot_faction_banner, "mesh_banner_kingdom_c"),
      (faction_set_slot, "fac_russia", slot_faction_banner, "mesh_banner_kingdom_a"),
      (faction_set_slot, "fac_austria", slot_faction_banner, "mesh_banner_kingdom_d"),
      (faction_set_slot, "fac_rhine", slot_faction_banner, "mesh_banner_kingdom_e"),

      # weapons
      (assign,":royale_item_class_musket_count",0),
      (assign,":royale_item_class_pistol_count",0),
      (assign,":royale_item_class_carabine_count",0),
      (assign,":royale_item_class_smallsword_count",0),
      (assign,":royale_item_class_bigsword_count",0),
      (assign,":royale_item_class_bottle_count",0),
      (assign,":royale_item_class_axe_count",0),
      (assign,":royale_item_class_spear_count",0),
      (assign,":royale_item_class_club_count",0),
      (assign,":royale_item_class_tool_count",0),
      (assign,":royale_item_class_ramrod_count",0),
      (assign,":royale_item_class_lighter_count",0),
      #ammo
      (assign,":royale_item_class_ammo_count",0),
      #horses
      (assign,":royale_item_class_horse_light_count",0),
      (assign,":royale_item_class_horse_medium_count",0),
      (assign,":royale_item_class_horse_heavy_count",0),
      (assign,":royale_item_class_horse_arty_count",0),
      (try_for_range,":item",all_items_begin,all_items_end),
        (ge,":item","itm_french_cav_pistol"),
        
        (try_begin),
          (lt,":item","itm_french_mousquiton"),   #Guns
          (item_set_slot,":item",slot_item_multiplayer_item_class2, multi_item_class_type_pistol),
        (else_try),
          (lt,":item","itm_french_art_off_sword"),   #Guns
          (item_set_slot,":item",slot_item_multiplayer_item_class2, multi_item_class_type_gun),
        (try_end),
        
        (try_begin),
          (lt,":item","itm_french_art_off_sword"),   #Guns
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_gun),
        (else_try),
          (lt,":item","itm_drumstick_right"),   #Side-arms
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_sword),
        (else_try),
          (lt,":item","itm_bullets"),   #Instruments
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_instrument),
        (else_try),
          (lt,":item","itm_french_lance"),   #Ammo
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_bullet),
          (try_begin),
            (eq,":item","itm_pistol_ammo"),   #Guns
            (item_set_slot,":item",slot_item_multiplayer_item_class2, multi_item_class_type_pistol),
          (else_try),
            (item_set_slot,":item",slot_item_multiplayer_item_class2, multi_item_class_type_gun),
          (try_end),
        (else_try),
          (lt,":item","itm_flag_france_45e"),   #Lances
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_lance),
        (else_try),
          (lt,":item","itm_cannon_lighter"),   #Colours
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_flag),
        (else_try),
          (lt,":item","itm_french_voltigeur_body_officer"),   #Misc
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_misc),    
        (else_try),
          (lt,":item","itm_rus_pavlovsk_ranker"),   #Uniforms
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_uniform),
        (else_try),
          (lt,":item","itm_french_voltigeur_pants"),   #Hats
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_hat),
        (else_try),
          (lt,":item","itm_officer_gloves"),   #Boots
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_boot),
        (else_try),
          (lt,":item","itm_hussar_horse_french"),   #Gloves
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_glove),	
        (else_try),
          (lt,":item","itm_arty_horse_cannon_french"),  #Horse
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_horse),
        (else_try),
          (lt,":item","itm_arty_horse_howitzer_french"),  #Artillery Horse for Cannon
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_horse_cannon),
        (else_try),
          (lt,":item","itm_items_end"),  #Artillery Horse for Howitzers
          (item_set_slot,":item",slot_item_multiplayer_item_class, multi_item_class_type_horse_howitzer),
        (try_end),
      (try_begin),
        (is_between,":item","itm_french_mousquiton","itm_sniper_rifle"), #gf slots #patch1115 60/14 start
        (try_begin),
          (eq, ":item", "itm_french_mousquiton"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_french_mousquiton_melee_gf"),
        (else_try),
          (eq, ":item", "itm_french_mousquiton_light"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_french_mousquiton_light_melee_gf"),
        (else_try),
          (eq, ":item", "itm_french_dragoon_musket"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_french_dragoon_musket_melee_gf"),
        (else_try),
          (eq, ":item", "itm_russian_dragoon_musket"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_russian_dragoon_musket_melee_gf"),
        (else_try),
          (eq, ":item", "itm_russian_gusarskiy_karabin"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_russian_gusarskiy_karabin_melee_gf"),
        (else_try),
          (eq, ":item", "itm_british_carbine"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_british_carbine_melee_gf"),
        (else_try),
          (eq, ":item", "itm_russian_rifle_1805"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_russian_rifle_1805_melee_gf"),
        (else_try),
          (eq, ":item", "itm_british_baker_rifle"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_british_baker_rifle_melee_gf"),
        (try_end),
      (try_end), 
      (try_begin),
        (is_between,":item","itm_french_charleville","itm_french_art_off_sword"), #gf slots #2
        (try_begin),
          (eq, ":item", "itm_french_charleville"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_french_charleville_melee_gf"),
        (else_try),
          (eq, ":item", "itm_french_versailles"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_french_versailles_melee_gf"),
        (else_try),
          (eq, ":item", "itm_british_brown_bess"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_british_brown_bess_melee_gf"),
        (else_try),
          (eq, ":item", "itm_russian_musket_1808"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_russian_musket_1808_melee_gf"),
        (else_try),
          (eq, ":item", "itm_austrian_musket"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_austrian_musket_melee_gf"),
        (else_try),
          (eq, ":item", "itm_prussian_potsdam"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_prussian_potsdam_melee_gf"),
        (else_try),
          (eq, ":item", "itm_prussian_musket_1806"),
          (item_set_slot,":item",slot_item_multiplayer_gf, "itm_prussian_musket_1806_melee_gf"),
        (try_end),
      (try_end),#patch1115 60/14 end


        #Battle royale, store in dummytroops the weaponids + count for each type which can be spawned.
        (try_begin),
          #pistols
          (lt,":item","itm_french_mousquiton"),   

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_pistol),
          (val_add,":royale_item_class_pistol_count",1),
          (troop_set_slot,"trp_royale_item_class_pistol_dummy",":royale_item_class_pistol_count",":item"),
        (else_try),
          #carabines
          (this_or_next|eq,":item","itm_french_mousquiton"), 
          (this_or_next|eq,":item","itm_french_mousquiton_light"),
          (this_or_next|eq,":item","itm_french_dragoon_musket"),
          (this_or_next|eq,":item","itm_russian_dragoon_musket"),
          (this_or_next|eq,":item","itm_russian_cavalry_stutzer_1803"),
          (this_or_next|eq,":item","itm_british_carbine"),
          (this_or_next|eq,":item","itm_russian_gusarskiy_karabin"),
          (this_or_next|eq,":item","itm_russian_rifle_1805"),
          (eq,":item","itm_british_baker_rifle"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_carabine),
          (val_add,":royale_item_class_carabine_count",1),
          (troop_set_slot,"trp_royale_item_class_carabine_dummy",":royale_item_class_carabine_count",":item"),
        (else_try),
          #musket
          (this_or_next|eq,":item","itm_french_charleville"), 
          (this_or_next|eq,":item","itm_french_versailles"),
          (this_or_next|eq,":item","itm_british_brown_bess"),
          (this_or_next|eq,":item","itm_russian_musket_1808"),
          (this_or_next|eq,":item","itm_austrian_musket"),
          (this_or_next|eq,":item","itm_prussian_potsdam"),
          (eq,":item","itm_prussian_musket_1806"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_musket),
          (val_add,":royale_item_class_musket_count",1),
          (troop_set_slot,"trp_royale_item_class_musket_dummy",":royale_item_class_musket_count",":item"),
        (else_try),
          #smallsword
          (this_or_next|eq,":item","itm_french_briquet_garde"), 
          (this_or_next|eq,":item","itm_french_briquet"),
          (this_or_next|eq,":item","itm_french_sappeur_sword"),
          (this_or_next|eq,":item","itm_russian_briquet_1807"),
          (this_or_next|eq,":item","itm_russian_jaeger_bayonet"),
          (this_or_next|eq,":item","itm_russian_sappeur_dagger"),
          (this_or_next|eq,":item","itm_british_baker_bayonet"),
          (this_or_next|eq,":item","itm_british_musician_sword"),
          (this_or_next|eq,":item","itm_austrian_infantry_briquet"),
          (this_or_next|eq,":item","itm_austrian_infantry_briquet_black"),
          (this_or_next|eq,":item","itm_austrian_jaeger_bayonet"),
          (this_or_next|eq,":item","itm_russian_briquet_1807_black"),
          (this_or_next|eq,":item","itm_russian_briquet_1807_black_blackbelt"),
          (this_or_next|eq,":item","itm_russian_briquet_1807_landwehr"),
          (this_or_next|eq,":item","itm_russian_kindjal"),
          (this_or_next|eq,":item","itm_russian_peasant_serp"),
          (eq,":item","itm_russian_peasant_knife"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_smallsword),
          (val_add,":royale_item_class_smallsword_count",1),
          (troop_set_slot,"trp_royale_item_class_smallsword_dummy",":royale_item_class_smallsword_count",":item"),
        (else_try),
          #bigsword
          (this_or_next|eq,":item","itm_french_light_cav_sabre_garde"), 
          (this_or_next|eq,":item","itm_french_light_cav_off_sabre"),
          (this_or_next|eq,":item","itm_french_light_cav_sabre"),
          (this_or_next|eq,":item","itm_russian_sabre_1798"),
          (this_or_next|eq,":item","itm_russian_sabre_1809"),
          (this_or_next|eq,":item","itm_british_light_cav_sabre"),
          (this_or_next|eq,":item","itm_french_carabineer_sword"), 
          (this_or_next|eq,":item","itm_french_heavy_cav_sabre_garde"),
          (this_or_next|eq,":item","itm_french_heavy_cav_off_sabre"),
          (this_or_next|eq,":item","itm_french_line_cav_sabre"),
          (this_or_next|eq,":item","itm_russian_sword_1810"),
          (this_or_next|eq,":item","itm_russian_guard_sword_1799"),
          (this_or_next|eq,":item","itm_british_heavy_cav_sword"),
          (this_or_next|eq,":item","itm_french_art_off_sword"), 
          (this_or_next|eq,":item","itm_french_inf_off_sabre_garde"),
          (this_or_next|eq,":item","itm_french_inf_off_sabre"),
          (this_or_next|eq,":item","itm_french_light_inf_off_sabre"),
          (this_or_next|eq,":item","itm_russian_officer_sword"),
          (this_or_next|eq,":item","itm_russian_officer_sword_jaeger"),
          (this_or_next|eq,":item","itm_russian_guard_off_sword"),
          (this_or_next|eq,":item","itm_british_highlander_officer_sword"),
          (eq,":item","itm_british_officer_sword"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_bigsword),
          (val_add,":royale_item_class_bigsword_count",1),
          (troop_set_slot,"trp_royale_item_class_bigsword_dummy",":royale_item_class_bigsword_count",":item"),
        (else_try),
          #axe
          (this_or_next|eq,":item","itm_russian_peasant_axe"),
          (this_or_next|eq,":item","itm_russian_peasant_axe_landwehr"),
          (this_or_next|eq,":item","itm_russian_peasant_2handed_axe"),
          (this_or_next|eq,":item","itm_sapper_axe_ship"),
          (this_or_next|eq,":item","itm_sapper_axe_rus_ship"),
          (this_or_next|eq,":item","itm_sapper_axe"),
          (eq,":item","itm_sapper_axe_rus"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_axe),
          (val_add,":royale_item_class_axe_count",1),
          (troop_set_slot,"trp_royale_item_class_axe_dummy",":royale_item_class_axe_count",":item"),
        (else_try),
          #bottle
          (eq,":item","itm_brokenbottle"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_bottle),
          (val_add,":royale_item_class_bottle_count",1),
          (troop_set_slot,"trp_royale_item_class_bottle_dummy",":royale_item_class_bottle_count",":item"),
        (else_try),
          #ammo
          (this_or_next|eq,":item","itm_bullets"),
          (eq,":item","itm_pistol_ammo"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_ammo),
          (val_add,":royale_item_class_ammo_count",1),
          (troop_set_slot,"trp_royale_item_class_ammo_dummy",":royale_item_class_ammo_count",":item"),
        (else_try),
          #Spears and pikes
          (this_or_next|is_between,":item","itm_french_lance","itm_birch_trunk"),
          (this_or_next|eq,":item","itm_Russian_peasant_kosa2"),
          (this_or_next|eq,":item","itm_russian_peasant_pike"),
          (eq,":item","itm_russian_peasant_rogatina"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_spear),
          (val_add,":royale_item_class_spear_count",1),
          (troop_set_slot,"trp_royale_item_class_spear_dummy",":royale_item_class_spear_count",":item"),
        (else_try),
          #club
          (this_or_next|eq,":item","itm_birch_trunk"),
          (this_or_next|eq,":item","itm_russian_peasant_club"),
          (this_or_next|eq,":item","itm_russian_peasant_birch_club"),
          (eq,":item","itm_russian_peasant_kuvalda"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_club),
          (val_add,":royale_item_class_club_count",1),
          (troop_set_slot,"trp_royale_item_class_club_dummy",":royale_item_class_club_count",":item"),
        (else_try),
          #lighter
          (eq,":item","itm_cannon_lighter"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_lighter),
          (val_add,":royale_item_class_lighter_count",1),
          (troop_set_slot,"trp_royale_item_class_lighter_dummy",":royale_item_class_lighter_count",":item"),
        (else_try),
          #ramrod
          (eq,":item","itm_ramrod"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_ramrod),
          (val_add,":royale_item_class_ramrod_count",1),
          (troop_set_slot,"trp_royale_item_class_ramrod_dummy",":royale_item_class_ramrod_count",":item"),
        (else_try),
          #tool
          (this_or_next|eq,":item","itm_spyglass"),
          (this_or_next|eq,":item","itm_bandages"),
          (this_or_next|eq,":item","itm_construction_hammer"),
          (eq,":item","itm_shovel"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_tool),
          (val_add,":royale_item_class_tool_count",1),
          (troop_set_slot,"trp_royale_item_class_tool_dummy",":royale_item_class_tool_count",":item"),
        (else_try),
          #horse_light
          (this_or_next|is_between,":item","itm_hussar_horse_french","itm_dragoon_horse_french"),
          (this_or_next|is_between,":item","itm_lightdragoon_horse_britain_1","itm_heavydragoon_horse_britain"),
          (this_or_next|is_between,":item","itm_lancer_horse_prussia_1","itm_dragoon_horse_prussia_1"),
          (this_or_next|is_between,":item","itm_cossack_horse_russia_1","itm_dragoon_horse_russia"),
          (is_between,":item","itm_lancer_horse_austria","itm_dragoon_horse_austria"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_horse_light),
          (val_add,":royale_item_class_horse_light_count",1),
          (troop_set_slot,"trp_royale_item_class_horse_light_dummy",":royale_item_class_horse_light_count",":item"),
        (else_try),
          #horse_medium
          (this_or_next|is_between,":item","itm_dragoon_horse_french","itm_cuirassier_horse_french"),
          (this_or_next|is_between,":item","itm_dragoon_horse_prussia_1","itm_heavy_horse_prussia_1"),
          (this_or_next|eq,":item","itm_dragoon_horse_russia"),
          (eq,":item","itm_dragoon_horse_austria"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_horse_medium),
          (val_add,":royale_item_class_horse_medium_count",1),
          (troop_set_slot,"trp_royale_item_class_horse_medium_dummy",":royale_item_class_horse_medium_count",":item"),
        (else_try),
          #horse_heavy
          (this_or_next|is_between,":item","itm_cuirassier_horse_french","itm_lightdragoon_horse_britain_1"),
          (this_or_next|is_between,":item","itm_heavydragoon_horse_britain","itm_lancer_horse_prussia_1"),
          (this_or_next|is_between,":item","itm_heavy_horse_prussia_1","itm_cossack_horse_russia_1"),
          (this_or_next|eq,":item","itm_heavy_horse_russia"),
          (eq,":item","itm_heavy_horse_austria"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_horse_heavy),
          (val_add,":royale_item_class_horse_heavy_count",1),
          (troop_set_slot,"trp_royale_item_class_horse_heavy_dummy",":royale_item_class_horse_heavy_count",":item"),
        (else_try),
          #horse_arty
          (is_between,":item","itm_arty_horse_cannon_french","itm_arty_horse_howitzer_french"),

          (item_set_slot,":item",slot_item_royale_item_class, royale_item_class_horse_arty),
          (val_add,":royale_item_class_horse_arty_count",1),
          (troop_set_slot,"trp_royale_item_class_horse_arty_dummy",":royale_item_class_horse_arty_count",":item"),
        (try_end),
      (try_end),
      
      #0 store the weapon count in the 0 slot.
      (troop_set_slot,"trp_royale_item_class_musket_dummy",0,":royale_item_class_musket_count"),
      (troop_set_slot,"trp_royale_item_class_pistol_dummy",0,":royale_item_class_pistol_count"),
      (troop_set_slot,"trp_royale_item_class_carabine_dummy",0,":royale_item_class_carabine_count"),
      (troop_set_slot,"trp_royale_item_class_smallsword_dummy",0,":royale_item_class_smallsword_count"),
      (troop_set_slot,"trp_royale_item_class_bigsword_dummy",0,":royale_item_class_bigsword_count"),
      (troop_set_slot,"trp_royale_item_class_bottle_dummy",0,":royale_item_class_bottle_count"),
      (troop_set_slot,"trp_royale_item_class_axe_dummy",0,":royale_item_class_axe_count"),
      (troop_set_slot,"trp_royale_item_class_spear_dummy",0,":royale_item_class_spear_count"),
      (troop_set_slot,"trp_royale_item_class_club_dummy",0,":royale_item_class_club_count"),
      (troop_set_slot,"trp_royale_item_class_tool_dummy",0,":royale_item_class_tool_count"),
      (troop_set_slot,"trp_royale_item_class_ramrod_dummy",0,":royale_item_class_ramrod_count"),
      (troop_set_slot,"trp_royale_item_class_lighter_dummy",0,":royale_item_class_lighter_count"),
      # ammo
      (troop_set_slot,"trp_royale_item_class_ammo_dummy",0,":royale_item_class_ammo_count"),
      # horses
      (troop_set_slot,"trp_royale_item_class_horse_light_dummy",0,":royale_item_class_horse_light_count"),
      (troop_set_slot,"trp_royale_item_class_horse_medium_dummy",0,":royale_item_class_horse_medium_count"),
      (troop_set_slot,"trp_royale_item_class_horse_heavy_dummy",0,":royale_item_class_horse_heavy_count"),
      (troop_set_slot,"trp_royale_item_class_horse_arty_dummy",0,":royale_item_class_horse_arty_count"),



      #Beaver New
      (try_for_range,":troop_id",multiplayer_troops_begin,multiplayer_troops_end),
        (troop_get_inventory_capacity, ":inv_cap", ":troop_id"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_get_inventory_slot, ":item_id", ":troop_id", ":i_slot"),		  
          (ge, ":item_id", 0),
		  
		  #patch1115 item stuff fix 17/1
          (try_begin), # set items as available only if the player can actually select them
            (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
            
            (assign, ":is_ok", 0),
            
            (try_begin),
              (eq, ":troop_id", "trp_russian_opol"),
              
              (this_or_next|eq, ":item_id", "itm_russian_dragoon_musket"),
              (this_or_next|eq, ":item_id", "itm_russian_opolcheniye_pike"),
              (eq, ":item_id", "itm_bullets"),
              
              (assign, ":is_ok", 1),
            (else_try), 
              (eq, ":troop_id", "trp_prussian_infantry_kurmark"),#patch1115 49/5
              
              (this_or_next|eq, ":item_id", "itm_prussian_potsdam"),
              (this_or_next|eq, ":item_id", "itm_russian_opolcheniye_pike"),
              (eq, ":item_id", "itm_bullets"),
              
              (assign, ":is_ok", 1),
            (else_try), 
              (this_or_next|eq, ":troop_id", "trp_prussian_infantry_rifle"),#patch1115 66/1
              (eq, ":troop_id", "trp_prussian_infantry_rifle_nco"),
              
              (this_or_next|eq, ":item_id", "itm_russian_rifle_1805"),
              (eq, ":item_id", "itm_russian_dragoon_musket"),
              
              
              (assign, ":is_ok", 1),# #patch1115 66/1 end
            (else_try),
              (this_or_next|eq, ":troop_id", "trp_russian_infantry_rifle"),
              (eq, ":troop_id", "trp_russian_infantry_rifle_nco"),
              
              (this_or_next|eq, ":item_id", "itm_russian_rifle_1805"),
              (eq, ":item_id", "itm_russian_dragoon_musket"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (this_or_next|eq, ":troop_id", "trp_rhine_light_infantry_bavaria"),
              (eq, ":troop_id", "trp_rhine_light_infantry_bavaria_nco"),
              
              (this_or_next|eq, ":item_id", "itm_russian_rifle_1805"),
              (eq, ":item_id", "itm_french_dragoon_musket"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (eq, ":troop_id", "trp_russian_dragoon"),
              
              (this_or_next|eq, ":item_id", "itm_russian_dragoon_musket"),
              (eq, ":item_id", "itm_russian_cavalry_stutzer_1803"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (eq, ":troop_id", "trp_french_voltigeur"),
              
              (this_or_next|eq, ":item_id", "itm_french_dragoon_musket"),
              (eq, ":item_id", "itm_french_charleville"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (eq, ":troop_id", "trp_french_dragoon"),
              
              (this_or_next|eq, ":item_id", "itm_french_dragoon_musket"),
              (eq, ":item_id", "itm_french_mousquiton"),
              #(eq, ":item_id", "itm_french_mousquiton_light"),
              
              (assign, ":is_ok", 1),
						(else_try),
              (eq, ":troop_id", "trp_rhine_light_dragoon"),
              
              (this_or_next|eq, ":item_id", "itm_russian_dragoon_musket"),
              (eq, ":item_id", "itm_french_mousquiton_light"),
              
              (assign, ":is_ok", 1),
						(else_try),
              (eq, ":troop_id", "trp_british_light_dragoon"),
              
              (this_or_next|eq, ":item_id", "itm_russian_dragoon_musket"),
              (eq, ":item_id", "itm_british_carbine"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (eq, ":troop_id", "trp_austrian_grenzer"),
              
              (this_or_next|eq, ":item_id", "itm_austrian_musket"),
              (this_or_next|eq, ":item_id", "itm_russian_rifle_1805"),
              (eq, ":item_id", "itm_russian_gusarskiy_karabin"),
              
              (assign, ":is_ok", 1),
            (else_try),
              (eq, ":item_class", multi_item_class_type_flag),
              
              (assign, ":is_ok", 1),
            (else_try), # arty
              (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
              (neq, ":item_class", multi_item_class_type_horse),
              
              (assign, ":is_ok", 1),
            (try_end),
            
            (eq, ":is_ok", 1),
            (call_script, "script_multiplayer_set_item_available_for_troop", ":item_id", ":troop_id"),  
          (try_end), #patch1115 item stuff end  fix 17/1 end
        (try_end),
      (try_end),
      
      (try_for_range,":troop_id","trp_player","trp_quick_battle_troops_end"),
        (neg|is_between,":troop_id","trp_multiplayer_profile_troop_male","trp_british_infantry_ai"), #ignore also start dummies.
        (neg|is_between,":troop_id","trp_admin_dummy","trp_quick_battle_troop_britain_1"), # ignore the dummies.
        
        (call_script, "script_multiplayer_get_troop_class", ":troop_id"),
        (assign, ":player_class", reg0),
        (assign, ":player_class_type", reg1),
        (assign, ":player_rank", reg2),
        (assign, ":player_rank_type", reg3),
        (troop_set_slot,":troop_id", slot_troop_class, ":player_class"),
        (troop_set_slot,":troop_id", slot_troop_class_type, ":player_class_type"),
        (troop_set_slot,":troop_id", slot_troop_rank, ":player_rank"),
        (troop_set_slot,":troop_id", slot_troop_rank_type, ":player_rank_type"),
      (try_end),
      
      
      # Initiallise the randomer variables.
      
      (assign,"$g_randomer_seed1",12345),
      (assign,"$g_randomer_seed2",23456),
      
      
      (server_set_add_to_game_servers_list, 1),
      (server_set_anti_cheat,0),
 # default melee friendlyfire and mouse control blocking
      (server_set_melee_friendly_fire, 1),
      (server_set_control_block_dir, 1),
     # (server_set_max_num_players,multiplayer_player_loops_end),
      ]),


  
  #script_spawn_quick_battle_army
  # INPUT: arg1 = initial_entry_point, arg2 = faction_no, arg3 = infantry_ratio, arg4 = archers_ratio, arg5 = cavalry_ratio, arg6 = divide_archer_entry_points, arg7 = player_team
  # OUTPUT: none
  ("spawn_quick_battle_army",
   [
     (try_begin),
       #Assign correct banners to factions for the troops
       (faction_get_slot, "$g_quick_battle_team_0_banner", "$g_quick_battle_team_1_faction", slot_faction_banner),
       (faction_get_slot, "$g_quick_battle_team_1_banner", "$g_quick_battle_team_2_faction", slot_faction_banner),
       
       #Assign player troop
       (try_begin),
          (eq,"$g_quick_battle_team_1_faction","fac_britain"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_britain_1"),
       (else_try),
          (eq,"$g_quick_battle_team_1_faction","fac_france"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_france_1"),
       (else_try),
          (eq,"$g_quick_battle_team_1_faction","fac_prussia"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_prussia_1"),
       (else_try),
          (eq,"$g_quick_battle_team_1_faction","fac_russia"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_russia_1"),
       (else_try),
          (eq,"$g_quick_battle_team_1_faction","fac_austria"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_austria_1"),
       (else_try),
          (eq,"$g_quick_battle_team_1_faction","fac_rhine"),
          (assign,"$g_quick_battle_troop","trp_quick_battle_troop_austria_1"),
       (try_end),
       (set_player_troop, "$g_quick_battle_troop"),
       (set_visitor, 0, "$g_quick_battle_troop"),
       
       #Assign team 1 Army
       (assign,":entry_no",1),
       (try_for_range,":value",0,9),
        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":value"),
        (try_begin),
          (gt,":troop_value",0),
          (assign,":cur_troop_value",1),
          (assign,":end_cond",multiplayer_ai_troops_end),
          (try_for_range_backwards,":troop_no",multiplayer_ai_troops_begin,":end_cond"),
            (store_troop_faction,":faction_no",":troop_no"),
            (eq,":faction_no","$g_quick_battle_team_1_faction"),

            (troop_get_slot,":troop_class",":troop_no",slot_troop_class),
            (neq,":troop_class",multi_troop_class_mm_rocket),
            (neq,":troop_class",multi_troop_class_mm_artillery),
          
            (try_begin),
              (eq,":troop_value",":cur_troop_value"),
              (assign,":troop_id",":troop_no"),
              (store_add,":num_troops_slot",":value",20),
              (troop_get_slot,":num_troops","trp_custom_battle_dummy",":num_troops_slot"),
              (assign,":end_cond",0),
            (try_end),
            (val_add,":cur_troop_value",1),
          (try_end),
          (add_visitors_to_current_scene,":entry_no",":troop_id",":num_troops"),
          (troop_get_slot,":troop_base_type",":troop_id",slot_troop_base_type),
          (store_add,":slot",slot_team1_base_troops_begin,":value"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",":troop_base_type"),
          (store_add,":slot",slot_team1_cstatus_begin,":value"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
          (store_add,":slot",slot_team1_amount_of_troops,":value"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",":num_troops"),
          (val_add,":entry_no",1),
        (else_try),
          (val_add,":slot",slot_team1_cstatus_begin,":value"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_dead),
        (try_end),
       (try_end),
       
       #Assign team 2 Army
       (assign,":entry_no",11),
       (try_for_range,":value",10,19),
        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":value"),
        (store_sub,":value_to_use",":value",10),
        (try_begin),
          (gt,":troop_value",0),
          (assign,":cur_troop_value",1),
          (assign,":end_cond",multiplayer_ai_troops_end),
          (try_for_range_backwards,":troop_no",multiplayer_ai_troops_begin,":end_cond"),
            (store_troop_faction,":faction_no",":troop_no"),
            (eq,":faction_no","$g_quick_battle_team_2_faction"),
      
            (troop_get_slot,":troop_class",":troop_no",slot_troop_class),
            (neq,":troop_class",multi_troop_class_mm_rocket),
            (neq,":troop_class",multi_troop_class_mm_artillery),
          
            (try_begin),
              (eq,":troop_value",":cur_troop_value"),
              (assign,":troop_id",":troop_no"),
              (store_add,":num_troops_slot",":value",20),
              (troop_get_slot,":num_troops","trp_custom_battle_dummy",":num_troops_slot"),
              (assign,":end_cond",0),
            (try_end),
            (val_add,":cur_troop_value",1),
          (try_end),
          (add_visitors_to_current_scene,":entry_no",":troop_id",":num_troops"),
          (troop_get_slot,":troop_base_type",":troop_id",slot_troop_base_type),
          (store_add,":slot",slot_team2_base_troops_begin,":value_to_use"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",":troop_base_type"),
          (store_add,":slot",slot_team2_cstatus_begin,":value_to_use"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
          (store_add,":slot",slot_team2_amount_of_troops,":value_to_use"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",":num_troops"),
          (val_add,":entry_no",1),
        (else_try),
          (val_add,":slot",slot_team2_cstatus_begin,":value_to_use"),
          (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_dead),
        (try_end),
       (try_end),
     (try_end),
     ]),



  #script_game_set_multiplayer_mission_end
  # This script is called from the game engine when a multiplayer map is ended in clients (not in server).
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_set_multiplayer_mission_end",
    [
      (assign, "$g_multiplayer_mission_end_screen", 1),
  ]),
  #script_game_enable_cheat_menu
  # This script is called from the game engine when user enters "cheatmenu from command console (ctrl+~).
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_enable_cheat_menu",
  []),
  
  # fix warnings.
  ("game_troop_upgrades_button_clicked",
  []),
  ("game_character_screen_requested",
  []),

  #script_game_get_console_command
  # This script is called from the game engine when a console command is entered from the dedicated server.
  # INPUT: anything
  # OUTPUT: s0 = result text
  ("game_get_console_command",
   [
     (store_script_param, ":input", 1),
     (store_script_param, ":val1", 2),
     (try_begin),
       #getting val2 for some commands
       (eq, ":input", 2),
       (store_script_param, ":val2", 3),
     (try_end),
     (try_begin),
       (eq, ":input", 1),
       (assign, reg0, ":val1"),
       (try_begin),
         (eq, ":val1", 1),
         (assign, reg1, "$g_multiplayer_num_bots_team_1"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (eq, ":val1", 2),
         (assign, reg1, "$g_multiplayer_num_bots_team_2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 2),
       (assign, reg0, ":val1"),
       (assign, reg1, ":val2"),
       (try_begin),
         (eq, ":val1", 1),
         (ge, ":val2", 0),
         (assign, "$g_multiplayer_num_bots_team_1", ":val2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (eq, ":val1", 2),
         (ge, ":val2", 0),
         (assign, "$g_multiplayer_num_bots_team_2", ":val2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 3),
       (assign, reg0, "$g_multiplayer_round_max_seconds"),
       (str_store_string, s0, "str_maximum_seconds_for_round_is_reg0"),
     (else_try),
       (eq, ":input", 4),
       (assign, reg0, ":val1"),
       (try_begin),
         (is_between, ":val1", multiplayer_round_max_seconds_min, multiplayer_round_max_seconds_max),
         (assign, "$g_multiplayer_round_max_seconds", ":val1"),
         (str_store_string, s0, "str_maximum_seconds_for_round_is_reg0"),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_round_max_seconds, ":val1"),
         (try_end),            
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 5),
       (assign, reg0, "$g_multiplayer_respawn_period"),
       (str_store_string, s0, "str_respawn_period_is_reg0_seconds"),
     (else_try),
       (eq, ":input", 6),
       (assign, reg0, ":val1"),
       (try_begin),
         (is_between, ":val1", multiplayer_respawn_period_min, multiplayer_respawn_period_max),
         (assign, "$g_multiplayer_respawn_period", ":val1"),
         (str_store_string, s0, "str_respawn_period_is_reg0_seconds"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 7),
       (assign, reg0, "$g_multiplayer_num_bots_voteable"),
       (str_store_string, s0, "str_bots_upper_limit_for_votes_is_reg0"),
     (else_try),
       (eq, ":input", 8),
       (try_begin),
         (is_between, ":val1", 0, 51),
         (assign, "$g_multiplayer_num_bots_voteable", ":val1"),
         #(store_add, "$g_multiplayer_max_num_bots", ":val1", 1),
         (assign, reg0, "$g_multiplayer_num_bots_voteable"),
         (str_store_string, s0, "str_bots_upper_limit_for_votes_is_reg0"),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_num_bots_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 9),
       (try_begin),
         (eq, "$g_multiplayer_maps_voteable", 1),
         (str_store_string, s0, "str_map_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_map_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 10),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_maps_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_map_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_map_is_not_voteable"),
         (try_end),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_maps_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 11),
       (try_begin),
         (eq, "$g_multiplayer_factions_voteable", 1),
         (str_store_string, s0, "str_factions_are_voteable"),
       (else_try),
         (str_store_string, s0, "str_factions_are_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 12),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_factions_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_factions_are_voteable"),
         (else_try),
           (str_store_string, s0, "str_factions_are_not_voteable"),
         (try_end),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_factions_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 13),
       (try_begin),
         (eq, "$g_multiplayer_player_respawn_as_bot", 1),
         (str_store_string, s0, "str_players_respawn_as_bot"),
       (else_try),
         (str_store_string, s0, "str_players_do_not_respawn_as_bot"),
       (try_end),
     (else_try),
       (eq, ":input", 14),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_player_respawn_as_bot", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_players_respawn_as_bot"),
         (else_try),
           (str_store_string, s0, "str_players_do_not_respawn_as_bot"),
         (try_end),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_player_respawn_as_bot, ":val1"),
         (try_end),            
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 15),
       (try_begin),
         (eq, "$g_multiplayer_kick_voteable", 1),
         (str_store_string, s0, "str_kicking_a_player_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_kicking_a_player_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 16),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_kick_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_kicking_a_player_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_kicking_a_player_is_not_voteable"),
         (try_end),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_kick_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 17),
       (try_begin),
         (eq, "$g_multiplayer_ban_voteable", 1),
         (str_store_string, s0, "str_banning_a_player_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_banning_a_player_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 18),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_ban_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_banning_a_player_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_banning_a_player_is_not_voteable"),
         (try_end),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_ban_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 19),
       (assign, reg0, "$g_multiplayer_valid_vote_ratio"),
       (str_store_string, s0, "str_percentage_of_yes_votes_required_for_a_poll_to_get_accepted_is_reg0"),
     (else_try),
       (eq, ":input", 20),
       (try_begin),
         (is_between, ":val1", 50, 61),
         (assign, "$g_multiplayer_valid_vote_ratio", ":val1"),
         (assign, reg0, ":val1"),
         (str_store_string, s0, "str_percentage_of_yes_votes_required_for_a_poll_to_get_accepted_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 21),
       (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
       (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
     (else_try),
       (eq, ":input", 22),
       (try_begin),
         (is_between, ":val1", 2, 7),
         (assign, "$g_multiplayer_auto_team_balance_limit", ":val1"),
         (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
         (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":val1"),
         (try_end),
       (else_try),
         (ge, ":val1", 7),
         (assign, "$g_multiplayer_auto_team_balance_limit", 1000),
         (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
         (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 24),
       (try_begin),
         (is_between, ":val1", 0, multiplayer_game_max_points),
         (assign, reg0, ":val1"),
         (str_store_string, s0, "str_starting_gold_ratio_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 29),
       (try_begin),
         (eq, "$g_multiplayer_allow_player_banners", 1),
         (str_store_string, s0, "str_player_banners_are_allowed"),
       (else_try),
         (str_store_string, s0, "str_player_banners_are_not_allowed"),
       (try_end),
     (else_try),
       (eq, ":input", 30),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_allow_player_banners", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_player_banners_are_allowed"),
         (else_try),
           (str_store_string, s0, "str_player_banners_are_not_allowed"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 33),
       (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
       (str_store_string, s0, "str_point_gained_from_flags_is_reg0"),
     (else_try),
       (eq, ":input", 34),
       (try_begin),
         (is_between, ":val1", 25, 401),
         (assign, "$g_multiplayer_point_gained_from_flags", ":val1"),
         (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
         (str_store_string, s0, "str_point_gained_from_flags_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 35),
       (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
       (str_store_string, s0, "str_point_gained_from_capturing_flag_is_reg0"),
     (else_try),
       (eq, ":input", 36),
       (try_begin),
         (is_between, ":val1", 0, 11),
         (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":val1"),
         (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
         (str_store_string, s0, "str_point_gained_from_capturing_flag_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 37),
       (assign, reg0, "$g_multiplayer_game_max_minutes"),
       (str_store_string, s0, "str_map_time_limit_is_reg0"),
     (else_try),
       (eq, ":input", 38),
       (try_begin),
         (is_between, ":val1", multiplayer_game_max_minutes_min, multiplayer_game_max_minutes_max),
         (assign, "$g_multiplayer_game_max_minutes", ":val1"),
         (assign, reg0, "$g_multiplayer_game_max_minutes"),
         (str_store_string, s0, "str_map_time_limit_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 39),
       (assign, reg0, "$g_multiplayer_game_max_points"),
       (str_store_string, s0, "str_team_points_limit_is_reg0"),
     (else_try),
       (eq, ":input", 40),
       (try_begin),
         (is_between, ":val1", 1, multiplayer_game_max_points),
         (assign, "$g_multiplayer_game_max_points", ":val1"),
         (assign, reg0, "$g_multiplayer_game_max_points"),
         (str_store_string, s0, "str_team_points_limit_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 41),
       (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
       (try_begin),
         (eq, reg0, 0),
         (str_store_string, s1, "str_unlimited"),
       (else_try),
         (str_store_string, s1, "str_reg0"),
       (try_end),
       (str_store_string, s0, "str_defender_spawn_count_limit_is_s1"),
     (else_try),
       (eq, ":input", 42),
       (try_begin),
         (is_between, ":val1", 0, 11),
         (assign, "$g_multiplayer_number_of_respawn_count", ":val1"),
         (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
         (try_begin),
           (eq, reg0, 0),
           (str_store_string, s1, "str_unlimited"),
         (else_try),
           (str_store_string, s1, "str_reg0"),
         (try_end),
         (str_store_string, s0, "str_defender_spawn_count_limit_is_s1"),
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_count, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 43),
       (try_begin),
         (eq, "$g_groupfight_mode", 1),
         (str_store_string, s0, "str_ranged_weapons_are_disallowed"),
       (else_try),
         (str_store_string, s0, "str_ranged_weapons_are_allowed"),
       (try_end),
     (else_try),
       (eq, ":input", 44),#gf mode #patch1115 60/2
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_groupfight_mode", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_ranged_weapons_are_disallowed"),
         (else_try),
           (str_store_string, s0, "str_ranged_weapons_are_allowed"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (is_between, ":input", 50, 101),
       
       (try_begin),
         # store name temp.
         (str_store_string, s0, "str_console_command"),
         (assign, reg1, ":val1"),
         (assign, ":value_changed", 0),
         (assign, ":valid_command", 0),
         (assign, ":mod_variable", -1),
         
          (try_begin),
            (eq, ":input", 50),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_use_class_limits", ":val1"),
            (assign, "$g_use_class_limits", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_use_class_limits),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (str_store_string, s4, "str_admin_set_use_class_limits_s0_s9"),
          (else_try),
            (eq, ":input", 51),
            (is_between, ":val1", 0, 201),
            (assign, ":valid_command", 1),
            (neq, "$g_use_class_limits_player_count", ":val1"),
            (assign, "$g_use_class_limits_player_count", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_class_limit_player_count),
            (str_store_string, s4, "str_admin_set_class_limit_player_count_s0_reg1"),
          (else_try),
            (eq, ":input", 52),
            (is_between, ":val1", 0, 201),
            (assign, ":valid_command", 1),
            (neq, "$g_squad_size_limit", ":val1"),
            (assign, "$g_squad_size_limit", ":val1"),
            (assign, "$g_prev_squad_size_limit", "$g_squad_size_limit"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_squad_size),
            (str_store_string, s4, "str_admin_set_squad_size_s0_reg1"),
          (else_try),
            (eq, ":input", 53),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_scale_squad_size", ":val1"),
            (assign, "$g_scale_squad_size", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_scale_squad),
            (str_store_string, s4, "str_admin_set_scale_squad_size_s0_s9"),
          (else_try),
            (eq, ":input", 54),
            (is_between, ":val1", 0, 10000),
            (assign, ":valid_command", 1),
            (neq, "$g_team_1_max_build_points", ":val1"),
            (store_sub,":difirence",":val1","$g_team_1_max_build_points"),
            (val_add,"$g_team_1_build_points",":difirence"),
            (val_max,"$g_team_1_build_points",0), # build points cant be non abs
            
            (call_script,"script_multiplayer_server_send_build_points"),
            
            (assign, "$g_team_1_max_build_points", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_build_points_1),
            (str_store_string, s4, "str_admin_set_build_points_team_1_s0_reg1"),  
          (else_try),
            (eq, ":input", 55),
            (is_between, ":val1", 0, 10000),
            (assign, ":valid_command", 1),
            (neq, "$g_team_2_max_build_points", ":val1"),
            (store_sub,":difirence",":val1","$g_team_2_max_build_points"),
            (val_add,"$g_team_2_build_points",":difirence"),
            (val_max,"$g_team_2_build_points",0), # build points cant be non abs
            
            (call_script,"script_multiplayer_server_send_build_points"),
            
            (assign, "$g_team_2_max_build_points", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_build_points_2),
            (str_store_string, s4, "str_admin_set_build_points_team_2_s0_reg1"),  
          (else_try),
            (eq, ":input", 56),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_allow_multiple_firearms", ":val1"),
            (assign, "$g_allow_multiple_firearms", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_allow_multiple_firearms),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (str_store_string, s4, "str_admin_set_allow_multiple_firearms_s0_s9"),
          (else_try),   
            (eq, ":input", 57),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_bonuses_enabled", ":val1"),
            (assign, "$g_bonuses_enabled", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_enable_bonuses),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (str_store_string, s4, "str_admin_set_enable_bonuses_s0_s9"),
          (else_try),
            (eq, ":input", 58),
            (is_between, ":val1", 1, 501),
            (assign, ":valid_command", 1),
            (neq, "$g_bonus_strength", ":val1"),
            (assign, "$g_bonus_strength", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_bonus_strength),
            (str_store_string, s4, "str_admin_set_bonus_strength_s0_reg1"),
          (else_try),
            (eq, ":input", 59),
            (is_between, ":val1", 1, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_bonus_range", ":val1"),
            (assign, "$g_bonus_range", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_bonus_range),
            (str_store_string, s4, "str_admin_set_bonus_range_s0_reg1"),
          (else_try),
            (eq, ":input", 60),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_chance_of_falling_off_horse", ":val1"),
            (assign, "$g_chance_of_falling_off_horse", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_fall_off_horse),
            (str_store_string, s4, "str_admin_set_fall_off_horse_s0_reg1"),
          (else_try),
            (eq, ":input", 61),
            (is_between, ":val1", 0, 1001),
            (assign, ":valid_command", 1),
            (neq, "$g_damage_from_horse_dying", ":val1"),
            (assign, "$g_damage_from_horse_dying", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_horse_dying),
            (str_store_string, s4, "str_admin_set_horse_dying_s0_reg1"),
          (else_try),
            (eq, ":input", 62),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_auto_kick", ":val1"),
            (assign, "$g_auto_kick", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_auto_kick),
            (str_store_string, s4, "str_admin_set_mod_variable_auto_kick_s0_s9"),
          (else_try),
            (eq, ":input", 63),
            (is_between, ":val1", 0, 25),
            (assign, ":valid_command", 1),
            (neq, "$g_max_teamkills_before_kick", ":val1"),
            (assign, "$g_max_teamkills_before_kick", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_max_teamkills_before_kick),
            (str_store_string, s4, "str_admin_set_mod_variable_max_teamkills_before_kick_s0_reg1"),
          (else_try),
            (eq, ":input", 64),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_auto_horse", ":val1"),
            (assign, "$g_auto_horse", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_auto_horse),
            (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),
          (else_try),
            (eq, ":input", 65),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_auto_swap", ":val1"),
            (assign, "$g_auto_swap", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_auto_swap),
            (str_store_string, s4, "str_admin_set_mod_variable_auto_swap_s0_s9"),
          (else_try),
            (eq, ":input", 66),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_grenadier", ":val1"),
            (assign, "$g_limit_grenadier", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_grenadier),
            (str_store_string, s4, "str_admin_set_limit_grenadier_s0_reg1"),
          (else_try),
            (eq, ":input", 67),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_skirmisher", ":val1"),
            (assign, "$g_limit_skirmisher", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_skirmisher),
            (str_store_string, s4, "str_admin_set_limit_skirmisher_s0_reg1"),
          (else_try),
            (eq, ":input", 68),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_rifle", ":val1"),
            (assign, "$g_limit_rifle", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_rifle),
            (str_store_string, s4, "str_admin_set_limit_rifle_s0_reg1"),
          (else_try),
            (eq, ":input", 69),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_cavalry", ":val1"),
            (assign, "$g_limit_cavalry", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_cavalry),
            (str_store_string, s4, "str_admin_set_limit_cavalry_s0_reg1"),
          (else_try),
            (eq, ":input", 70),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_lancer", ":val1"),
            (assign, "$g_limit_lancer", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_lancer),
            (str_store_string, s4, "str_admin_set_limit_lancer_s0_reg1"),
          (else_try),
            (eq, ":input", 71),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_hussar", ":val1"),
            (assign, "$g_limit_hussar", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_hussar),
            (str_store_string, s4, "str_admin_set_limit_hussar_s0_reg1"),
          (else_try),
            (eq, ":input", 72),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_dragoon", ":val1"),
            (assign, "$g_limit_dragoon", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_dragoon),
            (str_store_string, s4, "str_admin_set_limit_dragoon_s0_reg1"),
          (else_try),
            (eq, ":input", 73),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_cuirassier", ":val1"),
            (assign, "$g_limit_cuirassier", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_cuirassier),
            (str_store_string, s4, "str_admin_set_limit_cuirassier_s0_reg1"),
          (else_try),
            (eq, ":input", 74),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_heavycav", ":val1"),
            (assign, "$g_limit_heavycav", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_heavycav),
            (str_store_string, s4, "str_admin_set_limit_heavycav_s0_reg1"),
          (else_try),
            (eq, ":input", 75),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_artillery", ":val1"),
            (assign, "$g_limit_artillery", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_artillery),
            (str_store_string, s4, "str_admin_set_limit_artillery_s0_reg1"),
          (else_try),
            (eq, ":input", 76),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_rocket", ":val1"),
            (assign, "$g_limit_rocket", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_rocket),
            (str_store_string, s4, "str_admin_set_limit_rocket_s0_reg1"),
          (else_try),
            (eq, ":input", 77),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_sapper", ":val1"),
            (assign, "$g_limit_sapper", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_sapper),
            (try_begin),
              (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
              (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1_1"),
            (else_try),         
              (eq, "$g_groupfight_mode", 1),  
              (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1_2"),
            (else_try),
               (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1"),
            (try_end),
          (else_try),
            (eq, ":input", 78),
            (is_between, ":val1", 0, 126),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_musician", ":val1"),
            (assign, "$g_limit_musician", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_musician),
            (str_store_string, s4, "str_admin_set_limit_musician_s0_reg1"),
          (else_try),
            (eq, ":input", 79),
            (is_between, ":val1", 0, 126),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_sergeant", ":val1"),
            (assign, "$g_limit_sergeant", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_sergeant),
            (str_store_string, s4, "str_admin_set_limit_sergeant_s0_reg1"),
          (else_try),
            (eq, ":input", 80),
            (is_between, ":val1", 0, 126),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_officer", ":val1"),
            (assign, "$g_limit_officer", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_officer),
            (str_store_string, s4, "str_admin_set_limit_officer_s0_reg1"),
          (else_try),
            (eq, ":input", 81),
            (is_between, ":val1", 0, 126),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_general", ":val1"),
            (assign, "$g_limit_general", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_general),
            (str_store_string, s4, "str_admin_set_limit_general_s0_reg1"),  
          (else_try),
            (eq, ":input", 82),
            (is_between, ":val1", 50, 501),
            (assign, ":valid_command", 1),
            (neq, "$g_max_num_bots", ":val1"),
            (assign, "$g_max_num_bots", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_max_num_bots),
            (str_store_string, s4, "str_admin_set_max_num_bots_s0_reg1"),
          (else_try),
            (eq, ":input", 85),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_no_rambo", ":val1"),
            (assign, "$g_no_rambo", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_no_rambo),
            (str_store_string, s4, "str_admin_set_no_rambo_s0_s9"),
          (else_try),
            (eq, ":input", 86),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_no_line_inf_spread", ":val1"),
            (assign, "$g_no_line_inf_spread", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (assign, ":mod_variable", mod_variable_line_inf_spread),
            (str_store_string, s4, "str_admin_set_no_line_inf_spread_s0_s9"),
          (else_try),
            (eq, ":input", 87),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_limit_surgeon", ":val1"),
            (assign, "$g_limit_surgeon", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_limit_surgeon),
            (str_store_string, s4, "str_admin_set_limit_surgeon_s0_reg1"),
          (else_try),
            (eq, ":input", 88),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_num_custom_maps", ":val1"),
            (assign, "$g_num_custom_maps", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_num_custom_maps),
            (str_store_string, s4, "str_admin_set_num_custom_maps_s0_reg1"),  
          (else_try),#vinces white list part 1
            (eq, ":input", 89),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_admin_white_list", ":val1"),
            (assign, "$g_admin_white_list", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_admin_white_list),
            (try_begin),
              (eq,":val1",1),
              (str_store_string, s4,"str_admin_white_list_is_enabled"),
            (else_try),
              (str_store_string, s4,"str_admin_white_list_is_disabled"),
            (try_end),
          (else_try),#vinces white list part 2
            (eq, ":input", 90),
            (gt,":val1",0), # even entered a key
            (assign, ":valid_command", 1), 
            (troop_get_slot,":white_list_count","trp_admin_white_list_dummy", 0),       
            (val_add,":white_list_count",1), # add one for the range...
            (troop_set_slot,"trp_admin_white_list_dummy",0,":white_list_count"), # set the new count
            (troop_set_slot,"trp_admin_white_list_dummy",":white_list_count",":val1"), # put the id on this slot index.
            (assign, ":value_changed", 1),
            (assign,reg0,":val1"),
            (str_store_string, s4, "str_admin_white_list_added_key_reg0"),
          (else_try),#custom 1
            (eq, ":input", 91),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_welcome_message", ":val1"),
            (assign, "$g_welcome_message", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"), # true or false
            (str_store_string, s4, "str_welcome_message_toggle"),
          (else_try),#custom 2
            (eq, ":input", 92),
            (is_between, ":val1", 0, 2),
            (assign, ":valid_command", 1),
            (neq, "$g_competitive_score_mode", ":val1"),
            (assign, "$g_competitive_score_mode", ":val1"),
            (assign, ":value_changed", 1),
            (call_script, "script_store_bool_s9", ":val1"),
            (assign, ":mod_variable", mod_variable_competitive_score_mode),
            (str_store_string, s4, "str_admin_set_competitive_score_mode_s0_s9"),
          (else_try),#custom 3
            (eq, ":input", 93),
            (is_between, ":val1", 1, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_no_rambo_range", ":val1"),
            (assign, "$g_no_rambo_range", ":val1"),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_no_rambo_range),
            (str_store_string, s4, "str_admin_set_no_rambo_range_s0_reg1"),
         (else_try),#custom 4
           (eq, ":input", 94),
           (is_between, ":val1", 0, 101),
           (assign, ":valid_command", 1),
           (neq, "$g_limit_arty_train", ":val1"),
           (assign, "$g_limit_arty_train", ":val1"),
           (assign, ":value_changed", 1),
           (assign, ":mod_variable", mod_variable_limit_arty_train),
           (str_store_string, s4, "str_admin_set_limit_arty_train_s0_reg1"),
         (else_try),#custom 5
            (eq, ":input", 95),
            (is_between, ":val1", 0, 101),
            (assign, ":valid_command", 1),
            (neq, "$g_auto_FF", ":val1"),
            (assign, "$g_auto_FF", 0),
            (assign, ":value_changed", 1),
            (assign, ":mod_variable", mod_variable_auto_ff),
            (try_begin),
              (gt, "$g_auto_FF", 0),
              (str_store_string, s4, "str_admin_set_auto_FF"),
            (else_try),
              (str_store_string, s4, "str_admin_set_auto_FF_2"),
            (try_end),
         # (else_try),#custom 6
         #   (eq, ":input", 96),
          #  (is_between, ":val1", 0, 2),
          #  (assign, ":valid_command", 1),
          #  (neq, "$g_welcome_message", ":val1"),
          #  (assign, "$g_welcome_message", ":val1"),
          #  (assign, ":value_changed", 1),
          #  (call_script, "script_store_bool_s9", ":val1"), # true or false
          #  (assign, ":mod_variable", mod_variable_line_inf_spread),
          #  (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),#reminder, change this
         # (else_try),#custom 7
         #   (eq, ":input", 97),
         #   (is_between, ":val1", 0, 2),
          #  (assign, ":valid_command", 1),
          #  (neq, "$g_welcome_message", ":val1"),
          #  (assign, "$g_welcome_message", ":val1"),
          #  (assign, ":value_changed", 1),
          #  (call_script, "script_store_bool_s9", ":val1"), # true or false
          #  (assign, ":mod_variable", mod_variable_line_inf_spread),
          #  (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),#reminder, change this
          #(else_try),#custom 8
          #  (eq, ":input", 98),
         #   (is_between, ":val1", 0, 2),
          #  (assign, ":valid_command", 1),
         #   (neq, "$g_welcome_message", ":val1"),
         #   (assign, "$g_welcome_message", ":val1"),
         #   (assign, ":value_changed", 1),
         #   (call_script, "script_store_bool_s9", ":val1"), # true or false
         #   (assign, ":mod_variable", mod_variable_line_inf_spread),
         #   (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),#reminder, change this
         # (else_try),#custom 9
         #   (eq, ":input", 99),
         #   (is_between, ":val1", 0, 2),
         #   (assign, ":valid_command", 1),
         #   (neq, "$g_welcome_message", ":val1"),
         #   (assign, "$g_welcome_message", ":val1"),
         #   (assign, ":value_changed", 1),
         #   (call_script, "script_store_bool_s9", ":val1"), # true or false
          #  (assign, ":mod_variable", mod_variable_line_inf_spread),
          #  (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),#reminder, change this
          #(else_try),#custom 10
          #  (eq, ":input", 100),
          #  (is_between, ":val1", 0, 2),
          #  (assign, ":valid_command", 1),
          #  (neq, "$g_welcome_message", ":val1"),
          #  (assign, "$g_welcome_message", ":val1"),
           # (assign, ":value_changed", 1),
           # (call_script, "script_store_bool_s9", ":val1"), # true or false
           # (assign, ":mod_variable", mod_variable_line_inf_spread),
           # (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),#reminder, change this
          (try_end),
          
          (try_begin),
            (eq, ":value_changed", 1), # It izzz changed!
            
            (try_begin),
              (gt, ":mod_variable", -1),
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_mod_variable, ":mod_variable", ":val1"),
              (try_end),
            (try_end),
            
            (call_script, "script_multiplayer_broadcast_message"),
            
            (str_store_string_reg,s0,s4),
          (else_try),
            (eq, ":valid_command", 0),
            (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
          (else_try),
            (str_store_string_reg,s0,s4),
          (try_end),
        (try_end),
     (else_try),
       (str_store_string, s0, "@Unknown command issued!"),
     (try_end),
  ]),
  

  # script_game_event_party_encounter:
  # This script is called from the game engine whenever player party encounters another party or a battle on the world map
  # INPUT:
  # param1: encountered_party
  # param2: second encountered_party (if this was a battle
  ("game_event_party_encounter",
   []),

  #script_game_event_simulate_battle:
  # This script is called whenever the game simulates the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_simulate_battle",
    []),

  #script_game_event_battle_end:
  # This script is called whenever the game ends the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_battle_end",
    []),   
  

  #script_game_get_item_buy_price_factor:
  # This script is called from the game engine for calculating the buying price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_buy_price_factor",
    []),
  
  #script_game_get_item_sell_price_factor:
  # This script is called from the game engine for calculating the selling price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_sell_price_factor",
    []),

  
  
  #script_game_event_buy_item:
  # This script is called from the game engine when player buys an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_buy_item",
    []),
  
  #script_game_event_sell_item:
  # This script is called from the game engine when player sells an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_sell_item",
    []),
	
  
  # script_game_get_troop_wage
  # This script is called from the game engine for calculating troop wages.
  # Input:
  # param1: troop_id, param2: party-id
  # Output: reg0: weekly wage
  
  ("game_get_troop_wage",
    []),

  # script_game_get_total_wage
  # This script is called from the game engine for calculating total wage of the player party which is shown at the party window.
  # Input: none
  # Output: reg0: weekly wage
  
  ("game_get_total_wage",
    []),
  
  # script_game_get_join_cost
  # This script is called from the game engine for calculating troop join cost.
  # Input:
  # param1: troop_id,
  # Output: reg0: weekly wage
  
  ("game_get_join_cost",
    []),
  
  # script_game_get_upgrade_xp
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed exp for upgrade 
  ("game_get_upgrade_xp",
    []),
  
  # script_game_get_upgrade_cost
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed cost for upgrade
  ("game_get_upgrade_cost",
    []),

  # script_game_get_prisoner_price
  # This script is called from the game engine for calculating prisoner price
  # Input:
  # param1: troop_id,
  # Output: reg0  
  ("game_get_prisoner_price",
    []),


  # script_game_check_prisoner_can_be_sold
  # This script is called from the game engine for checking if a given troop can be sold.
  # Input: 
  # param1: troop_id,
  # Output: reg0: 1= can be sold; 0= cannot be sold.
  
  ("game_check_prisoner_can_be_sold",
    []),
  
  # script_game_get_morale_of_troops_from_faction
  # This script is called from the game engine 
  # Input: 
  # param1: faction_no,
  # Output: reg0: extra morale x 100
  
  ("game_get_morale_of_troops_from_faction",
    []),
  
  #script_game_event_detect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_detect_party",
    []),

  #script_game_event_undetect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_undetect_party",
    []),

  #script_game_get_statistics_line:
  # This script is called from the game engine when statistics page is opened.
  # INPUT:
  # param1: line_no
  ("game_get_statistics_line",
    []),

  #script_game_get_date_text:
  # This script is called from the game engine when the date needs to be displayed.
  # INPUT: arg1 = number of days passed since the beginning of the game
  # OUTPUT: result string = date
  ("game_get_date_text",
    [
      (str_clear,s1),
      (set_result_string, s1),
    ]),  
  
  #script_game_get_money_text:
  # This script is called from the game engine when an amount of money needs to be displayed.
  # INPUT: arg1 = amount in units
  # OUTPUT: result string = money in text
  ("game_get_money_text",
    []),

  #script_game_get_party_companion_limit:
  # This script is called from the game engine when the companion limit is needed for a party.
  # INPUT: arg1 = none
  # OUTPUT: reg0 = companion_limit
  ("game_get_party_companion_limit",
    []),


  #script_game_reset_player_party_name:
  # This script is called from the game engine when the player name is changed.
  # INPUT: none
  # OUTPUT: none
  ("game_reset_player_party_name",
    []),

  #script_game_get_troop_note
  # This script is called from the game engine when the notes of a troop is needed.
  # INPUT: arg1 = troop_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_troop_note",
    []),
  
  #script_game_get_center_note
  # This script is called from the game engine when the notes of a center is needed.
  # INPUT: arg1 = center_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_center_note",
    []),

  #script_game_get_faction_note
  # This script is called from the game engine when the notes of a faction is needed.
  # INPUT: arg1 = faction_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_faction_note",
    []),

  #script_game_get_quest_note
  # This script is called from the game engine when the notes of a quest is needed.
  # INPUT: arg1 = quest_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_quest_note",
    []),

  #script_game_get_info_page_note
  # This script is called from the game engine when the notes of a info_page is needed.
  # INPUT: arg1 = info_page_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_info_page_note",
    []),

  #script_game_get_scene_name
  # This script is called from the game engine when a name for the scene is needed.
  # INPUT: arg1 = scene_no
  # OUTPUT: s0 = name
  ("game_get_scene_name",
    [
      (store_script_param, ":scene_no", 1),
      (try_begin),
        (is_between, ":scene_no", multiplayer_scenes_begin, multiplayer_scenes_end),
        (store_sub, ":string_id", ":scene_no", multiplayer_scenes_begin),
        (val_add, ":string_id", multiplayer_scene_names_begin),
        (str_store_string, s0, ":string_id"),
      (try_end),
     ]),
  
  #script_game_get_mission_template_name
  # This script is called from the game engine when a name for the mission template is needed.
  # INPUT: arg1 = mission_template_no
  # OUTPUT: s0 = name
  ("game_get_mission_template_name",
    [
      (store_script_param, ":mission_template_no", 1),
      (call_script, "script_multiplayer_get_mission_template_game_type", ":mission_template_no"),
      (assign, ":game_type", reg0),
      (try_begin),
        (is_between, ":game_type", 0, multiplayer_num_game_types),
        (store_add, ":string_id", ":game_type", multiplayer_game_type_names_begin),
        (str_store_string, s0, ":string_id"),
      (try_end),
     ]),

  #script_warn_player_about_auto_team_balance
  # INPUT: none
  # OUTPUT: none
  ("warn_player_about_auto_team_balance",
   [
     (try_begin),
       (neg|multiplayer_is_dedicated_server),
       (assign, "$g_multiplayer_message_type", multiplayer_message_type_auto_team_balance_next),
       (start_presentation, "prsnt_multiplayer_message_2"),
     (try_end),
   ]),

  #script_check_team_balance
  # INPUT: none
  # OUTPUT: none
  ("check_team_balance",
   [
     (try_begin),
       (multiplayer_is_server),
  
       (assign, ":number_of_players_at_team_1", 0),
       (assign, ":number_of_players_at_team_2", 0),
       (try_for_players, ":cur_player", "$g_ignore_server"),
         (player_is_active, ":cur_player"),
         (player_get_team_no, ":player_team", ":cur_player"),
         (try_begin),
           (eq, ":player_team", 0),
           (val_add, ":number_of_players_at_team_1", 1),
         (else_try),
           (eq, ":player_team", 1),
           (val_add, ":number_of_players_at_team_2", 1),
         (try_end),         
       (try_end),
 
       (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
       (assign, ":number_of_players_will_be_moved", 0),
       (try_begin),
         (try_begin),
           (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
           (le, ":difference_of_number_of_players", ":checked_value"),
           (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (assign, ":team_with_more_players", 1),
           (assign, ":team_with_less_players", 0),
         (else_try),
           (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
           (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (assign, ":team_with_more_players", 0),
           (assign, ":team_with_less_players", 1),
         (try_end),          
       (try_end),         
       #team balance checks are done
       (try_begin),
         (gt, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (eq, "$g_team_balance_next_round", 1), #if warning is given
           
           #auto team balance starts
           (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
             (assign, ":max_player_join_time", 0),
             (assign, ":latest_joined_player_no", -1),                            
             (try_for_players, ":player_no", "$g_ignore_server"),
               (player_is_active, ":player_no"),
               (player_get_team_no, ":player_team", ":player_no"),
               (eq, ":player_team", ":team_with_more_players"),
               (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
               (try_begin),
                 (gt, ":player_join_time", ":max_player_join_time"),
                 (assign, ":max_player_join_time", ":player_join_time"),
                 (assign, ":latest_joined_player_no", ":player_no"),
               (try_end),
             (try_end),
             (try_begin),
               (ge, ":latest_joined_player_no", 0),
               (try_begin),
                 #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                 (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                 (ge, ":latest_joined_agent_id", 0),
                 (agent_is_alive, ":latest_joined_agent_id"),

                 (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                 (val_add, ":player_kill_count", 1),
                 (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                 (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                 (val_sub, ":player_death_count", 1),
                 (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                 (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                 (val_add, ":player_score", 1),
                 (player_set_score, ":latest_joined_player_no", ":player_score"),

                 (call_script,"script_multiplayer_server_send_player_score_kill_death", ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
               (try_end),

               (player_set_troop_id, ":latest_joined_player_no", -1),
               (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
               (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
             (try_end),
           (try_end),
     
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), #0 is useless here
           #for only server itself-----------------------------------------------------------------------------------------------     
           (try_for_players, ":player_no", 1),
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done), 
           (try_end),
           (assign, "$g_team_balance_next_round", 0),
           #auto team balance done
         (else_try),
           #tutorial message (next round there will be auto team balance)
           (assign, "$g_team_balance_next_round", 1),
     
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
           #for only server itself-----------------------------------------------------------------------------------------------                               
           (try_for_players, ":player_no", 1),
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next), 
           (try_end),
         (try_end),
       (else_try),
         (assign, "$g_team_balance_next_round", 0),
       (try_end),
     (try_end),
   ]),

  #script_check_creating_ladder_dust_effect
  # INPUT: arg1 = instance_id, arg2 = remaining_time
  # OUTPUT: none
  ("check_creating_ladder_dust_effect",
   [
      (store_trigger_param_1, ":instance_id"),
      (store_trigger_param_2, ":remaining_time"),

      (try_begin),
        (lt, ":remaining_time", 15), #less then 0.15 seconds
        (gt, ":remaining_time", 3), #more than 0.03 seconds
      
        (scene_prop_get_slot, ":smoke_effect_done", ":instance_id", scene_prop_smoke_effect_done),
        (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

        (try_begin),
          (eq, ":smoke_effect_done", 0),
          (eq, ":opened_or_closed", 0),
      
          (prop_instance_get_position, pos5, ":instance_id"),

          (assign, ":smallest_dist", -1),
          (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
            (entry_point_get_position, pos1, ":entry_point_no"),
            (get_sq_distance_between_positions, ":dist", pos5, pos1),
            (this_or_next|eq, ":smallest_dist", -1),
            (lt, ":dist", ":smallest_dist"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":entry_point_no"),
          (try_end),

          (try_begin),
            (set_fixed_point_multiplier, 100),

            (ge, ":smallest_dist", 0),
            (lt, ":smallest_dist", 22500), #max 15m distance
      
            (entry_point_get_position, pos1, ":nearest_entry_point"),
            (position_rotate_x, pos1, -90),

            (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":instance_id"),
            (try_begin),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_6m"),              
              (init_position, pos2),
              (position_set_z, pos2, 300),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_6m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_6m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_8m"),
              (init_position, pos2),
              (position_set_z, pos2, 400),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_8m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_8m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_10m"),
              (init_position, pos2),
              (position_set_z, pos2, 500),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_10m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_10m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_12m"),
              (init_position, pos2),
              (position_set_z, pos2, 600),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_12m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_12m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_14m"),
              (init_position, pos2),
              (position_set_z, pos2, 700),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_14m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_14m", pos3, 100),
            (try_end),

            (scene_prop_set_slot, ":instance_id", scene_prop_smoke_effect_done, 1),
          (try_end),
        (try_end),
      (try_end),
      ]),

	
	 
  #script_initialize_all_scene_prop_slots
  # INPUT: arg1 = scene_prop_no
  # OUTPUT: none
  ("initialize_all_scene_prop_slots",
   [
     # MM First do the bloody weather
     (call_script, "script_multiplayer_generate_weather"),
   
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_6m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_8m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_10m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_12m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_14m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_e_sally_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_f_sally_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_earth_sally_gate_left"),
     (call_script, "script_initialize_scene_prop_slots", "spr_earth_sally_gate_right"),
     (call_script, "script_initialize_scene_prop_slots", "spr_viking_keep_destroy_sally_door_left"),
     (call_script, "script_initialize_scene_prop_slots", "spr_viking_keep_destroy_sally_door_right"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_f_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_winch_b"),
     # MM
     # (try_for_range,":cannon_type", mm_cannon_types_begin, mm_cannon_types_end),
       # (call_script, "script_initialize_scene_prop_slots", ":cannon_type"),
     # (try_end),
     # (call_script, "script_initialize_scene_prop_slots", "spr_mm_cannonball"),
     # (call_script, "script_initialize_scene_prop_slots", "spr_mm_cannonball_code_only"),
     ##Destroy props
     # (try_for_range,":prop_type", mm_destructible_props_begin, mm_destructible_props_end),
       # (call_script, "script_initialize_scene_prop_slots", ":prop_type"),
     # (try_end),

     #(replace_scene_props, "spr_mm_stakes_destructible", "spr_empty"),
     #(replace_scene_props, "spr_mm_stakes_destroyed", "spr_empty"),
     #(call_script, "script_initialize_scene_prop_slots", "spr_ship_b"),
     
     # MM Cleanup
     # (try_begin),
       # (multiplayer_is_server),
       # (replace_scene_props, "spr_mm_steer", "spr_empty"),
     # (try_end),
     
     # (call_script, "script_multiplayer_server_spawn_ships"),
    ]),

  #script_initialize_scene_prop_slots
  # INPUT: arg1 = scene_prop_no
  # OUTPUT: none
  ("initialize_scene_prop_slots",
   [
     (store_script_param, ":scene_prop_no", 1),

     (try_for_prop_instances, ":cur_instance_id", ":scene_prop_no"),
       (assign,":cur_instance_id",":cur_instance_id"),
       ## MM
       # (try_begin),
         # (multiplayer_is_server),
         # (try_begin),
           # (is_between, ":scene_prop_no", mm_destructible_props_begin, mm_destructible_props_end),
           
           # (scene_prop_get_slot, ":replaced_by_prop", ":cur_instance_id", scene_prop_slot_replaced_by),
           # (gt, ":replaced_by_prop", 0),
           
           # (prop_instance_get_position, pos22, ":cur_instance_id"),
           # (prop_instance_animate_to_position, ":replaced_by_prop", pos22, 0), # move broken shit down
           
           # (try_begin),
             # (neq,":scene_prop_no","spr_mm_stakes_destructible"),
             # (position_move_z, pos22, 2000),
             # (prop_instance_animate_to_position, ":cur_instance_id", pos22, 0), # and move origional wall up
           # (try_end),
         # (else_try),
           # (eq,":scene_prop_no","spr_mm_stakes_destructible"),
           # (scene_prop_slot_eq, ":cur_instance_id", scene_prop_slot_in_use, 1),

           # (prop_instance_get_position, pos22, ":cur_instance_id"),
           # (position_move_z, pos22, -2000),
           # (prop_instance_animate_to_position, ":cur_instance_id", pos22, 0), # move broken shit down
         # (try_end),
       # (try_end),
       
       # Reset slots
       (try_for_range, ":cur_slot", 0, scene_prop_slots_end),
         (scene_prop_set_slot, ":cur_instance_id", ":cur_slot", 0),
       (try_end),
     (try_end),
     ]),
  
  #script_use_item
  # INPUT: arg1 = agent_id, arg2 = instance_id
  # OUTPUT: none
  ("use_item",
   [
     (store_script_param, ":instance_id", 1),
     (store_script_param, ":user_id", 2),

     # MM Lets do this proper this time.
     (try_begin),
       (prop_instance_is_valid,":instance_id"), #patch1115 fix 18/21
       (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
       (this_or_next|is_between, ":scene_prop_id", mm_button_types_begin, mm_button_types_end),
       (this_or_next|eq,":scene_prop_id","spr_mm_ship_rudder_control"),
       (this_or_next|eq, ":scene_prop_id", "spr_mm_ship_longboat_rudder_control"),
       (eq, ":scene_prop_id", "spr_mm_ship_schooner_rudder_control"),

       (try_begin),
         (this_or_next|multiplayer_is_server),
         (neg|game_in_multiplayer_mode),
         (set_fixed_point_multiplier, 100),
         
        # (assign, ":using_agent", 0),
        # (try_begin),
           (agent_is_active, ":user_id"),
           (agent_is_alive, ":user_id"),
           (assign, ":using_agent", ":user_id"),
       #  (try_end),
         
         (assign, ":ok_parent", 1),
         (assign, ":cannon_instance", -1),
         
         #(assign, ":cannon_kind", -1),
         (try_begin),
           (is_between, ":scene_prop_id", mm_cannon_button_types_begin, mm_cannon_button_types_end),
           (assign, ":ok_parent", 0),
           
           (call_script,"script_cannon_child_find_cannon_instance",":instance_id"),
           (assign,":cannon_instance",reg0),
           
          # (gt,":cannon_instance",-1),
           (prop_instance_is_valid,":cannon_instance"), #patch1115 18/6
           #(prop_instance_get_scene_prop_kind, ":cannon_kind", ":cannon_instance"),
           (prop_instance_get_position, pos7, ":cannon_instance"), # pos7 = cannon location
           (copy_position, pos1, pos7),
           (copy_position, pos3, pos7),
           (assign, ":ok_parent", 1),
         (try_end),
         (eq, ":ok_parent", 1),
         
         (call_script,"script_cannon_instance_get_barrel",":cannon_instance"),
         (assign,":barrel_instance",reg0),
         
         (try_begin),        
           (prop_instance_is_valid,":barrel_instance"), #patch1115 18/7
           (prop_instance_get_position, pos7, ":barrel_instance"),
           (copy_position, pos1, pos7),
         (else_try),
           (assign,":barrel_instance",":cannon_instance"),
         (try_end),

         (try_begin),
           (is_between, ":scene_prop_id", "spr_mm_12pdr_push_button", "spr_mm_round_button"), # push object found.
           
           (call_script,"script_set_prop_child_inactive",":instance_id"),
           
           (call_script,"script_recoil_cannon",":cannon_instance",2,0),
         (else_try),
           (is_between, ":scene_prop_id", mm_unlimber_button_types_begin, mm_unlimber_button_types_end),  # Unlimber
           
           (try_begin),
             (agent_get_troop_id,":troop_no",":using_agent"),
             (troop_slot_eq,":troop_no",slot_troop_class,multi_troop_class_mm_artillery),

             (call_script,"script_unlimber_cannon_from_horse",":instance_id"), # cannon unlimber button instance ID is passed here.   
           (try_end),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_limber_button"),
           
           (prop_instance_get_position, pos4, ":instance_id"), # button pos
           
           (assign,":keep_looping",1),
           (try_for_prop_instances, ":cur_instance_id", "spr_mm_limber_wood", somt_temporary_object),
             (eq,":keep_looping",1),
             
             (scene_prop_get_slot,":attached_cannon",":cur_instance_id", scene_prop_slot_child_prop2),
             (lt,":attached_cannon",0), # no other cannon attached?
             
             (prop_instance_get_position, pos5, ":cur_instance_id"),
             (position_move_y,pos5,-220),
             (get_distance_between_positions, ":distance_cannon_agent", pos4, pos5),
             (le, ":distance_cannon_agent", 200),

             (call_script,"script_limber_cannon_to_horse",":cur_instance_id",":cannon_instance"),
             (eq,reg0,1),
             
             (try_begin),
               (scene_prop_get_slot,":orig_cannon",":cannon_instance",scene_prop_slot_replacing),
               (prop_instance_is_valid,":orig_cannon"),
               (scene_prop_set_slot,":orig_cannon",scene_prop_slot_replaced_by,-1),
             (try_end),
             
             
             (call_script, "script_clean_up_prop_instance_with_childs", ":cannon_instance"),
             
             # We cleaned that crap, then set their parent as having no replacement.
             # (try_for_range,":cannon_type_2", mm_cannon_types_begin, mm_cannon_types_end),
               # (try_for_prop_instances, ":cur_instance_id_2", ":cannon_type_2"),
                 # (scene_prop_slot_eq, ":cur_instance_id_2", scene_prop_slot_replaced_by, ":cannon_instance"), 
                 # (scene_prop_set_slot,":cur_instance_id_2",scene_prop_slot_replaced_by,-1),
               # (try_end),
             # (try_end),
             
             (assign,":keep_looping",0),
           (try_end),    
           
           # (assign,":horse_limbered",0),
           # (try_for_agents,":cur_agent"),
             # (eq,":horse_limbered",0),
             # (agent_is_active, ":cur_agent"),
             # (agent_is_alive, ":cur_agent"),
             
             # (agent_get_item_id, ":horse_item_id", ":cur_agent"),
             # (eq, ":horse_item_id", "itm_heavy_horse_arty"), # Hoorah we have a Arty horse.
             
             # (agent_get_position, pos5, ":cur_agent"),

             # (get_distance_between_positions, ":distance_cannon_agent", pos7, pos5),
             # (le, ":distance_cannon_agent", 500),
             # (call_script,"script_limber_cannon_to_horse",":cur_agent",":cannon_kind"),
             
             # (eq,reg0,1),
             
             # (assign,":horse_limbered", 1),
           # (try_end),
           
           #(eq, ":horse_limbered", 1),
           
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_aim_button"),
           (scene_prop_get_slot,":old_control_agent",":cannon_instance",scene_prop_slot_controller_agent),
           
           (try_begin),
             (agent_is_active,":old_control_agent"),
             (agent_is_alive,":old_control_agent"),
             (neq, ":old_control_agent", ":using_agent"), # not the same agent..

             (try_begin),
               (game_in_multiplayer_mode),
               (agent_get_player_id, ":player_id", ":using_agent"),
               (player_is_active,":player_id"), # we have a player.
               (multiplayer_send_2_int_to_player, ":player_id", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, "str_cannon_is_already_in_use"),
             (else_try),
               (str_store_string,s4,"str_cannon_is_already_in_use"),
               (display_message,s4),
             (try_end),
             
             # error in use.
           (else_try), 
             # DEBUGDEBUGDEBUG
             # (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_cannon_aim_platform", 0, 0, 0),
             # (assign,"$g_test_prop",reg0),
             
             (try_begin),
               (eq, ":old_control_agent", ":using_agent"),
               
               #(call_script,"script_stop_agent_controlling_cannon",":cannon_instance",":old_control_agent"),
             (else_try),
               (call_script,"script_set_agent_controlling_prop",":cannon_instance",":using_agent",1),
               
               (call_script, "script_prop_instance_find_first_child_of_type", ":cannon_instance", "spr_mm_cannon_aim_platform"),
               (assign,":platform_instance",reg0),
               (prop_instance_is_valid,":platform_instance"),
               
               (scene_prop_get_slot,":x_value",":platform_instance",scene_prop_slot_x_value),
               (scene_prop_get_slot,":y_value",":platform_instance",scene_prop_slot_y_value),
               (copy_position,pos49,pos3),
               (position_move_x,pos49,":x_value"),
               (position_move_y,pos49,":y_value"),
               
               (agent_set_position,":using_agent",pos49),
               (agent_set_animation,":using_agent","anim_kneeling"),
               
               (call_script,"script_set_prop_child_active",":platform_instance"),
              # (prop_instance_get_position,pos49,":platform_instance"),
               
               
             #  (agent_set_position,":using_agent",pos49),
             (try_end),
           (try_end),
         (else_try),
           (is_between,":scene_prop_id","spr_mm_load_cartridge_button","spr_mm_reload_button"), 
           
           (call_script,"script_agent_take_cannonball",":using_agent"),
           (assign,":ammo_type",reg0),
           (is_between,":ammo_type",cannon_ammo_types_begin,cannon_ammo_types_end),
           
           (try_begin),
             (agent_has_item_equipped,":using_agent","itm_ramrod"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_ramrod"),
           (else_try),
             (agent_has_item_equipped,":using_agent","itm_cannon_cartridge_round"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_round"),
           (else_try),
             (agent_has_item_equipped,":using_agent","itm_cannon_cartridge_shell"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_shell"),
           (else_try),
             (agent_has_item_equipped,":using_agent","itm_cannon_cartridge_canister"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_canister"),
           (else_try),
             (agent_has_item_equipped,":using_agent","itm_cannon_cartridge_bomb"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_bomb"),
           (else_try),
             (agent_has_item_equipped,":using_agent","itm_rockets"), # Ranker
             (agent_set_wielded_item,":using_agent","itm_rockets"),
           (else_try),
             (assign,":end_cond","itm_items_end"),
             (try_for_range,":cur_item","itm_french_cav_pistol",":end_cond"),
               (agent_has_item_equipped,":using_agent",":cur_item"), # sarge
               (agent_set_wielded_item,":using_agent",":cur_item"),               
               (assign,":end_cond",0),
             (try_end),

           (try_end),
           
           (scene_prop_set_slot,":cannon_instance", scene_prop_slot_has_ball, 1),
           (scene_prop_set_slot,":cannon_instance", scene_prop_slot_ammo_type, ":ammo_type"),
           
           (call_script,"script_set_prop_child_inactive",":instance_id"), # Clean it up temporary.
           
           # display the loaded_ammo if applicable.
           (try_for_range,":cur_ammotype","spr_mm_cannon_mortar_loaded_ammo","spr_mm_cannonball_code_only_6pd"),
             (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_ammotype"),
             (call_script,"script_set_prop_child_active",reg0),
           (try_end),
           
           (try_begin),
             (eq,":ammo_type",cannon_ammo_type_rocket), # We have a rocket system so we dont have a reload button...
             (scene_prop_set_slot,":cannon_instance", scene_prop_slot_is_loaded, 1),
             (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_aim_button"),
             (call_script,"script_set_prop_child_active",reg0),
           (else_try), 
             (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_reload_button"),
             (call_script,"script_set_prop_child_active",reg0),
             (scene_prop_enable_after_time, reg0, 100),
           (try_end),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_reload_button"),
           (scene_prop_set_slot,":cannon_instance", scene_prop_slot_is_loaded, 1),
          
           (call_script,"script_set_prop_child_inactive",":instance_id"), # Clean it up temporary.
           
           (assign,":push_found",0),
           (try_begin),
             (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_is_not_pushed_back, 1), # Not pushed back then skip the push button.
             (scene_prop_set_slot,":cannon_instance",scene_prop_slot_is_not_pushed_back,0),
           (else_try),
             (try_for_range,":cur_pushtype","spr_mm_12pdr_push_button","spr_mm_round_button"),
               (call_script, "script_prop_instance_find_first_child_of_type", ":cannon_instance", ":cur_pushtype"),
               (gt,reg0,-1),
               (assign,":push_found",1),
               (call_script,"script_set_prop_child_active",reg0), # enable push button
             (try_end),
           (try_end),
           
           (try_begin),
             (eq,":push_found",0),
             (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_aim_button"),
             (call_script,"script_set_prop_child_active",reg0),
           (try_end),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_round_button"),
           
           (agent_equip_item,":using_agent","itm_cannon_cartridge_round"),
           (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_round"),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_shell_button"),
           
           (agent_equip_item,":using_agent","itm_cannon_cartridge_shell"),
           (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_shell"),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_canister_button"),

           (agent_equip_item,":using_agent","itm_cannon_cartridge_canister"),
           (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_canister"),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_bomb_button"),

           (agent_equip_item,":using_agent","itm_cannon_cartridge_bomb"),
           (agent_set_wielded_item,":using_agent","itm_cannon_cartridge_bomb"),
           # (prop_instance_get_position, pos5, ":instance_id"),
           # (position_move_z,pos5,53),
           # (position_rotate_z,pos5,90),
           # (set_spawn_position,pos5),
           # (spawn_item, "itm_cannon_cartridge_round",60), # remove after 1 minute
         (else_try),
           (this_or_next|eq, ":scene_prop_id", "spr_mm_ship_rudder_control"),
           (this_or_next|eq, ":scene_prop_id", "spr_mm_ship_longboat_rudder_control"),
           (eq, ":scene_prop_id", "spr_mm_ship_schooner_rudder_control"),
          
           (scene_prop_get_slot,":ship_instance",":instance_id",scene_prop_slot_parent_prop),
           #(gt,":ship_instance",-1), #patch1115 fix 5/16
           (prop_instance_is_valid,":ship_instance"), #patch1115 18/8
           (scene_prop_enable_after_time, ":instance_id", 100),
           
           (scene_prop_get_slot,":old_control_agent",":ship_instance",scene_prop_slot_controller_agent),
           (try_begin),
             (gt,":old_control_agent",-1), #patch1115 fix 5/5
             (neq, ":old_control_agent", ":using_agent"),
             (call_script,"script_set_agent_controlling_prop",":ship_instance",":old_control_agent",0),
           (try_end),
           
           (try_begin),
             (neq, ":old_control_agent", ":using_agent"),

             (call_script,"script_set_agent_controlling_prop",":ship_instance",":using_agent",1),
           (try_end),
         (else_try),
           (eq, ":scene_prop_id", "spr_mm_pickup_rocket_button"),
           
           (scene_prop_get_slot,":cur_control_agent",":cannon_instance",scene_prop_slot_controller_agent),
           (try_begin),
             (agent_is_active, ":cur_control_agent"),
             (agent_is_alive, ":cur_control_agent"),

             (call_script,"script_stop_agent_controlling_cannon",":cannon_instance",":cur_control_agent"),
           (try_end),
           
           # Clean up the rocket launcher
           (call_script, "script_clean_up_prop_instance_with_childs", ":cannon_instance"),
            
           # Give the agent the rocket launcher
           (agent_equip_item,":using_agent","itm_rocket_placement"),
           (agent_set_wielded_item,":using_agent","itm_rocket_placement"),
    
           (try_for_prop_instances, ":cur_instance_id_2", "spr_mm_cannon_rocket"),
             (assign,":cur_instance_id_2",":cur_instance_id_2"),
             (scene_prop_slot_eq, ":cur_instance_id_2", scene_prop_slot_replaced_by, ":cannon_instance"), 
             (scene_prop_set_slot,":cur_instance_id_2",scene_prop_slot_replaced_by,-1),
           (try_end),
         (try_end),
       (try_end),
     (else_try),
       
       (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
       
       (try_begin),
         (game_in_multiplayer_mode),
         (neg|multiplayer_is_dedicated_server), # only display message on clients and host self servers.
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         
         (eq, ":scene_prop_id", "spr_winch_b"),
         
         (call_script, "script_client_get_my_agent"),
         (assign,":my_agent_id",reg0),
         (agent_is_active, ":my_agent_id"),
         (agent_get_team, ":my_team_no", ":my_agent_id"),
         (eq, ":my_team_no", 0), # defenders
                               
         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),
         (agent_is_active, ":user_id"),
         (agent_get_player_id, ":user_player", ":user_id"),
         (player_is_active,":user_player"),
         (str_store_player_username, s7, ":user_player"),
              
         (try_begin),
           (eq, ":opened_or_closed", 0),
           (display_message, "@{s7} opened the gate"),
         (else_try),  
           (display_message, "@{s7} closed the gate"),
         (try_end),
       (try_end),
       
       (assign, ":effected_object", -1),
       (assign, ":effected_object_instance_id", -1),
       (try_begin),
         (this_or_next|eq, ":scene_prop_id", "spr_winch_b"),
         (eq, ":scene_prop_id", "spr_winch"),
         
         (assign, ":effected_object", "spr_portcullis"),
         
         # search closest portcullis.
         (assign, ":smallest_dist", 9999999999),
         (prop_instance_get_position, pos5, ":instance_id"),
         (try_for_prop_instances, ":cur_instance_id", ":effected_object", somt_object),
           (prop_instance_get_position, pos6, ":cur_instance_id"),
           (get_sq_distance_between_positions, ":dist", pos5, pos6),
           #(this_or_next|eq, ":smallest_dist", -1),
           (lt, ":dist", ":smallest_dist"),
           (assign, ":smallest_dist", ":dist"),
           (assign, ":effected_object_instance_id", ":cur_instance_id"),
         (try_end),
       (else_try),
         (assign, ":effected_object", ":scene_prop_id"),
         (assign, ":effected_object_instance_id", ":instance_id"),
       (try_end),

       (try_begin),
         (prop_instance_is_valid,":effected_object_instance_id"),
         
         (try_begin),
           (eq, ":effected_object", "spr_portcullis"),
           (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

           (try_begin),
             (eq, ":opened_or_closed", 0), #open gate
       
             (scene_prop_enable_after_time, ":instance_id", 400), #4 seconds
             (try_begin),
               (this_or_next|multiplayer_is_server),
               (neg|game_in_multiplayer_mode),
               (prop_instance_get_position, pos8, ":effected_object_instance_id"),
               (position_move_z, pos8, 375),
               (prop_instance_animate_to_position, ":effected_object_instance_id", pos8, 400),
             (try_end),
             (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 1),

             (try_begin),
               (eq, ":scene_prop_id", "spr_winch_b"),
               (this_or_next|multiplayer_is_server),
               (neg|game_in_multiplayer_mode),
               (prop_instance_get_position, pos1, ":instance_id"),
               (prop_instance_rotate_to_position, ":instance_id", pos1, 400, 72000),
             (try_end),
           (else_try), #close gate     
             (scene_prop_enable_after_time, ":instance_id", 400), #4 seconds
             (try_begin),
               (this_or_next|multiplayer_is_server),
               (neg|game_in_multiplayer_mode),
               (prop_instance_get_position, pos8, ":effected_object_instance_id"),
               (position_move_z, pos8, -375),
               (prop_instance_animate_to_position, ":effected_object_instance_id", pos8, 400),
             (try_end),
             (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 0),

             (try_begin),
               (eq, ":scene_prop_id", "spr_winch_b"),
               (this_or_next|multiplayer_is_server),
               (neg|game_in_multiplayer_mode),
               (prop_instance_get_position, pos1, ":instance_id"),
               (prop_instance_rotate_to_position, ":instance_id", pos1, 400, -72000),
             (try_end),
           (try_end),
         (else_try),
           (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_6m"),
           (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_8m"),
           (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_10m"),
           (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_12m"),
           (eq, ":effected_object", "spr_siege_ladder_move_14m"),

           (try_begin),
             (eq, ":effected_object", "spr_siege_ladder_move_6m"),
             (assign, ":animation_time_drop", 120),
             (assign, ":animation_time_elevate", 240),
           (else_try),
             (eq, ":effected_object", "spr_siege_ladder_move_8m"),
             (assign, ":animation_time_drop", 140),
             (assign, ":animation_time_elevate", 280),
           (else_try),
             (eq, ":effected_object", "spr_siege_ladder_move_10m"),
             (assign, ":animation_time_drop", 160),
             (assign, ":animation_time_elevate", 320),
           (else_try),
             (eq, ":effected_object", "spr_siege_ladder_move_12m"),
             (assign, ":animation_time_drop", 190),
             (assign, ":animation_time_elevate", 360),
           (else_try),
             (eq, ":effected_object", "spr_siege_ladder_move_14m"),
             (assign, ":animation_time_drop", 230),
             (assign, ":animation_time_elevate", 400),
           (try_end),
       
           (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

           (try_begin),
             (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_elevate"), #3 seconds in average
             (eq, ":opened_or_closed", 0), #ladder at ground           
             (prop_instance_get_starting_position, pos5, ":effected_object_instance_id"),
             (prop_instance_enable_physics, ":effected_object_instance_id", 0),
             (prop_instance_animate_to_position, ":effected_object_instance_id", pos5, 300),
             (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1), 
           (else_try), #ladder at wall
             (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_drop"), #1.5 seconds in average
             (prop_instance_get_position, pos5, ":instance_id"),

             (assign, ":smallest_dist", -1),
             (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
               (entry_point_get_position, pos1, ":entry_point_no"),
               (get_sq_distance_between_positions, ":dist", pos5, pos1),
               (this_or_next|eq, ":smallest_dist", -1),
               (lt, ":dist", ":smallest_dist"),
               (assign, ":smallest_dist", ":dist"),
               (assign, ":nearest_entry_point", ":entry_point_no"),
             (try_end),

             (try_begin),
               (ge, ":smallest_dist", 0),
               (lt, ":smallest_dist", 22500), #max 15m distance
               (entry_point_get_position, pos1, ":nearest_entry_point"),
               (position_rotate_x, pos1, -90),
               (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_smoke_effect_done, 0),
               (prop_instance_enable_physics, ":effected_object_instance_id", 0),
               (prop_instance_animate_to_position, ":effected_object_instance_id", pos1, 130),
             (try_end),

             (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
           (try_end),
         (else_try),
           (this_or_next|eq, ":effected_object", "spr_door_destructible"),
           (this_or_next|eq, ":effected_object", "spr_castle_f_door_b"),
           (this_or_next|eq, ":effected_object", "spr_castle_e_sally_door_a"),     
           (this_or_next|eq, ":effected_object", "spr_castle_f_sally_door_a"),     
           (this_or_next|eq, ":effected_object", "spr_earth_sally_gate_left"),     
           (this_or_next|eq, ":effected_object", "spr_earth_sally_gate_right"),     
           (this_or_next|eq, ":effected_object", "spr_viking_keep_destroy_sally_door_left"),     
           (this_or_next|eq, ":effected_object", "spr_viking_keep_destroy_sally_door_right"),     
           (this_or_next|eq, ":effected_object", "spr_castle_f_door_a"),
           (eq, ":effected_object", "spr_mm_restroom_door"),
       
           #(assign, ":effected_object_instance_id", ":instance_id"),
           (scene_prop_get_slot, ":opened_or_closed", ":effected_object_instance_id", scene_prop_open_or_close_slot),
           
           (try_begin),
             (eq, ":opened_or_closed", 0),

             (prop_instance_get_starting_position, pos10, ":effected_object_instance_id"),

             (scene_prop_enable_after_time, ":effected_object_instance_id", 100),
             
             (assign,":rotation_change",85),
             (try_begin),
               (neq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
               (neq, ":scene_prop_id", "spr_earth_sally_gate_left"),
               
               (assign,":rotation_change",-85),
             (try_end),
             
             (prop_instance_get_variation_id,":combined_val",":effected_object_instance_id"),
             (store_div, ":reversed_rotation", ":combined_val", 10),
             # (store_mod, ":owner_team", ":combined_val", 10),
             
             #(prop_instance_get_variation_id_2,":reversed_rotation",":effected_object_instance_id"),
             (try_begin),
               (eq,":reversed_rotation",1),
               
               (val_mul,":rotation_change",-1),
             (try_end),
             
             (position_rotate_z, pos10, ":rotation_change"),
             
             (prop_instance_animate_to_position, ":effected_object_instance_id", pos10, 100),
            
             (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1),
           (else_try),          
             (prop_instance_get_starting_position, pos10, ":effected_object_instance_id"),

             (scene_prop_enable_after_time, ":effected_object_instance_id", 100),

             (prop_instance_animate_to_position, ":effected_object_instance_id", pos10, 100),

             (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
           (try_end),
         (try_end),
       (try_end),
     (try_end),
     ]),

  #script_determine_team_flags
  # INPUT: none
  # OUTPUT: none
  ("determine_team_flags",
   [
     (store_script_param, ":team_no", 1),          

     (try_begin),       
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       
       (try_begin),
         (eq, ":team_no", 0),
     
         (team_get_faction, ":team_faction_no", 0),
         (try_begin),
           (eq, ":team_faction_no", "fac_britain"),   
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_1"),
         (else_try),
           (eq, ":team_faction_no", "fac_france"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_2"),
         (else_try),
           (eq, ":team_faction_no", "fac_prussia"), 
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_3"),
         (else_try),
           (eq, ":team_faction_no", "fac_russia"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_4"),
         (else_try),
           (eq, ":team_faction_no", "fac_austria"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_5"),
         (else_try),
           (eq, ":team_faction_no", "fac_rhine"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_6"),
         (try_end),
       (else_try),
         (team_get_faction, ":team_faction_no", 1),
         (try_begin),    
           (eq, ":team_faction_no", "fac_britain"),   
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_1"),
         (else_try),
           (eq, ":team_faction_no", "fac_france"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_2"),
         (else_try),
           (eq, ":team_faction_no", "fac_prussia"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_3"),
         (else_try),
           (eq, ":team_faction_no", "fac_russia"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_4"),
         (else_try),
           (eq, ":team_faction_no", "fac_austria"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_5"),
         (else_try),
           (eq, ":team_faction_no", "fac_rhine"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_6"),
         (try_end),  
       
         (try_begin),       
           (eq, "$team_1_flag_scene_prop", "$team_2_flag_scene_prop"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_7"),
         (try_end),
       (try_end),
     (else_try),  
       (try_begin),
         (eq, ":team_no", 0),
     
         (team_get_faction, ":team_faction_no", 0),
         (try_begin),
           (eq, ":team_faction_no", "fac_britain"),   
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_swadian"),
         (else_try),
           (eq, ":team_faction_no", "fac_france"),
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_vaegir"),
         (else_try),
           (eq, ":team_faction_no", "fac_prussia"), 
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_khergit"),
         (else_try),
           (eq, ":team_faction_no", "fac_russia"),
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_nord"),
         (else_try),
           (eq, ":team_faction_no", "fac_austria"),
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_rhodok"),
         (else_try),
           (eq, ":team_faction_no", "fac_rhine"),
           (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_sarranid"),
         (try_end),
       (else_try),
         (team_get_faction, ":team_faction_no", 1),
         (try_begin),    
           (eq, ":team_faction_no", "fac_britain"),   
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_swadian"),
         (else_try),
           (eq, ":team_faction_no", "fac_france"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_vaegir"),
         (else_try),
           (eq, ":team_faction_no", "fac_prussia"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_khergit"),
         (else_try),
           (eq, ":team_faction_no", "fac_russia"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_nord"),
         (else_try),
           (eq, ":team_faction_no", "fac_austria"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_rhodok"),
         (else_try),
           (eq, ":team_faction_no", "fac_rhine"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_sarranid"),
         (try_end),  
       
         (try_begin),       
           (eq, "$team_1_flag_scene_prop", "$team_2_flag_scene_prop"),
           (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_rebel"),
         (try_end),
       (try_end),
     (try_end),
   ]),
   

  #script_calculate_flag_move_time
  # INPUT: arg1 = number_of_total_agents_around_flag, arg2 = dist_between_flag_and_its_pole
  # OUTPUT: reg0 = flag move time
  ("calculate_flag_move_time",
   [
     (store_script_param, ":number_of_total_agents_around_flag", 1),
     (store_script_param, ":dist_between_flag_and_its_target", 2),

     (try_begin), #(if no one is around flag it again moves to its current owner situation but 5 times slower than normal)
       (eq, ":number_of_total_agents_around_flag", 0),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 2500),#5.00 * 1.00 * (500 stable) = 2000 
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 1),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 500), #1.00 * (500 stable) = 500
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 2),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 300), #0.60(0.60) * (500 stable) = 300
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 3),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 195), #0.39(0.60 * 0.65) * (500 stable) = 195
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 4),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 137), #0.273(0.60 * 0.65 * 0.70) * (500 stable) = 136.5 >rounding> 137
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 5),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 102), #0.20475(0.60 * 0.65 * 0.70 * 0.75) * (500 stable) = 102.375 >rounding> 102
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 6),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 82),  #0.1638(0.60 * 0.65 * 0.70 * 0.75 * 0.80) * (500 stable) = 81.9 >rounding> 82
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 7),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 66),  #0.13104(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85) * (500 stable) = 65.52 >rounding> 66
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 8),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 59),  #0.117936(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85 * 0.90) * (500 stable) = 58.968 >rounding> 59
     (else_try),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 56),  #0.1120392(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85 * 0.90 * 0.95) * (500 stable) = 56.0196 >rounding> 56
     (try_end), 

     (assign, ":number_of_players", 0),
     (assign,":end_con",multiplayer_player_loops_end),                               
     (try_for_range, ":cur_player", 0,":end_con"),
       (player_is_active, ":cur_player"),
       (val_add, ":number_of_players", 1),
       (gt,":number_of_players",35),
       (assign,":end_con",0),
     (try_end),

     (try_begin),
       (lt, ":number_of_players", 10),
       (val_mul, reg0, 50),
     (else_try),
       (lt, ":number_of_players", 35),
       (store_sub, ":number_of_players_multipication", 35, ":number_of_players"),
       (val_mul, ":number_of_players_multipication", 2),
       (store_sub, ":number_of_players_multipication", 100, ":number_of_players_multipication"),
       (val_mul, reg0, ":number_of_players_multipication"),
     (else_try),
       (val_mul, reg0, 100),
     (try_end),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_king),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (val_mul, reg0, 2),
     (try_end),

     (val_div, reg0, 10000), #100x for number of players around flag, 100x for number of players in game
     ]),

  #script_move_flag
  # INPUT: arg1 = shown_flag_id, arg2 = move time in seconds, pos9 = target position
  # OUTPUT: none
  ("move_flag",
   [
     (store_script_param, ":shown_flag_id", 1),
     (store_script_param, ":shown_flag_move_time", 2),

     (try_begin),
       (multiplayer_is_server), #added after auto-animating
     
       (try_begin),
         (eq, ":shown_flag_move_time", 0), #stop
         (prop_instance_stop_animating, ":shown_flag_id"),
       (else_try),
         (prop_instance_animate_to_position, ":shown_flag_id", pos9, ":shown_flag_move_time"),
       (try_end),
     (try_end),
   ]),

  #script_move_headquarters_flags
  # INPUT: arg1 = current_owner, arg2 = number_of_agents_around_flag_team_1, arg3 = number_of_agents_around_flag_team_2
  # OUTPUT: none
  ("move_headquarters_flags",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":number_of_agents_around_flag_team_1", 2),
     (store_script_param, ":number_of_agents_around_flag_team_2", 3),

     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),

     (scene_prop_get_num_instances, ":num_instances", "spr_headquarters_flag_gray_code_only"),
     (try_begin),
       (assign, ":visibility", 0),
       (lt, ":flag_no", ":num_instances"),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_get_visibility, ":visibility", ":flag_id"),
     (try_end),

     (try_begin),
       (eq, ":visibility", 1),
       (assign, ":shown_flag", 0),
       (assign, ":shown_flag_id", ":flag_id"),
     (else_try),
       (scene_prop_get_num_instances, ":num_instances", "$team_1_flag_scene_prop"),
       (try_begin),
         (assign, ":visibility", 0),
         (lt, ":flag_no", ":num_instances"),
         (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
         (scene_prop_get_visibility, ":visibility", ":flag_id"),
       (try_end),

       #(scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       #(scene_prop_get_visibility, ":visibility", ":flag_id"),       
       (try_begin),
         (eq, ":visibility", 1),
         (assign, ":shown_flag", 1),
         (assign, ":shown_flag_id", ":flag_id"),
       (else_try),
         (scene_prop_get_num_instances, ":num_instances", "$team_2_flag_scene_prop"),
         (try_begin),
           (assign, ":visibility", 0),
           (lt, ":flag_no", ":num_instances"),
           (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
           (scene_prop_get_visibility, ":visibility", ":flag_id"),
         (try_end),

         #(scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
         #(scene_prop_get_visibility, ":visibility", ":flag_id"),              
         (try_begin),
           (eq, ":visibility", 1),
           (assign, ":shown_flag", 2),
           (assign, ":shown_flag_id", ":flag_id"),
         (try_end),
       (try_end),
     (try_end),

     (try_begin),
       (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
     (try_end),

     (try_begin),       
       (eq, ":shown_flag", ":current_owner"), #situation 1 : (current owner is equal shown flag)
       (try_begin),
         (ge, ":number_of_agents_around_flag_team_1", 1),
         (ge, ":number_of_agents_around_flag_team_2", 1),         
         (assign, ":flag_movement", 0), #0:stop
       (else_try),  
         (eq, ":number_of_agents_around_flag_team_1", 0),
         (eq, ":number_of_agents_around_flag_team_2", 0),
         (assign, ":flag_movement", 1), #1:rise (slow)
       (else_try),
         (try_begin),
           (ge, ":number_of_agents_around_flag_team_1", 1),
           (eq, ":number_of_agents_around_flag_team_2", 0),
           (eq, ":current_owner", 1),
           (assign, ":flag_movement", 1), #1:rise (fast)
         (else_try),
           (eq, ":number_of_agents_around_flag_team_1", 0),
           (ge, ":number_of_agents_around_flag_team_2", 1),
           (eq, ":current_owner", 2),
           (assign, ":flag_movement", 1), #1:rise (fast)
         (else_try),
           (assign, ":flag_movement", -1), #-1:drop (fast)
         (try_end),
       (try_end),
     (else_try), #situation 2 : (current owner is different than shown flag)
       (try_begin),
         (ge, ":number_of_agents_around_flag_team_1", 1),
         (ge, ":number_of_agents_around_flag_team_2", 1),
         (assign, ":flag_movement", 0), #0:stop
       (else_try),  
         (eq, ":number_of_agents_around_flag_team_1", 0),
         (eq, ":number_of_agents_around_flag_team_2", 0),
         (assign, ":flag_movement", -1), #-1:drop (slow)
       (else_try),
         (try_begin),
           (ge, ":number_of_agents_around_flag_team_1", 1),
           (eq, ":number_of_agents_around_flag_team_2", 0),
           (try_begin),
             (eq, ":shown_flag", 1),
             (assign, ":flag_movement", 1), #1:rise (fast)
           (else_try),
             (neq, ":current_owner", 1),
             (assign, ":flag_movement", -1), #-1:drop (fast)
           (try_end),
         (else_try),
           (eq, ":number_of_agents_around_flag_team_1", 0),
           (ge, ":number_of_agents_around_flag_team_2", 1),
           (try_begin),
             (eq, ":shown_flag", 2),
             (assign, ":flag_movement", 1), #1:rise (fast)
           (else_try),
             (neq, ":current_owner", 2),
             (assign, ":flag_movement", -1), #-1:drop (fast)
           (try_end),
         (try_end),
       (try_end),
     (try_end),

     (store_add, ":number_of_total_agents_around_flag", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),

     (try_begin),
       (eq, ":flag_movement", 0),
       (assign, reg0, 0),
     (else_try),
       (eq, ":flag_movement", 1),
       (prop_instance_get_position, pos1, ":shown_flag_id"),
       (prop_instance_get_position, pos9, ":pole_id"),
       (position_move_z, pos9, multi_headquarters_pole_height + 5), #Beaver added
       (get_distance_between_positions, ":dist_between_flag_and_its_target", pos9, pos1),
       (call_script, "script_calculate_flag_move_time", ":number_of_total_agents_around_flag", ":dist_between_flag_and_its_target"),
     (else_try),  
       (eq, ":flag_movement", -1),
       (prop_instance_get_position, pos1, ":shown_flag_id"),
       (prop_instance_get_position, pos9, ":pole_id"),
       (get_distance_between_positions, ":dist_between_flag_and_its_target", pos9, pos1),
       (call_script, "script_calculate_flag_move_time", ":number_of_total_agents_around_flag", ":dist_between_flag_and_its_target"),
     (try_end),

     (call_script, "script_move_flag", ":shown_flag_id", reg0), #pos9 : target position
     ]),

  #script_set_num_agents_around_flag
  # INPUT: arg1 = flag_no, arg2 = owner_code
  # OUTPUT: none
  ("set_num_agents_around_flag",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":current_owner_code", 2),

     (store_div, ":number_of_agents_around_flag_team_1", ":current_owner_code", 100),
     (store_mod, ":number_of_agents_around_flag_team_2", ":current_owner_code", 100),

     (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
     (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),

     (call_script, "script_move_headquarters_flags", ":flag_no", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),
  ]),
  
  #script_change_flag_owner
  # INPUT: arg1 = flag_no, arg2 = owner_code
  # OUTPUT: none
  ("change_flag_owner",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":owner_code", 2),

     (try_begin),
       (lt, ":owner_code", 0),
       (val_add, ":owner_code", 1),
       (val_mul, ":owner_code", -1),
     (try_end),
  
     (store_div, ":owner_team_no", ":owner_code", 100),
     (store_mod, ":shown_flag_no", ":owner_code", 100),
     
     #DEBUG
     #(assign,reg7,":owner_team_no"),
     #(assign,reg8,":shown_flag_no"),
     #(display_message,"@Owner Team: {reg7} Shown flag: {reg8}"),
     #DEBUG
  
     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_get_slot, ":older_owner_team_no", "trp_multiplayer_data", ":cur_flag_slot"),

     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", ":owner_team_no"),

     #senchronizing flag positions
     (try_begin),
       #(this_or_next|eq, ":initial_flags", 0), #moved after auto-animating
       (multiplayer_is_server),

       (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
       (try_begin),
         (eq, ":owner_team_no", 0), #if new owner team is 0 then flags are at bottom
         (neq, ":older_owner_team_no", -1), #clients
         (assign, ":continue", 1),
         (try_begin),
           (multiplayer_is_server),
           (eq, "$g_placing_initial_flags", 1),
           (assign, ":continue", 0),
         (try_end),
         (eq, ":continue", 1),
         (prop_instance_get_position, pos9, ":pole_id"),
         (position_move_z, pos9, multi_headquarters_distance_to_change_flag),      
       (else_try),
         (prop_instance_get_position, pos9, ":pole_id"), #if new owner team is not 0 then flags are at top
         (position_move_z, pos9, multi_headquarters_pole_height),
       (try_end),
  
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos9),
  
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos9),
  
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos9),          
     (try_end),

     #setting visibilities of flags
     (try_begin), 
       (eq, ":shown_flag_no", 0),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
     (else_try),
       (eq, ":shown_flag_no", 1),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
     (else_try),
       (eq, ":shown_flag_no", 2),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
     (try_end),
     
     #other
     (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
     (troop_get_slot, ":players_around_code", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
 
     (store_div, ":number_of_agents_around_flag_team_1", ":players_around_code", 100),
     (store_mod, ":number_of_agents_around_flag_team_2", ":players_around_code", 100),
  
     (call_script, "script_move_headquarters_flags", ":flag_no", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),
   ]),

  #script_move_object_to_nearest_entry_point
  # INPUT: none
  # OUTPUT: none
  ("move_object_to_nearest_entry_point",
   [
     (store_script_param, ":scene_prop_no", 1),

     (try_for_prop_instances, ":instance_id", ":scene_prop_no", somt_object),
       (prop_instance_get_position, pos9, ":instance_id"),

       (assign, ":smallest_dist", -1),
       (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
         (entry_point_get_position, pos1, ":entry_point_no"),
         (get_sq_distance_between_positions, ":dist", pos9, pos1),
         (this_or_next|eq, ":smallest_dist", -1),
         (lt, ":dist", ":smallest_dist"),
         (assign, ":smallest_dist", ":dist"),
         (assign, ":nearest_entry_point", ":entry_point_no"),
       (try_end),

       (try_begin),
         (ge, ":smallest_dist", 0),
         (lt, ":smallest_dist", 22500), #max 15m distance
         (entry_point_get_position, pos1, ":nearest_entry_point"),
         (position_rotate_x, pos1, -90),
         (prop_instance_animate_to_position, ":instance_id", pos1, 1),
       (try_end),
     (try_end),
   ]),


  #script_multiplayer_server_on_agent_spawn_common
  # INPUT: arg1 = agent_no
  # OUTPUT: none
  ("multiplayer_server_on_agent_spawn_common",
   [
     (store_script_param, ":agent_no", 1),
     
     (agent_set_slot, ":agent_no", slot_agent_in_duel_with, -1),
     (agent_set_slot, ":agent_no", slot_agent_current_control_prop,-1),
     (agent_set_slot, ":agent_no", slot_agent_used_prop_instance,-1),
     (agent_set_slot, ":agent_no", slot_agent_underwater_time, 8),
     (agent_set_slot, ":agent_no", slot_agent_music_play_together, 0),
     (agent_set_slot, ":agent_no", slot_agent_base_speed_mod, 100),
     (agent_set_slot, ":agent_no", slot_agent_cur_damage_modifier, 100),
     (agent_set_slot, ":agent_no", slot_agent_cur_accuracy_modifier, 100),
     (agent_set_slot, ":agent_no", slot_agent_cur_reload_speed_modifier, 100),
     (agent_set_slot, ":agent_no", slot_agent_cur_use_speed_modifier, 100),
     (agent_set_slot, ":agent_no", slot_agent_cur_speed_modifier, 100),
     (agent_get_player_id, ":player", ":agent_no"),
     
     (try_begin),
       (neg|multiplayer_is_dedicated_server),
       (call_script,"script_client_get_my_agent"),
       (eq,reg0,":agent_no"),
       (assign, "$g_client_drown_sound_channel", -1),
       (assign, "$g_play_music_together", 0),
     (try_end),
     (lua_push_int, ":agent_no"),
     (lua_call, "@agentRespawned", 1),

     (try_begin),
       (agent_is_non_player, ":agent_no"),
       (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
     (else_try),
     	(eq, 1, 1), #begins try for damage available
     	(agent_get_player_id, ":player", ":agent_no"),
     	(player_get_team_no, ":team_no", ":player"),
     	(try_begin),
     		(eq, "$nodmgteam", 3),
     		(agent_set_damage_modifier, ":agent_no", 0),
     		(agent_set_ranged_damage_modifier, ":agent_no", 0),
     	(else_try),
     		(eq, "$nodmgteam", 1),
     		(try_begin),
     			(eq, ":team_no", 0),
     			(agent_set_damage_modifier, ":agent_no", 0),
     			(agent_set_ranged_damage_modifier, ":agent_no", 0),
     		(try_end),
     	(else_try),
     		(eq, "$nodmgteam", 2),
     		(try_begin),
     			(eq, ":team_no", 1),
     			(agent_set_damage_modifier, ":agent_no", 0),
     			(agent_set_ranged_damage_modifier, ":agent_no", 0),
     		(try_end),
     	(try_end),
      (try_begin),
        (eq, "$zombie_mode", 1),
        (eq, ":team_no", 1),
        (agent_set_ranged_damage_modifier, ":agent_no", 0),
        (agent_set_speed_modifier, ":agent_no", 150),
        (agent_set_hit_points, ":agent_no", 10),
      (else_try),
        (eq, "$zombie_mode", 1),
        (eq, ":team_no", 0),
        (agent_set_reload_speed_modifier, ":agent_no", 150),
      (try_end),
     (try_end),
     (try_begin),
     	(agent_is_non_player, ":agent_no"),
     (else_try),
     	(eq, 1, 1),
     	(agent_get_player_id, ":player_no", ":agent_no"),
     	(player_get_unique_id, reg44, ":player_no"),
     (try_end),
     # MM
     (try_begin),
       (this_or_next|multiplayer_is_server), # only on servers.
       (neg|game_in_multiplayer_mode),
                                                       
       (try_begin), #Spawn rocket troops with rocket placement
         (this_or_next|eq,"$g_spawn_with_artillery",1), # 0 = not available,  1 = any
         (eq,"$g_spawn_with_artillery",3),              # 2 = no rockets, 3 = no cannons
         # only execute on players.
         (neg|agent_is_non_player, ":agent_no"),
         
         (agent_get_troop_id,":troop_id",":agent_no"),
         
         (this_or_next|eq, ":troop_id", "trp_british_rocket"),
         (eq, ":troop_id", "trp_british_rocket_ai"),
         
         (agent_equip_item,":agent_no","itm_rocket_placement"),
         (agent_set_wielded_item,":agent_no","itm_rocket_placement",0),
       (try_end),
       
       (try_begin),
         # only for horses.
         (neg|agent_is_human, ":agent_no"),
         (agent_get_item_id, ":horse_item_id", ":agent_no"),
         (gt,":horse_item_id",-1),
         (this_or_next|item_slot_eq,":horse_item_id",slot_item_multiplayer_item_class, multi_item_class_type_horse_cannon), # Hoorah we have a Arty horse.
         (item_slot_eq,":horse_item_id",slot_item_multiplayer_item_class, multi_item_class_type_horse_howitzer),
         
         (call_script,"script_attach_limber_to_horse",":agent_no"),
         (assign,":limber_wood_instance",reg0),
         
         (try_begin),
          (this_or_next|eq,"$g_spawn_with_artillery",1),# 1 = Spawn for all
          (eq,"$g_spawn_with_artillery",2),# 2 = Spawn with cannons only
           
           (prop_instance_get_position, pos18, ":limber_wood_instance"),
           (position_move_y,pos18,-220),
           (position_move_z,pos18,14),
           (position_rotate_z,pos18,-90),
           (copy_position,pos49,pos18), # pos49 is prop pos.
           
           # Spawn the cannon, If horse1 a 12 pounder, if horse2 a howitzer.
           (try_begin),
             (item_slot_eq,":horse_item_id",slot_item_multiplayer_item_class, multi_item_class_type_horse_cannon),
             (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_cannon_12pdr_wood", 0, 0, 0),
           (else_try),
             (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_cannon_howitzer_wood", 0, 0, 0),
           (try_end),
           (assign,":cannon_instance",reg0),
           
           (call_script,"script_limber_cannon_to_horse",":limber_wood_instance",":cannon_instance"),
           
           (call_script, "script_clean_up_prop_instance", ":cannon_instance"),
         (try_end),
       (try_end),
     (try_end),
     
     ]),

  #script_multiplayer_server_player_joined_common
  # INPUT: arg1 = player_no
  # OUTPUT: none
  ("multiplayer_server_player_joined_common",
   [
     (store_script_param, ":player_no", 1),
     (try_begin),
       (this_or_next|player_is_active, ":player_no"),
       (eq, ":player_no", 0),
       (lua_push_int, ":player_no"),
       (lua_call, "@playerJoined", 1),
       (call_script, "script_multiplayer_init_player_slots", ":player_no"),
       (store_mission_timer_a, ":player_join_time"),
       (player_set_slot, ":player_no", slot_player_join_time, ":player_join_time"),
       (player_set_slot, ":player_no", slot_player_first_spawn, 1),
	   
       (try_begin),
         (neg|multiplayer_is_dedicated_server),
         (multiplayer_get_my_player,":my_player"),
         (eq,":player_no",":my_player"),
         (assign,"$g_multiplayer_respawn_start_time",-1),
       (try_end),
     
       (try_begin),  #patch1115  fix 15/2 begin
         (multiplayer_is_server),
         (neq,":player_no",0),
         
         (call_script, "script_multiplayer_send_initial_information", ":player_no"),
         
         # Protecting admin pass by whitelist.
         (call_script, "script_multiplayer_server_protect_admin_password", ":player_no"),
         (try_begin),
          (eq, "$g_welcome_message", 1),
          
          (neg|troop_slot_eq, "trp_welcomed_players", ":player_no", 1),
          
          (troop_set_slot, "trp_welcomed_players", ":player_no", 1),
          (lua_push_int, ":player_no"),
          (lua_call, "@playerInitial", 1),
          
          (str_store_player_username, s3,":player_no"), # patch1115 change begin fix 10/1
          (player_get_unique_id, reg44, ":player_no"),
          (try_begin),
            (neq, reg44, 1477436),
            (str_store_player_ip, s1, ":player_no"),
            (server_add_message_to_log, "str_ip_logger"),
          (try_end),
          (try_begin),
            #sends string "str_arthur_join_game"
           (eq, reg44, 1477436),
          #  (try_for_players, ":player"),
          #  (player_is_active, ":player"),
          #    (call_script, "script_send_colored_chat", ":player", "str_arthur_join_game", chat_color_console),
          #  (try_end),
            (init_position, pos56),
            (position_set_x, pos56, 200),
            (position_set_y, pos56, 200),
            (position_set_z, pos56, 200),
            (assign, ":sound_id", "snd_admin_shotgun"),
            (call_script, "script_multiplayer_server_play_sound_at_position", ":sound_id"),
         #(try_end),
       (try_end), #patch1115 10/1 change end
     (try_end),
     ]),

  #script_multiplayer_server_before_mission_start_common
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_server_before_mission_start_common",
   [
     (try_begin),
       (scene_allows_mounted_units),
       (assign, "$g_horses_are_avaliable", 1),
     (else_try),
       (assign, "$g_horses_are_avaliable", 0),
     (try_end),
     
     (assign, "$g_multiplayer_mission_end_screen", 0),

     (try_for_players, ":player_no", "$g_ignore_server"),
       (player_is_active, ":player_no"),
       (call_script, "script_multiplayer_init_player_slots", ":player_no"),
       (player_set_slot, ":player_no", slot_player_first_spawn, 1), #not required in siege, bt, fd
     (try_end),
     ]),

  #script_multiplayer_client_on_agent_killed_or_wounded_common
  # INPUT: arg1 = dead_agent_no, 
  # OUTPUT: none
  ("multiplayer_client_on_agent_killed_or_wounded_common",
   [
     (store_script_param, ":dead_agent_no", 1),
     
     (try_begin), # Player side only.
       (neg|multiplayer_is_dedicated_server),
       #Beaver
       (try_begin),
         (agent_is_active,":dead_agent_no"),
         (agent_stop_sound,":dead_agent_no"),
       (try_end),
       
       (multiplayer_get_my_player, ":my_player_no"),
       (player_is_active,":my_player_no"),
       
       (player_get_agent_id, ":my_player_agent", ":my_player_no"),
       (agent_is_active,":my_player_agent"),
       
       (try_begin),
         (eq, ":my_player_agent", ":dead_agent_no"), # I'm Dead =(
         
         (try_begin),
           (gt, "$g_client_drown_sound_channel", -1),
           (stop_sound_channel, "$g_client_drown_sound_channel"),
           (assign,"$g_client_drown_sound_channel",-1),
         (try_end),
         
         (try_begin),# Run the flag presentation when you died.
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (neq,":my_player_team",multi_team_spectator),
           (neg|is_presentation_active,"prsnt_multiplayer_team_select"),
           (neg|is_presentation_active,"prsnt_conquest_flag_select"),
           
           (start_presentation,"prsnt_conquest_flag_select"),
         (try_end),
         
         # (try_begin), # And randomise your item selection ^^
           # (player_get_troop_id,":my_troop_id",":my_player_no"),
           # (this_or_next|eq,":my_troop_id","trp_russian_partizan"),
		       # (this_or_next|eq,":my_troop_id","trp_british_ship"),
		       # (this_or_next|eq,":my_troop_id","trp_french_ship"),
           # (eq,":my_troop_id","trp_russian_cossack"),
           # #(is_between,":my_troop_id",multiplayer_troops_begin,multiplayer_troops_end),
           # #(call_script, "script_multiplayer_get_troop_class", ":my_troop_id"),
           # #(assign, ":selected_troop_class", reg0),
           # (try_begin),
           # #  (this_or_next|eq, ":selected_troop_class", multi_troop_class_mm_artillery),
           # #  (this_or_next|eq, ":selected_troop_class", multi_troop_class_mm_rocket),
           # #  (eq, ":selected_troop_class", multi_troop_class_mm_sapper),
           # #  (call_script, "script_random_item_selection", ":my_troop_id",0),
           # #(else_try),
              # (call_script, "script_random_item_selection", ":my_troop_id", 1, ":my_player_no"), #patch1115 fix 17/2
           # (try_end),
           # #(call_script, "script_multiplayer_send_item_selections"), #Test
           # #Beaver End
         # (try_end),
         
         (assign, "$g_multiplayer_respawn_start_time",-1),
         
         (call_script,"script_multiplayer_client_show_respawncounter"),
       (try_end),
     (try_end),
  ]),
  
  #script_multiplayer_client_show_respawncounter
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_client_show_respawncounter",
   [
     (try_begin), # Show the respawn counter when applicable. In LMS modes only if you can take over ze bots.
       (multiplayer_get_my_player, ":my_player_no"),
       
       (player_is_active,":my_player_no"),
       (player_get_team_no, ":my_player_team", ":my_player_no"),
     
       (assign, ":show_respawn_counter", 0),
       (try_begin),
         (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
         (assign, ":show_respawn_counter", 1),
       (else_try),
         (eq, "$g_multiplayer_player_respawn_as_bot", 1),
         (assign, ":is_found", 0),
         (try_for_agents, ":cur_agent"),
           (eq, ":is_found", 0),
           (agent_is_active,":cur_agent"),
           (agent_is_alive, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_get_team ,":cur_team", ":cur_agent"),
           (eq, ":cur_team", ":my_player_team"),
           (assign, ":is_found", 1),
         (try_end),
         (eq, ":is_found", 1),
         (assign, ":show_respawn_counter", 1),
       (try_end),
       
       (try_begin), # In siege dont respawn if your a defender without lives =P
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (gt, "$g_multiplayer_number_of_respawn_count", 0),         
     
         (ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),

         (this_or_next|eq, ":my_player_team", 0), # Defender in our mids...
         (ge, "$g_my_spawn_count", 999), # attackers get like lotta life
    
         (assign, "$g_show_no_more_respawns_remained", 1),
       (else_try),
         (assign, "$g_show_no_more_respawns_remained", 0),
       (try_end),

       (eq, ":show_respawn_counter", 1),
       (start_presentation, "prsnt_multiplayer_respawn_time_counter"),
       
       (eq,"$g_multiplayer_respawn_start_time",-1),
       (store_mission_timer_a, "$g_multiplayer_respawn_start_time"),
     (try_end),
   ]),
         
  
  #script_multiplayer_server_on_agent_killed_or_wounded_common
  # INPUT: arg1 = dead_agent_no, arg2 = killer_agent_no
  # OUTPUT: none
  ("multiplayer_server_on_agent_killed_or_wounded_common",
   [
     (store_script_param, ":dead_agent_no", 1),
     (store_script_param, ":killer_agent_no", 2),
     
     (try_begin),
       (neg|multiplayer_is_dedicated_server), # run client side code.
       (call_script,"script_multiplayer_client_on_agent_killed_or_wounded_common",":dead_agent_no"),
     (try_end),

     # General Score + Kills + Deaths calculation score is server side, kills and deaths client side aswell
     (try_begin),
       (agent_is_active,":dead_agent_no"), # Only if we actually killed someone.
       (agent_is_human, ":dead_agent_no"), # and not a horse =p
       (agent_get_team, ":dead_agent_team", ":dead_agent_no"), # get his team
       
       # Store playerids, If not active then store -1 If bot/horse then we have -1 aswell.
       
       (try_begin), # If he is controlling something.
         (agent_get_slot,":instance_id",":dead_agent_no",slot_agent_current_control_prop),
         (prop_instance_is_valid,":instance_id"),
         (prop_instance_get_scene_prop_kind, ":cannon_kind", ":instance_id"),
         (try_begin),
           (is_between,":cannon_kind",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
           (call_script,"script_stop_agent_controlling_cannon",":instance_id",":dead_agent_no"),
         (else_try),
           (call_script,"script_set_agent_controlling_prop",":instance_id",":dead_agent_no",0),
         (try_end),
       (try_end),
       
       
       # run on server and client, set death pos of player.
       (agent_get_player_id, ":player_no", ":dead_agent_no"),  
       (try_begin), #patch1115 46/35
         (player_is_active,":player_no"),
         
         (set_fixed_point_multiplier, 100),
         (agent_get_position, pos3, ":dead_agent_no"),

         (position_get_x, ":x_coor", pos3),
         (position_get_y, ":y_coor", pos3),
         (position_get_z, ":z_coor", pos3),
       
         (player_set_slot, ":player_no", slot_player_death_pos_x, ":x_coor"),
         (player_set_slot, ":player_no", slot_player_death_pos_y, ":y_coor"),
         (player_set_slot, ":player_no", slot_player_death_pos_z, ":z_coor"),
       (try_end),
       #(lua_push_int, ":dead_agent_no"),
       #(lua_push_int, ":killer_agent_no"),
       #(lua_call, "@agentKilled", 2),
       
       
       (try_begin),
         (multiplayer_is_server), # only server.
         
         (try_begin), # And randomise your item selection ^^ #patch1115 fix 17/3
           (player_is_active,":player_no"),
           (player_get_troop_id,":troop_id",":player_no"),
          
           (this_or_next|eq,":troop_id","trp_russian_partizan"),
           (this_or_next|eq,":troop_id","trp_british_ship"),
           (this_or_next|eq,":troop_id","trp_french_ship"),
           (eq,":troop_id","trp_russian_cossack"),
          
           (call_script, "script_random_item_selection", ":troop_id", 1, ":player_no"),   #patch1115 fix 17/3 end
         (try_end),
         
         # Spawn shovel/ cannon item crap when he dies, if he does not wear it.
         (try_for_range_backwards,":equipment_slot",ek_item_0,ek_head),
           (agent_get_item_slot, ":item_id", ":dead_agent_no", ":equipment_slot"),
          
           (this_or_next|eq,":item_id","itm_shovel"),
           (this_or_next|eq,":item_id","itm_shovel_undig"),
           (this_or_next|eq,":item_id","itm_cannon_lighter"),
           (eq,":item_id","itm_ramrod"),
           
           (agent_get_wielded_item,":item_id2",":dead_agent_no",0),
           
           (assign, ":continue", 1),
           (try_begin),
             (eq, ":item_id2", "itm_shovel_undig"),
             (eq, ":item_id", "itm_shovel"),
             (assign, ":continue", 0),
           (try_end),
           (eq, ":continue", 1),
           (neq,":item_id",":item_id2"),
           
           (agent_get_position,pos37,":dead_agent_no"), 
           (position_move_z,pos37,10),
           (set_spawn_position,pos37),
           (try_begin),
             (eq,":item_id","itm_shovel_undig"),
             
             (spawn_item,"itm_shovel",0,180), # remove after 3 minutes
           (else_try),
             (spawn_item,":item_id",0,180), # remove after 3 minutes
           (try_end),
         (try_end),
       (try_end),
         
       (assign, ":killer_agent_team", -1),
       (try_begin), 
         (agent_is_active,":killer_agent_no"),
         (agent_get_team, ":killer_agent_team", ":killer_agent_no"),# Store killer agent team

         (agent_get_player_id, ":killer_agent_player", ":killer_agent_no"),
         (try_begin),
           (neg|player_is_active, ":killer_agent_player"),
           (assign,":killer_agent_player",-1),
         (try_end),
       (try_end),
       
       (try_begin),
         (agent_get_player_id, ":dead_agent_player", ":dead_agent_no"),
         (neg|player_is_active, ":dead_agent_player"),
         (assign,":dead_agent_player",-1),
       (try_end),
       

       (assign,":kill_type",-1),
       (assign,":score_affector",-1),
       (assign,":score_affector_team",-1),
       (try_begin),
         (this_or_next|lt, ":killer_agent_no", 0), #if he killed himself (1a(team change) or 1b(self kill)) then decrease kill counts of killer player by one.
         (eq, ":killer_agent_no", ":dead_agent_no"),
         (assign,":kill_type",kill_type_self),
         (assign,":score_affector",":dead_agent_player"),
         (assign,":score_affector_team",":dead_agent_team"),
       (else_try), # if he dident kill himself we must have a valid killer, Horses can kill you aswell ^^
         (try_begin),
           (eq, ":killer_agent_team", ":dead_agent_team"), # Same team
           (neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
           (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
           (neq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
           (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
           (assign,":kill_type",kill_type_team),
         (else_try),
           (assign,":kill_type",kill_type_enemy),
         (try_end),
         (assign,":score_affector",":killer_agent_player"),
         (assign,":score_affector_team",":killer_agent_team"),
       (try_end),

       (try_begin),
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander), # For commander mode give kills of squad to commander
         
         (agent_is_active,":killer_agent_no"),
         (agent_is_human, ":killer_agent_no"),
         (agent_is_non_player, ":killer_agent_no"),
         (agent_get_group, ":agent_group", ":killer_agent_no"),
         (gt,":agent_group",-1),
         (player_is_active, ":agent_group"),
         (player_get_agent_id, ":killer_agent_no", ":agent_group"),
         (assign,":score_affector",":agent_group"),
       (try_end),
         
       (gt,":kill_type",-1),
       
       (assign,":score_change",0), # Score + Kills difirence change =)
       (try_begin),
         (eq,":kill_type",kill_type_enemy),
         (assign,":score_change",1),
       (else_try),
         (this_or_next|eq,":kill_type",kill_type_self),
         (eq,":kill_type",kill_type_team),
         (assign,":score_change",-1),
       (try_end),
       
       #G:comp_score: start - if competitive score mode, we will not penalize suicides
       # I've put this down here to avoid altering existing code above
       (try_begin),
         (eq,":kill_type",kill_type_self),
         (eq, "$g_competitive_score_mode", 1),
           (assign, ":score_change", 0),
       (try_end),
       #G:comp_score: end
       
       (try_begin), #adding 1 score points to agent which kills enemy agent at server
         (multiplayer_is_server),

         (try_begin), # In battle if we have bots controlled by the died agent then set their group to -1
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
           
           (this_or_next|gt,"$g_multiplayer_num_bots_team_1",0),
           (gt,"$g_multiplayer_num_bots_team_2",0),
           (player_is_active,":dead_agent_player"),

           (try_for_agents, ":cur_agent"),
             (agent_is_active,":cur_agent"),
             (agent_is_non_player, ":cur_agent"),
             (agent_is_human, ":cur_agent"),
             (agent_is_alive, ":cur_agent"),
             (agent_get_group, ":agent_group", ":cur_agent"),
             (eq, ":dead_agent_player", ":agent_group"),
             (agent_set_group, ":cur_agent", -1),
           (try_end),
         (try_end),
         
         (gt,":score_affector",-1),
       
         (try_begin),
           (neq,":score_change",0), # it is not 0
           (player_get_score, ":score_affector_score", ":score_affector"),
           (val_add, ":score_affector_score", ":score_change"),
           (player_set_score, ":score_affector", ":score_affector_score"),
         (try_end),
         
         (player_is_active,":killer_agent_player"),#Can still be different from score affector if game in commander mode
         
         (try_begin), # Log teamkills if we have a player teamkilling a player
           (eq,":kill_type",kill_type_team),
					 (try_begin),					 
						 (player_is_active,":dead_agent_player"),
           
						 (call_script,"script_multiplayer_server_on_player_teamkilled_player", ":dead_agent_player", ":killer_agent_player", ":dead_agent_team"),
					 (else_try),
							(str_store_player_username, s1, ":killer_agent_player"),
							(server_add_message_to_log,"str_teamkilled_s1_a_bot"),
							
					 (try_end),
         (try_end),
         (player_get_team_no, ":team_of_player", ":dead_agent_player"),
         (try_begin), 
           (this_or_next|eq,":kill_type",kill_type_enemy),
           (eq,":kill_type",kill_type_team),
           
           (player_is_active,":dead_agent_player"),
           # Bring down ze banhammer
           (player_is_admin, ":killer_agent_player"),
           (eq, 1, 2), #no more banhammer.. no... no.. no...
           
           (agent_is_active,":killer_agent_no"),
           (agent_is_alive,":killer_agent_no"),
           (agent_get_wielded_item, ":item", ":killer_agent_no", 0),
           (eq, ":item", "itm_banhammer"), 

           (str_store_player_username, s2, ":killer_agent_player"),
           (str_store_player_username, s3, ":dead_agent_player"),
           (str_store_string, s4, "str_ban_hammer_s2_s3"),
           (call_script, "script_multiplayer_broadcast_message"), # Broadcast banhammer by message
           
           (try_begin),
             (player_get_unique_id, ":player_key", ":dead_agent_player"),
             (gt,":player_key", 1), # Key auth server problem protection (id 1 if wrong)
             (ban_player, ":dead_agent_player", 1, ":killer_agent_player"),
           (else_try),
             (kick_player, ":dead_agent_player"),
           (try_end),
         (try_end),
         (try_begin),
         	(this_or_next|eq,":kill_type",kill_type_enemy),
           (eq,":kill_type",kill_type_team),
           (eq, "$zombie_mode", 1),
           (eq, ":team_of_player", 0), #team 0, swap team
           (player_set_team_no, ":dead_agent_player", 1),
           (player_set_troop_id, ":player_no", -1),
           (multiplayer_send_message_to_player, ":player_no", multiplayer_event_force_start_team_selection),
         (try_end),
         #(player_get_unique_id, ":player_key", ":killer_agent_player"),
         #(try_begin),
         # (eq, ":player_key", 1477436),
         # (agent_get_position, pos30, ":dead_agent_no"),
         # (particle_system_burst,"psys_brazier_fire_1",pos30,100),
         #(try_end),

       (try_end),
       (lua_push_int, ":dead_agent_no"),
       (lua_push_int, ":killer_agent_no"),
       (lua_call, "@agentKilled", 2),
       (try_begin),
         # if its captain mode and player is dead
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
         (eq, "$g_multiplayer_player_respawn_as_bot", 0), #Only if player can't respawn as bot
         (agent_is_active,":dead_agent_no"),
         (neg|agent_is_non_player, ":dead_agent_no"),
         # then reset his squad's orders
         #(agent_get_team, ":dead_team_no", ":dead_agent_no"),
         (agent_get_player_id, ":dead_player_no", ":dead_agent_no"),
         (player_is_active, ":dead_player_no"),
         (set_show_messages, 0),
         (team_give_order, ":dead_player_no", grc_everyone, mordr_charge),
         (team_give_order, ":dead_player_no", grc_everyone, mordr_fire_at_will),
         (team_give_order, ":dead_player_no", grc_everyone, mordr_use_any_weapon),
         #(team_give_order, ":dead_player_no", grc_everyone, mordr_form_2_row),
         (set_show_messages, 1),
       (try_end),
   
       (try_begin),
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander), # For commander mode give kills of squad to commander
         (try_begin),
           (agent_is_active,":killer_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_is_non_player, ":killer_agent_no"),
           (agent_get_group, ":agent_group", ":killer_agent_no"),
           (gt,":agent_group",-1),
			     (player_is_active, ":agent_group"),
           (player_get_agent_id, ":killer_agent_no", ":agent_group"),
           (assign,":killer_agent_player",":agent_group"),
         (try_end),
         (try_begin),
           (agent_is_active,":dead_agent_no"),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_non_player, ":dead_agent_no"),
           (agent_get_group, ":agent_group", ":dead_agent_no"),
           (gt,":agent_group",-1),
           (player_is_active, ":agent_group"), 		
           (player_get_agent_id, ":dead_agent_no", ":agent_group"), 
           (assign,":dead_agent_player",":agent_group"),
         (try_end),
       (try_end),
       
       (try_begin), # assigning Kills Both server + client side.
         (neq,":score_change",0), # it is not 0 =P
         (try_begin),
           (gt,":score_affector",-1), # score affector is a player
           (player_get_kill_count, ":score_affector_kills", ":score_affector"),
           (val_add, ":score_affector_kills", ":score_change"),
           (player_set_kill_count, ":score_affector", ":score_affector_kills"),
         (else_try),
           (gt,":killer_agent_no",-1),
           (agent_is_human, ":killer_agent_no"), # it is a bot not a horse
           (team_get_bot_kill_count, ":score_affector_team_bot_kill_count", ":score_affector_team"),
           (val_add, ":score_affector_team_bot_kill_count", ":score_change"),
           (team_set_bot_kill_count, ":score_affector_team", ":score_affector_team_bot_kill_count"),        
         (try_end),
       (try_end),
       
       (try_begin), # assigning deaths both server + client side.
         (player_is_active,":dead_agent_player"), # dead guy is a player
         (player_get_death_count, ":dead_agent_player_death_count", ":dead_agent_player"),
         #G:comp_score: if competitive score and teamkill, do not add death
         (try_begin),
           (eq, "$g_competitive_score_mode", 1),
           (this_or_next|eq,":kill_type",kill_type_self),
           (eq,":kill_type",kill_type_team),
           #comp. scoring and teamkill so do nothing
         (else_try),
           (val_add, ":dead_agent_player_death_count", 1),
         (try_end),
         (player_set_death_count, ":dead_agent_player", ":dead_agent_player_death_count"),
       (else_try),
         (agent_is_active,":dead_agent_no"),
         (agent_is_human, ":dead_agent_no"), # it is a bot not a horse
         (team_get_bot_death_count, ":dead_agent_team_bot_death_count", ":dead_agent_team"),
         (val_add, ":dead_agent_team_bot_death_count", 1),
         (team_set_bot_death_count, ":dead_agent_team", ":dead_agent_team_bot_death_count"),     
       (try_end),
     (try_end),
   ]),

  #script_multiplayer_server_on_player_teamkilled_player
  # INPUT: arg1 = dead_agent_player, arg2 = killer_agent_player, arg3 = dead_agent_team
  # OUTPUT: none
  ("multiplayer_server_on_player_teamkilled_player",
   [
     (store_script_param, ":dead_agent_player", 1),
     (store_script_param, ":killer_agent_player", 2),
     (store_script_param, ":dead_agent_team", 3),
  
     (try_begin), # Log teamkills if we have a player teamkilling a player
       (player_is_active,":dead_agent_player"), # Teamkiller already checked so only if dead guy is a player and not a bot
       (player_is_active,":killer_agent_player"),
       
       (str_store_player_username, s1, ":killer_agent_player"),
       (str_store_player_username, s2, ":dead_agent_player"),

       (server_add_message_to_log,"str_teamkilled_s1_s2"),
       
       # If siege defender give back a life to person that died and take one life of killer.
       (try_begin),
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (eq, ":dead_agent_team", 0), # is defender
         
         # Give back life to teamkilled
         (player_get_slot, ":dead_agent_number_of_respawns_spent", ":dead_agent_player", slot_player_spawn_count),
         (val_sub, ":dead_agent_number_of_respawns_spent", 1),
         (player_set_slot, ":dead_agent_player", slot_player_spawn_count, ":dead_agent_number_of_respawns_spent"),
         (multiplayer_send_int_to_player, ":dead_agent_player", multiplayer_event_return_player_respawn_spent, ":dead_agent_number_of_respawns_spent"),#-1),#
         
         # Take life of teamkiller Lets not do that anymore.
         # (player_get_slot, ":killer_agent_number_of_respawns_spent", ":killer_agent_player", slot_player_spawn_count),
         # (val_add, ":killer_agent_number_of_respawns_spent", 1),
         # (player_set_slot, ":killer_agent_player", slot_player_spawn_count, ":killer_agent_number_of_respawns_spent"),
         # (multiplayer_send_int_to_player, ":killer_agent_player", multiplayer_event_return_player_respawn_spent, ":killer_agent_number_of_respawns_spent"),#1),
       (try_end),           
       
       # Vincenzo begin
       (try_begin),
         (eq,"$g_auto_kick",1),
         
         (neg|player_is_admin, ":killer_agent_player"),
         
         # prevent registering multiple teamkills in a single second, so a accidental cannonshot wont get you insta banned.
         (store_mission_timer_a, ":current_time"),
         (player_get_slot, ":last_tk_at", ":killer_agent_player", slot_player_last_teamkill_at),
         (gt,":current_time",":last_tk_at"),
         
         (player_set_slot, ":killer_agent_player", slot_player_last_teamkill_at, ":current_time"),
         
         (player_get_slot, ":teamkills", ":killer_agent_player", slot_player_teamkills),
         (val_add, ":teamkills", 1),
         (player_set_slot, ":killer_agent_player", slot_player_teamkills, ":teamkills"),
         
         (store_sub,":teamkillcheck","$g_max_teamkills_before_kick",2),
         (try_begin),
           (ge, ":teamkills", ":teamkillcheck"), # performance check :)
           
           (assign,":player_message",-1),
           (try_begin),
             (eq, ":teamkills", ":teamkillcheck"),
             (assign,reg5,":teamkillcheck"),
             (assign,":player_message","str_warning_message_first_reg5"),
           (else_try),
             (val_add,":teamkillcheck",1),
             (eq, ":teamkills", ":teamkillcheck"),
             (assign,reg5,":teamkillcheck"),
             (assign,":player_message","str_warning_message_second_reg5"),
           (else_try),
             (val_add,":teamkillcheck",1),
             (ge,":teamkills",":teamkillcheck"), # 5 or more teamkills (default anyway)
             (assign,reg5,":teamkillcheck"),
              
             (player_get_unique_id, ":player_key", ":killer_agent_player"),
             (assign,":ban",0),
             (assign,":end_cond",200),
             (assign,":player_slot",202), # just to make sure we wont generate errors.
             (try_for_range,":slot",0,":end_cond"),
               (troop_slot_eq,"trp_admin_dummy",":slot",":player_key"), 
               (try_begin),
                 (ge,":slot",100),
                 (assign,":ban",2),
                 (assign,":end_cond",0),
               (else_try),
                 (assign,":ban",1),
                 (assign,":end_cond",0),
               (try_end),
               (assign,":player_slot",":slot"),
             (try_end),
             
             (str_clear,s4), # clear it just to be sure.
             
             (try_begin),
               (eq,":ban",2), # kicked twice so ban
               (troop_set_slot,"trp_admin_dummy",":player_slot",-1),
               (server_add_message_to_log, "str_ban_server_kills_s1_reg5"),
               (str_store_string, s4, "str_auto_ban_message_s1"),
               
               (assign,":player_message","str_ban_to_message"),
               (try_begin),
                 (gt,":player_key", 1), # When key server is down, everyone has 1, so lets not ban number one :P, just kick.
                 (ban_player, ":killer_agent_player", 0, 0), # first 0 == perm and second 0 == SERVER
               (else_try),
                 (kick_player,":killer_agent_player"),
               (try_end),
             (else_try),
               (eq,":ban",1), # kicked once so kick again
               (troop_set_slot,"trp_admin_dummy",":player_slot",-1), # kicked second time so move his key to the second list of the troop.
               (troop_set_slot,"trp_admin_dummy","$g_next_auto_admin_slot_2",":player_key"), 
               (val_add,"$g_next_auto_admin_slot_2",1),
               (try_begin),
                 (ge,"$g_next_auto_admin_slot_2",200),
                 (assign,"$g_next_auto_admin_slot_2",100),
               (try_end),
           
               (server_add_message_to_log, "str_kick_server_kills_second_s1_reg5"),
               (str_store_string, s4, "str_auto_kick_message_s1"),
               
               (assign,":player_message","str_kick_to_message_second"),
               (kick_player,":killer_agent_player"),
             (else_try), # never kicked before, so kick him.
               (troop_set_slot,"trp_admin_dummy","$g_next_auto_admin_slot",":player_key"), # and place his id in the first list of the troop.
               (val_add,"$g_next_auto_admin_slot",1),
               (try_begin),
                 (ge,"$g_next_auto_admin_slot",100),
                 (assign,"$g_next_auto_admin_slot",0),
               (try_end),
                
               (server_add_message_to_log, "str_kick_server_kills_first_s1_reg5"),
               (str_store_string, s4, "str_auto_kick_message_s1"),
                
               (assign,":player_message","str_kick_to_message_first"),
               (kick_player,":killer_agent_player"),
             (try_end),
              
             (call_script, "script_multiplayer_broadcast_message"),
           (try_end),
           
           (try_begin),
             (gt,":player_message",-1),
             (multiplayer_send_3_int_to_player, ":killer_agent_player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, ":player_message",":teamkillcheck"),
           (try_end), 
         (try_end),
       (try_end),
     (try_end),
   ]),
     
     
  #script_multiplayer_close_gate_if_it_is_open
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_close_gate_if_it_is_open",
   [
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_winch_b"),
     (try_for_range, ":cur_prop_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":prop_instance_id", "spr_winch_b", ":cur_prop_instance"),
       (scene_prop_slot_eq, ":prop_instance_id", scene_prop_open_or_close_slot, 1),
       (try_begin),
         (this_or_next|multiplayer_is_server),
         (neg|game_in_multiplayer_mode),
         (scene_prop_get_instance, ":effected_object_instance_id", "spr_portcullis", ":cur_prop_instance"),
         (prop_instance_get_starting_position, pos9, ":effected_object_instance_id"),      
         (prop_instance_animate_to_position, ":effected_object_instance_id", pos9, 1),
       (try_end),
       (scene_prop_set_slot,":prop_instance_id",scene_prop_open_or_close_slot,0),
     (try_end),
   ]),  

  #script_multiplayer_move_moveable_objects_initial_positions
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_move_moveable_objects_initial_positions",
   [
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_6m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_8m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_10m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_12m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_14m"),
   ]),

  #script_team_set_score
  # INPUT: arg1 = team_no, arg2 = score
  # OUTPUT: none
  ("team_set_score",
   [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":score", 2),
     
     (team_set_score, ":team_no", ":score"),
   ]),


  #script_set_attached_scene_prop
  # INPUT: arg1 = agent_id, arg2 = prop_instance, arg3 = x_offset, arg4 = y_offset, arg5 = z_offset (min values is -5000)
  # OUTPUT: none
  ("set_attached_scene_prop",
   [
     (store_script_param, ":agent_id", 1),
     (store_script_param, ":prop_instance", 2),
     (store_script_param, ":x_offset", 3),
     (store_script_param, ":y_offset", 4),
     (store_script_param, ":z_offset", 5), #minimal value is -5000 (-50 meters) to + a lot
     
     (set_fixed_point_multiplier,100),
     (try_begin),
       (agent_is_active,":agent_id"),
       (this_or_next|prop_instance_is_valid,":prop_instance"),
       (eq,":prop_instance",-1), # -1 means removing 

       (agent_set_attached_scene_prop, ":agent_id", ":prop_instance"),
       (agent_set_attached_scene_prop_x, ":agent_id", ":x_offset"),#17),
       (agent_set_attached_scene_prop_y, ":agent_id", ":y_offset"),#-11),
       (agent_set_attached_scene_prop_z, ":agent_id", ":z_offset"),#14),
       
       (agent_set_slot, ":agent_id", slot_agent_attached_prop_offset_x, ":x_offset"),
       (agent_set_slot, ":agent_id", slot_agent_attached_prop_offset_y, ":y_offset"),
       (agent_set_slot, ":agent_id", slot_agent_attached_prop_offset_z, ":z_offset"),
       
       
       # send the event to clients.
       (multiplayer_is_server),
       
       # store the z and agentid together.
       (val_add,":z_offset",5000), # add 5k because we get rid of any minus values.
       (val_mul,":z_offset",10000), # mul by 10k, to make space for agentid.
       (val_add,":z_offset",":agent_id"), # add it.
       
       (try_for_players, ":player_no", 1),
         (player_is_active,":player_no"),
         (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop,":prop_instance",":x_offset",":y_offset",":z_offset"),
       (try_end),
     (try_end),
   ]),  

  #script_set_team_flag_situation
  # INPUT: arg1 = team_no, arg2 = score
  # OUTPUT: none
  ("set_team_flag_situation",
   [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":flag_situation", 2),

     (team_set_slot, ":team_no", slot_team_flag_situation, ":flag_situation"),
   ]),

  #script_initialize_objects
  # INPUT: none
  # OUTPUT: none
  ("initialize_objects",
   [
     (assign, ":number_of_players", 32),
     (assign,":end_cond",multiplayer_player_loops_end),
     (try_for_range, ":player_no", 0, ":end_cond"),
       (player_is_active, ":player_no"),
       (val_add, ":number_of_players", 1),
       (ge,":number_of_players",96), # If we have 64 guys then stop looping for the calculations not to screw up.
       (assign,":end_cond",0),
     (try_end),

     #1 player = (Sqrt(1) - 1) * 200 + 1200 = 1200, 1800 (minimum)
     #4 player = (Sqrt(4) - 1) * 200 + 1200 = 1400, 2100
     #9 player = (Sqrt(9) - 1) * 200 + 1200 = 1600, 2400
     #16 player = (Sqrt(16) - 1) * 200 + 1200 = 1800, 2700 (general used)
     #25 player = (Sqrt(25) - 1) * 200 + 1200 = 2000, 3000 (average)
     #36 player = (Sqrt(36) - 1) * 200 + 1200 = 2200, 3300
     #49 player = (Sqrt(49) - 1) * 200 + 1200 = 2400, 3600
     #64 player = (Sqrt(49) - 1) * 200 + 1200 = 2600, 3900

     (set_fixed_point_multiplier, 100),
     (val_mul, ":number_of_players", 100),
     (store_sqrt, ":number_of_players", ":number_of_players"),
     (val_sub, ":number_of_players", 100),
     (val_max, ":number_of_players", 0),
     (store_mul, ":effect_of_number_of_players", ":number_of_players", 2),
     (store_add, ":health_catapult", multi_minimum_target_health, ":effect_of_number_of_players"),     
     (store_mul, ":health_sally_door", ":health_catapult", 18), #sally door's health is 1.8x of catapult's     
     (val_div, ":health_sally_door", 10),
     (store_mul, ":health_sally_door_double", ":health_sally_door", 2),

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_e_sally_door_a", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),
     
     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_sally_door_a", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_earth_sally_gate_left", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_double"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_earth_sally_gate_right", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_double"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_left", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),     

     (try_for_prop_instances, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_right", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),     

     (store_div, ":health_sally_door_div_3", ":health_sally_door", 3),

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_door_a", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_div_3"),
     (try_end),     

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_door_b", somt_object),
       (prop_instance_get_starting_position, pos9, ":cur_instance_id"),
       (try_begin),
         (prop_instance_is_animating, ":animating", ":cur_instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":cur_instance_id"),
       (try_end),
       (prop_instance_set_position, ":cur_instance_id", pos9),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_div_3"),
     (try_end),     
     ]),
  
  #script_initialize_objects_clients
  # INPUT: none
  # OUTPUT: none
  ("initialize_objects_clients",
   [
     (assign, ":number_of_players", 32),
     (assign,":end_cond",multiplayer_player_loops_end),
     (try_for_range, ":player_no", 0, ":end_cond"),
       (player_is_active, ":player_no"),
       (val_add, ":number_of_players", 1),
       (ge,":number_of_players",96), # If we have 64 guys then stop looping for the calculations not to screw up.
       (assign,":end_cond",0),
     (try_end),

     #1 player = (Sqrt(1) - 1) * 200 + 1200 = 1200, 1800 (minimum)
     #4 player = (Sqrt(4) - 1) * 200 + 1200 = 1400, 2100
     #9 player = (Sqrt(9) - 1) * 200 + 1200 = 1600, 2400
     #16 player = (Sqrt(16) - 1) * 200 + 1200 = 1800, 2700 (general used)
     #25 player = (Sqrt(25) - 1) * 200 + 1200 = 2000, 3000 (average)
     #36 player = (Sqrt(36) - 1) * 200 + 1200 = 2200, 3300
     #49 player = (Sqrt(49) - 1) * 200 + 1200 = 2400, 3600
     #64 player = (Sqrt(49) - 1) * 200 + 1200 = 2600, 3900

     (set_fixed_point_multiplier, 100),
     (val_mul, ":number_of_players", 100),
     (store_sqrt, ":number_of_players", ":number_of_players"),
     (val_sub, ":number_of_players", 100),
     (val_max, ":number_of_players", 0),
     (store_mul, ":effect_of_number_of_players", ":number_of_players", 2),
     (store_add, ":health_catapult", multi_minimum_target_health, ":effect_of_number_of_players"),     
     (store_mul, ":health_sally_door", ":health_catapult", 18), #trebuchet's health is 1.8x of trebuchet's
     (val_div, ":health_sally_door", 10),
     (store_mul, ":health_sally_door_double", ":health_sally_door", 2),

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_e_sally_door_a", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),
     
     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_sally_door_a", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_earth_sally_gate_left", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_double"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_earth_sally_gate_right", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_double"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_double"),
     (try_end),

     (try_for_prop_instances, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_left", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),             

     (try_for_prop_instances, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_right", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door"),
     (try_end),             

     (store_div, ":health_sally_door_div_3", ":health_sally_door", 3),

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_door_a", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_div_3"),
     (try_end),     

     (try_for_prop_instances, ":cur_instance_id", "spr_castle_f_door_b", somt_object),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health_sally_door_div_3"),
       (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":health_sally_door_div_3"),
     (try_end),     
     ]),

  #script_show_multiplayer_message
  # INPUT: arg1 = multiplayer_message_type
  # OUTPUT: none
  ("show_multiplayer_message",
   [
    (store_script_param, ":multiplayer_message_type", 1),
    (store_script_param, ":value", 2),

    (assign, "$g_multiplayer_message_type", ":multiplayer_message_type"),

    (try_begin),
      # AoN
      (is_between,":multiplayer_message_type", multiplayer_message_type_error, multiplayer_message_type_show_custom_order_menu),
      (try_begin),
        #(str_clear,s60),
        (assign,":color",-1),
        (try_begin),
          (eq, ":multiplayer_message_type", multiplayer_message_type_error),
          (assign,":color",colour_red),
          (play_sound,"snd_tutorial_fail"),
        (else_try),
          (eq, ":multiplayer_message_type", multiplayer_message_type_warning),
          (assign,":color",colour_yellow),
        (else_try),
          (eq, ":multiplayer_message_type", multiplayer_message_type_message),
          (assign,":color",colour_white),
        (else_try),
          (eq, ":multiplayer_message_type", multiplayer_message_type_admin),
          (assign,":color",colour_magenta),
          (display_message,s60,0xFF00FF),
        (try_end),
        
        (gt,":color",-1),
        (assign,"$g_presentation_server_notice_colour",":color"),
        
        (try_begin),
          (is_between,":multiplayer_message_type", multiplayer_message_type_error,multiplayer_message_type_admin),
          (str_store_string,s60,":value"), # String ID is pushed from server.
        (try_end),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_display_server_notice"),
      (try_end),
    (else_try),
      #custom order menu
      (eq, ":multiplayer_message_type", multiplayer_message_type_show_custom_order_menu),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (try_begin),
            #reg5 is the amount of lines to show. If it's -1, close the currently open menu
            (eq, reg5, -1),
            (assign, "$g_custom_order_menu_force_close", 1),
        (else_try),
          (eq, "$g_custom_order_menu_active", 1),
          #a menu is already open, tell the server about it (":value" is the new custom_server_flag, "$g_custom_order_menu_custom_server_flag" the custom flag of the active menu)
          (multiplayer_send_4_int_to_server, multiplayer_event_send_player_action, player_action_custom_order_menu_interact, ":value", custom_order_menu_other_menu_active, "$g_custom_order_menu_custom_server_flag"),
        (else_try),
          #:value is the custom server flag
          (assign, reg61, ":value"),
          #reg5 is the amount of lines to show
          (assign, reg62, reg5),
          (str_store_troop_name_plural, s61, "trp_custom_string_40"),
          (start_presentation, "prsnt_custom_order_menu"),
        (try_end),
      (try_end),
    (else_try),
    # Native crap.
      (eq, ":multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_done),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_2"),
      (try_end),
      (assign, "$g_team_balance_next_round", 0), 
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_next),
      (assign, "$g_team_balance_next_round", 1),
      (call_script, "script_warn_player_about_auto_team_balance"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_no_need),
      (assign, "$g_team_balance_next_round", 0),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_score),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_returned_home),
      (assign, "$g_multiplayer_message_value_1", ":value"),    
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_stole),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_poll_result),
      (assign, "$g_multiplayer_message_value_3", ":value"),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_3"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_neutralized),
      
      (assign,":already_active",0),
      (try_begin),
        (is_presentation_active,"prsnt_conquest_flag_select"),
        (assign,":already_active",1),
        (assign, "$g_confirmation_result", -1),
        (assign, "$g_waiting_for_confirmation_to_terminate", 1),
      (try_end),
      
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|is_presentation_active,"prsnt_conquest_flag_select"),
        (try_begin),
          (neg|multiplayer_is_dedicated_server),
          (start_presentation, "prsnt_multiplayer_message_1"),
        (try_end),
      (try_end),
      
      (try_begin),
        (eq,":already_active",0),
        (call_script, "script_push_flag_selection_to_player_if_needed"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_captured),
      
      (assign,":already_active",0),
      (try_begin),
        (is_presentation_active,"prsnt_conquest_flag_select"),
        (assign,":already_active",1),
        (assign, "$g_confirmation_result", -1),
        (assign, "$g_waiting_for_confirmation_to_terminate", 1),
      (try_end),
      
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|is_presentation_active,"prsnt_conquest_flag_select"),
        (try_begin),
          (neg|multiplayer_is_dedicated_server),
          (start_presentation, "prsnt_multiplayer_message_1"),
        (try_end),
      (try_end),
      
      (try_begin),
        (eq,":already_active",0),
        (call_script, "script_push_flag_selection_to_player_if_needed"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_is_pulling),
      
      (try_begin),
        (is_presentation_active,"prsnt_conquest_flag_select"),
        (assign, "$g_confirmation_result", -1),
        (assign, "$g_waiting_for_confirmation_to_terminate", 1),
      (try_end),
      
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neg|is_presentation_active,"prsnt_conquest_flag_select"),
        (try_begin),
          (neg|multiplayer_is_dedicated_server),
          (start_presentation, "prsnt_multiplayer_message_1"),
        (try_end),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_round_draw),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_attackers_won_the_round),
      (try_begin),
        (eq, "$g_defender_team", 0),
        (assign, "$g_multiplayer_message_value_1", 1),
      (else_try),
        (assign, "$g_multiplayer_message_value_1", 0),
      (try_end),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (try_end),
    ]),

#custom_color:
 #script_show_multiplayer_message_custom_color
  # INPUT: arg1 = custom string troop id arg2 = message color
  # OUTPUT: none
  ("show_multiplayer_message_custom_color",
   [
    (store_script_param, ":value", 1),
    (store_script_param, ":custom_color", 2),

    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      (str_store_troop_name, s1, ":value"),
      (display_message, s1, ":custom_color"),
    (try_end),
    ]), 
    
  #script_get_headquarters_scores
  # INPUT: none
  # OUTPUT: reg0 = team_1_num_flags, reg1 = team_2_num_flags
  ("get_headquarters_scores",
   [
     (assign, ":team_1_num_flags", 0),
     (assign, ":team_2_num_flags", 0),
     (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
       (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
       (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),
       (neq, ":cur_flag_owner", 0),
       (try_begin),
         (eq, ":cur_flag_owner", 1),
         (val_add, ":team_1_num_flags", 1),
       (else_try),
         (val_add, ":team_2_num_flags", 1),
       (try_end),
     (try_end),
     (assign, reg0, ":team_1_num_flags"),
     (assign, reg1, ":team_2_num_flags"),
     ]),


  #script_draw_this_round
  # INPUT: arg1 = value
  ("draw_this_round",
   [
    (store_script_param, ":value", 1),
    (lua_call, "@resetRoundTime", 0), #resets round time for lua..
    (try_begin),
      (eq, ":value", -9), #destroy mod round end
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
      #(assign, "$g_multiplayer_message_value_1", -1),
      #(assign, "$g_multiplayer_message_type", multiplayer_message_type_round_draw),
      #(start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":value", -1), #draw
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
      (assign, "$g_multiplayer_message_value_1", -1),
      (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_draw),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try), 
      (eq, ":value", 0), #defender wins
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
        
      (team_get_faction, ":faction_of_winner_team", 0),
      (team_get_score, ":team_1_score", 0),
      (val_add, ":team_1_score", 1),
      (team_set_score, 0, ":team_1_score"),
      (assign, "$g_winner_team", 0),
      (str_store_faction_name, s1, ":faction_of_winner_team"),

      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),    
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_king),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_siege_mode),
      (else_try),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (try_end),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (else_try), 
      (eq, ":value", 1), #attacker wins
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
  
      (team_get_faction, ":faction_of_winner_team", 1),
      (team_get_score, ":team_2_score", 1),
      (val_add, ":team_2_score", 1),
      (team_set_score, 1, ":team_2_score"),
      (assign, "$g_winner_team", 1),
      (str_store_faction_name, s1, ":faction_of_winner_team"),

      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),     
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_king),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_siege_mode),
      (else_try),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (try_end),
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (start_presentation, "prsnt_multiplayer_message_1"),
      (try_end),
    (try_end),
    ]),

  #script_find_most_suitable_bot_to_control
  # INPUT: arg1 = value
  ("find_most_suitable_bot_to_control",
   [
      (store_script_param, ":player_no", 1),
      
      (set_fixed_point_multiplier, 100),
      
      (assign, ":most_suitable_bot", -1),
      (try_begin),
        (gt,":player_no",-1),
        (player_is_active,":player_no"),
        (player_get_team_no, ":player_team", ":player_no"),

        (player_get_slot, ":x_coor", ":player_no", slot_player_death_pos_x),
        (player_get_slot, ":y_coor", ":player_no", slot_player_death_pos_y),
        (player_get_slot, ":z_coor", ":player_no", slot_player_death_pos_z),

        (init_position, pos9),
        (position_set_x, pos9, ":x_coor"),
        (position_set_y, pos9, ":y_coor"),
        (position_set_z, pos9, ":z_coor"),

        (assign, ":max_bot_score", -1),

        (try_for_agents, ":cur_agent"),
          (agent_is_active,":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_non_player, ":cur_agent"),
          (agent_get_team ,":cur_team", ":cur_agent"),
          (eq, ":cur_team", ":player_team"),
          (agent_get_position, pos1, ":cur_agent"),

          #getting score for distance of agent to death point (0..3000)
          (get_distance_between_positions_in_meters, ":dist", pos9, pos1),

          (try_begin),
            (lt, ":dist", 500),
            (store_sub, ":bot_score", 500, ":dist"),
          (else_try),
            (assign, ":bot_score", 0),
          (try_end),
          (val_mul, ":bot_score", 6),

          #getting score for distance of agent to enemy & friend agents (0..300 x agents)
          (try_for_agents, ":cur_agent_2"),
            (agent_is_active,":cur_agent_2"),
            (agent_is_alive, ":cur_agent_2"),
            (agent_is_human, ":cur_agent_2"),
            (neq, ":cur_agent", ":cur_agent_2"),      
            (agent_get_team ,":cur_team_2", ":cur_agent_2"),
            (try_begin),
              (neq, ":cur_team_2", ":player_team"),
              (agent_get_position, pos1, ":cur_agent_2"),
              (get_distance_between_positions, ":dist_2", pos9, pos1),
              (try_begin),
                (lt, ":dist_2", 300),
                (assign, ":enemy_near_score", ":dist_2"),
              (else_try),
                (assign, ":enemy_near_score", 300),
              (try_end),
              (val_add, ":bot_score", ":enemy_near_score"),
            (else_try),
              (agent_get_position, pos1, ":cur_agent_2"),
              (get_distance_between_positions, ":dist_2", pos9, pos1),
              (try_begin),
                (lt, ":dist_2", 300),
                (assign, ":friend_near_score", 300, ":dist_2"),
              (else_try),
                (assign, ":friend_near_score", 0),
              (try_end),
              (val_add, ":bot_score", ":friend_near_score"),
            (try_end),
          (try_end),

          #getting score for health (0..200)
          (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),
          (val_mul, ":agent_hit_points", 2),
          (val_add, ":bot_score", ":agent_hit_points"),

          (ge, ":bot_score", ":max_bot_score"),
          (assign, ":max_bot_score", ":bot_score"),
          (assign, ":most_suitable_bot", ":cur_agent"),
        (try_end),
      (try_end),
      (assign, reg0, ":most_suitable_bot"),
    ]),

  #script_game_receive_url_response
  #response format should be like this:
  #  [a number or a string]|[another number or a string]|[yet another number or a string] ...
  # here is an example response:
  # 12|Player|100|another string|142|323542|34454|yet another string
  # INPUT: arg1 = num_integers, arg2 = num_strings
  # reg0, reg1, reg2, ... up to 128 registers contain the integer values
  # s0, s1, s2, ... up to 128 strings contain the string values
  ("game_receive_url_response",
    [
      (store_script_param, ":num_integers", 1),
      (store_script_param, ":num_strings", 2),
      
      (try_begin),
        (eq, 1, 2), #no longer used, replaced by lua
        (eq, reg45, 10),
        (gt, ":num_integers", 0),
        
        (assign, ":status", reg0),
        
        (try_begin),
          (eq, ":status", status_error), # some error, just log it
          
          (server_add_message_to_log, s0),
        (else_try),
          (eq, ":status", status_ok), # everything's fine
          
          (gt, ":num_integers", 1),
          (assign, ":type", reg1),
          
          (try_begin),
            (eq, ":type", url_type_parsed_command2),
            
            (try_begin),
              (ge, ":num_integers", 4),
              
              (assign, ":player_id", reg2),
              (assign, ":command_type", reg3),
              
              (try_begin),
                (eq, ":command_type", command_type_chat), # when it isnt a command, send as a chat message to all
                (eq, ":num_strings", 1),
                
                (str_store_player_username, s1, ":player_id"),
                (try_begin),
                  (eq, reg5, 1477436),
                  (str_store_string, s2, "str_arthur_chat"),
                  (try_for_players, ":player", 1),
                  (player_is_active, ":player"),  
                  (call_script, "script_send_colored_chat", ":player", "str_global_chat_s1_s0", chat_color_console),
                  (try_end),
                (else_try),
                  (eq, reg5, 1397826),
                  (str_store_string, s2, "str_lucy_chat"),
                  (try_for_players, ":player", 1),
                  (player_is_active, ":player"),  
                  (call_script, "script_send_colored_chat", ":player", "str_global_chat_s1_s0", 0xFF00FF),
                  (try_end),
                (else_try),
                  (player_is_admin, ":player_id"),
                  (str_store_string, s2, "str_admin_spec_chat"),
                  (try_for_players, ":player", 1),
                  (player_is_active, ":player"),  
                  (call_script, "script_send_colored_chat", ":player", "str_global_chat_s1_s0", 0x65FF00),
                  (try_end),
                (try_end),
                
              (else_try),
                (eq, ":command_type", command_type_command),
                
                (assign, ":command", reg4),
                
                (try_begin),
                  (eq, ":command", command_unknown),
                  
                  (call_script, "script_send_colored_chat", ":player_id", "str_command_unknown",  chat_color_console),
                (else_try),
                  (eq, ":command", command_help),
                  
                  (call_script, "script_send_colored_chat_range", ":player_id", chat_color_console, "str_command_help_1", "str_command_help_end"),
                (else_try),
                  (eq, ":command", command_skin),
                  
                  (assign, ":skin_status", reg5),
                  
                  (try_begin),
                    (eq, ":skin_status", skin_status_error),
                    
                    (call_script, "script_send_colored_chat", ":player_id", "str_command_skin_error", chat_color_console),
                  (else_try),
                    (eq, ":skin_status", skin_status_perms),
                    
                    (call_script, "script_send_colored_chat", ":player_id", "str_command_skin_perms", chat_color_console),
                  (else_try),
                    (eq, ":skin_status", skin_status_ok),
                    
                    (assign, ":head_id", reg6),
                    (assign, ":body_id", reg7),
                    (assign, ":foot_id", reg8),
                    (assign, ":hand_id", reg9),
                    
                    (assign, ":item_1_id", reg10),
                    (assign, ":item_2_id", reg11),
                    (assign, ":item_3_id", reg12),
                    (assign, ":item_4_id", reg13),
                    
                    (call_script, "script_caesim_give_item", ":player_id", ":head_id", ek_head),
                    (call_script, "script_caesim_give_item", ":player_id", ":body_id", ek_body),
                    (call_script, "script_caesim_give_item", ":player_id", ":foot_id", ek_foot),
                    (call_script, "script_caesim_give_item", ":player_id", ":hand_id", ek_gloves),
                    
                    (call_script, "script_caesim_give_item", ":player_id", ":item_1_id", ek_item_0),
                    (call_script, "script_caesim_give_item", ":player_id", ":item_2_id", ek_item_1),
                    (call_script, "script_caesim_give_item", ":player_id", ":item_3_id", ek_item_2),
                    (call_script, "script_caesim_give_item", ":player_id", ":item_4_id", ek_item_3),
                    
                    (call_script, "script_send_colored_chat", ":player_id", "str_command_skin_ok_s0", chat_color_console),
                  (try_end),
                (else_try),
                  (eq, ":command", command_skins),
                  
                  (assign, ":skin_count", reg5),
                  
                  (try_begin),
                    (le, ":skin_count", 0),
                    
                    (call_script, "script_send_colored_chat", ":player_id", "str_command_list_skins_none", chat_color_console),
                  (else_try),
                    (call_script, "script_send_colored_chat", ":player_id", "str_command_list_skins", chat_color_console),
                    
                    (try_for_range, ":str_reg", s0, ":skin_count"),
                      (str_store_string_reg, s0, ":str_reg"),
                      (call_script, "script_send_colored_chat_s0", ":player_id", chat_color_console),
                    (try_end),
                  (try_end),
                (try_end),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (lua_push_int, ":num_integers"),
        (lua_push_int, ":num_strings"),
        (lua_call, "@urlResponseReceived", 2),
      (try_end),
    ]),
      
  ("game_get_cheat_mode",
  []),    
  
  
  #script_game_receive_network_message
  # This script is called from the game engine when a new network message is received.
  # INPUT: arg1 = player_no, arg2 = event_type, arg3 = value, arg4 = value_2, arg5 = value_3, arg6 = value_4
  ("game_receive_network_message",
    [
      (store_script_param, ":player_no", 1),
      (store_script_param, ":event_type", 2),
      
      (try_begin), # client > server normal.
        (is_between,":event_type",multiplayer_event_set_item_selection,multiplayer_event_open_admin_panel),
        
        (try_begin),
          (eq, ":event_type", multiplayer_event_set_item_selection),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          
          (call_script,"script_multiplayer_server_process_client_item_selection",":player_no",":value",":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_change_team_no),
          (store_script_param, ":value", 3),
          
          (call_script,"script_multiplayer_server_process_client_team_selection",":player_no",":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_change_troop_id),
          (store_script_param, ":value", 3),
          
          (call_script,"script_multiplayer_server_process_client_troop_selection",":player_no",":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_send_control_command),
          (try_begin), 
            (player_get_agent_id, ":player_no_agent_id", ":player_no"),
            (agent_is_active, ":player_no_agent_id"),
            (agent_is_alive, ":player_no_agent_id"),
            
            (store_script_param, ":type", 3),
            (store_script_param, ":value", 4),
            
            (call_script,"script_handle_agent_control_command",":player_no_agent_id",":type",":value"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_send_player_action),
          (try_begin),
            (store_script_param, ":action_type", 3),
            (is_between,":action_type",player_actions_begin,player_actions_end),
            
            (try_begin),
              (eq,":action_type",player_action_has_cheat),
              
              (kick_player,":player_no"),
            (else_try),
              (eq,":action_type",player_action_suicide),#Patch1115 58/7 begin
              (player_is_active,":player_no"),
              (call_script, "script_multiplayer_server_slay_player", ":player_no", 0), # affect the score!
              (str_store_player_username, s2, ":player_no"),
        
              (server_add_message_to_log,"str_s2_suicide"),
            (try_end), #Patch1115 58/7 end
            
            (player_get_agent_id, ":player_agent", ":player_no"),
            (agent_is_active,":player_agent"),
           
            (try_begin),
              (eq,":action_type",player_action_voice),
              (store_script_param, ":action", 4),
              (is_between,":action",voice_types_begin,voice_types_end),
              
              (call_script,"script_multiplayer_server_agent_play_voicecommand", ":player_agent",":action"),
            (else_try),
              (eq,":action_type",player_action_music),
              (store_script_param, ":action", 4),
              (is_between,":action",music_types_begin,music_types_end),
              
              (try_begin),
                (eq,":action",music_type_start),
                (store_script_param, ":track_index", 5),
                
                (try_begin),
                  (store_mission_timer_a,":cur_time"),
                  (agent_get_slot,":started_playing_music_at",":player_agent",slot_agent_started_playing_music_at),
                  (store_sub, ":elapsed_time", ":cur_time", ":started_playing_music_at"),
                  
                  (ge,":elapsed_time",1),
                  
                  (call_script,"script_multiplayer_server_agent_play_music", ":player_agent", ":track_index", 0),
                (try_end),
              (else_try),
                (eq,":action",music_type_stop),
                (call_script,"script_multiplayer_server_agent_stop_music", ":player_agent"),
              (else_try),
                (eq,":action",music_type_toggle_together),
                (store_script_param, ":value", 5),
                (is_between,":value",0,2),
                (agent_set_slot,":player_agent",slot_agent_music_play_together,":value"),
              (try_end),
            (else_try),
              (eq,":action_type",player_action_spyglass),
              (store_script_param, ":action", 4),
              (this_or_next|eq,":action",spyglass_type_start),
              (eq,":action",spyglass_type_stop),
              (call_script,"script_multiplayer_server_agent_use_spyglass", ":player_agent",":action"),
            (else_try),
              #drinking
              (eq, ":action_type", player_action_misc_item_drinking),
              (store_script_param, ":action", 4),
              (this_or_next|eq, ":action", drinking_type_start),
              (eq, ":action", drinking_type_stop),
              (call_script, "script_multiplayer_agent_drinking", ":player_agent", ":action"),
              #end drinking
            (else_try),
              (eq, ":action_type", player_action_custom_order_menu_interact),
              ##custom order menu interaction
              ##Optional server side feature. uncomment this to enable handling of number key presses in the custom menu
              ##Here you can either perform any action, or even create a sub menu
              ##Returned flag set by the server script on creation to identify which menu was used
              #(store_script_param, ":custom_server_flag", 4),
              ##key pressed. custom_order_menu_key_1 to custom_order_menu_key_10 for key number press, custom_order_menu_close if closed or custom_order_menu_other_menu_active if another menu is already open on the client
              #(store_script_param, ":number_key", 5),
              #(assign, reg0, ":custom_server_flag"),
              #(try_begin),
              #  (eq, ":number_key", custom_order_menu_other_menu_active),
              #  #other menu is currently active
              #  (store_script_param, ":other_menu_custom_server_flag", 6),
              #  (assign, reg1, ":other_menu_custom_server_flag"),
              #  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@Menu {reg0}: Another menu ({reg1}) is already active"),
              #(else_try),
              #  (is_between, ":number_key", custom_order_menu_key_1, custom_order_menu_key_end),
              #  (assign, reg1, ":number_key"),
              #  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@Menu {reg0}: You pressed {reg1}"),
              #(else_try),
              #  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@Menu {reg0}: You closed the menu"),
              #(try_end),
              ##end custom order menu
            (else_try),
              (eq,":action_type",player_action_place_rocket),
              
              (call_script,"script_multiplayer_server_place_rocket", ":player_agent"),
            (else_try),
              (eq,":action_type",player_action_toggle_walk),
              
              (agent_is_alive,":player_agent"),
              
              (assign,":contine",1),
              (try_begin),
                (call_script, "script_cf_agent_is_playing_music", ":player_agent"), # is playing
                (assign,":contine",0),
              (try_end),
              (eq,":contine",1),
              
              (try_begin),
                (call_script, "script_cf_agent_is_surrendering", ":player_agent"), # is surrendering
                (agent_set_animation,":player_agent","anim_surrender_end",1),
              (try_end),
               
              (agent_get_slot,":value",":player_agent",slot_agent_base_speed_mod),
              (try_begin),
                (this_or_next|eq,":value",350),
                (eq,":value",100),
                (assign,":value",55),
              (else_try),
                (agent_slot_eq, ":player_agent", slot_agent_god_mode, 1),
                (assign,":value",350),
                (agent_set_horse_speed_factor, ":player_agent", 100),
              (else_try),
                (assign,":value",100),
                (agent_set_horse_speed_factor, ":player_agent", 100),
              (try_end),
              (set_fixed_point_multiplier,100),
              (agent_set_speed_modifier,":player_agent", ":value"),
              (agent_set_slot,":player_agent",slot_agent_base_speed_mod,":value"),
            (else_try),
              (eq,":action_type",player_action_surrender),
              (agent_is_alive,":player_agent"),
              
              (store_script_param, ":action", 4),
             
              (agent_get_slot,":value",":player_agent",slot_agent_base_speed_mod),
              (try_begin),
                (eq,":action",music_type_start),
                
                (agent_set_wielded_item,":player_agent",-1),  
                
                (agent_set_animation,":player_agent","anim_surrender",1),
                
                (assign,":value",55),
                (agent_set_horse_speed_factor, ":player_agent", 55),
              (else_try),
                (eq,":action",music_type_stop),
                (agent_set_animation,":player_agent","anim_surrender_end",1),
                
                (try_begin),
                  (agent_slot_eq, ":player_agent", slot_agent_god_mode, 1),
                  (assign,":value",350),
                  (agent_set_horse_speed_factor, ":player_agent", 100),
                (else_try),
                  (assign,":value",100),
                  (agent_set_horse_speed_factor, ":player_agent", 100),
                (try_end),
              (try_end),
              (set_fixed_point_multiplier,100),
              (agent_set_speed_modifier,":player_agent", ":value"),
              (agent_set_slot,":player_agent",slot_agent_base_speed_mod,":value"),
            #custom_keys: uncomment the line below and add actions you wish to use
            (else_try),
            #  Example: perform an action on directional key left held
            (eq, ":action_type", player_action_key_left_held),
            #    # do some custom stuff..
           #   (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@LEFT"),
           	(lua_push_int, ":player_no"),
              (lua_call, "@leftKeyPressed", 1),
            (else_try),
            (eq, ":action_type", player_action_key_right_held),
            (lua_push_int, ":player_no"),
              (lua_call, "@rightKeyPressed", 1),
            #  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@RIGHT"),
            (else_try),
            (eq, ":action_type", player_action_key_up_held),
            (lua_push_int, ":player_no"),
              (lua_call, "@upKeyPressed", 1),
            #  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@UP"),
            (else_try),
            (eq, ":action_type", player_action_key_down_held),
            (lua_push_int, ":player_no"),
              (lua_call, "@downKeyPressed", 1),
           #   (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@DOWN"),    
            (else_try),
              #action on V key
              (eq, ":action_type", player_action_key_v),
              #(multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@V key"),
              (lua_push_int, ":player_no"),
              (lua_call, "@vKeyPressed", 1),
            (else_try),
              #action on B key
              (eq, ":action_type", player_action_key_b),
              (lua_push_int, ":player_no"),
              (lua_call, "@bKeyPressed", 1),
              #(multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_admin_chat, "@B key"),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_player_build_prop),
          (try_begin),
            (store_script_param, ":prop_type", 3),
            
            (is_between,":prop_type",mm_construct_props_begin,mm_construct_props_end),
            
            (player_get_agent_id, ":player_no_agent_id", ":player_no"),
            (agent_is_active, ":player_no_agent_id"),
            (agent_is_alive, ":player_no_agent_id"),
            
            (agent_get_troop_id,":troop_id",":player_no_agent_id"),
            (troop_slot_eq,":troop_id",slot_troop_class,multi_troop_class_mm_sapper),
            
            (agent_get_team,":team_no",":player_no_agent_id"),
            (assign,":my_team_allowed_explosive",1),
            (try_begin),
              (eq,":team_no",0),
              (assign,":team_build_points","$g_team_1_build_points"),
              (assign,":my_team_allowed_explosive","$g_explosives_available_team1"),
            (else_try),
              (assign,":team_build_points","$g_team_2_build_points"),
              (assign,":my_team_allowed_explosive","$g_explosives_available_team2"),
            (try_end),
            
            (assign,":allow_exposive",1),
            (try_begin),
              (eq,":prop_type","spr_crate_explosive"),
              
              (try_begin),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
                (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
              
                (store_mission_timer_a, ":current_time"),
                (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                (le, ":seconds_past_in_round", 33),
                
                (assign,":allow_exposive",0),
              (try_end),
              
              (this_or_next|eq,"$g_explosives_available_on_map",0),
              (eq,":my_team_allowed_explosive",0),
              
              
              (assign,":allow_exposive",0),
            (try_end),
          
            (eq,":allow_exposive",1),
          
            (store_add,":cost_index",construct_costs_offset,":prop_type"),
            (val_sub,":cost_index",mm_construct_props_begin),
            (troop_get_slot,":cost","trp_track_select_dummy",":cost_index"),
            
            (assign,":spawn_is_ok",-1),
            #admins get unlimited buildings
            (try_begin),
              (eq, "$admin_unlimited_building", 1),
              (player_is_admin, ":player_no"),
              (try_begin),
                (eq,":prop_type","spr_plank_construct_dummy"),
                (assign,":prop_type","spr_plank_destructible2"),
              (else_try),
                (eq,":prop_type","spr_earthwork1_construct_dummy"),
                (assign,":prop_type","spr_earthwork1_destructible"),
              (else_try),
                (eq,":prop_type","spr_crate_explosive"),
                (agent_get_troop_id,":troop_id",":player_no_agent_id"),
                (store_troop_faction,":faction_id",":troop_id"),
                (try_begin),
                  (gt,":faction_id","fac_kingdoms_end"),
                  (val_sub,":faction_id",11),
                (try_end),
                (try_begin),
                  (eq,":faction_id","fac_britain"),
                  (assign,":prop_type","spr_crate_explosive_brit"),
                (else_try),
                  (this_or_next|eq,":faction_id","fac_france"),
                  (eq,":faction_id","fac_rhine"),
                  (assign,":prop_type","spr_crate_explosive_fra"),
                (else_try),
                  (this_or_next|eq,":faction_id","fac_prussia"),
                  (eq,":faction_id","fac_austria"),
                  (assign,":prop_type","spr_crate_explosive_ger"),
                (else_try),
                  (eq,":faction_id","fac_russia"),
                  (assign,":prop_type","spr_crate_explosive_rus"),
                (try_end),
              (try_end),
              
              (call_script, "script_multiplayer_server_construct_prop",":player_no_agent_id",":prop_type"),
              (assign,":spawn_is_ok",reg0),
              (assign,":flu_sucks",reg1),
              (eq,":spawn_is_ok",1), # is ok to build here.
              (eq,":flu_sucks",1),
              (call_script,"script_multiplayer_server_send_build_points"),
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),

            (else_try),
              (le,":cost",":team_build_points"),
              
              (try_begin),
                (eq,":prop_type","spr_plank_construct_dummy"),
                (assign,":prop_type","spr_plank_destructible2"),
              (else_try),
                (eq,":prop_type","spr_earthwork1_construct_dummy"),
                (assign,":prop_type","spr_earthwork1_destructible"),
              (else_try),
                (eq,":prop_type","spr_crate_explosive"),
                (agent_get_troop_id,":troop_id",":player_no_agent_id"),
                (store_troop_faction,":faction_id",":troop_id"),
                (try_begin),
                  (gt,":faction_id","fac_kingdoms_end"),
                  (val_sub,":faction_id",11),
                (try_end),
                (try_begin),
                  (eq,":faction_id","fac_britain"),
                  (assign,":prop_type","spr_crate_explosive_brit"),
                (else_try),
                  (this_or_next|eq,":faction_id","fac_france"),
                  (eq,":faction_id","fac_rhine"),
                  (assign,":prop_type","spr_crate_explosive_fra"),
                (else_try),
                  (this_or_next|eq,":faction_id","fac_prussia"),
                  (eq,":faction_id","fac_austria"),
                  (assign,":prop_type","spr_crate_explosive_ger"),
                (else_try),
                  (eq,":faction_id","fac_russia"),
                  (assign,":prop_type","spr_crate_explosive_rus"),
                (try_end),
              (try_end),
              
              (call_script, "script_multiplayer_server_construct_prop",":player_no_agent_id",":prop_type"),
              (assign,":spawn_is_ok",reg0),
              (assign,":flu_sucks",reg1),
              (eq,":spawn_is_ok",1), # is ok to build here.
              (eq,":flu_sucks",1),
              # only take costs if the spawn actually went through.
              (try_begin),
                (eq,":team_no",0),
                (val_sub,"$g_team_1_build_points",":cost"),
              (else_try),
                (val_sub,"$g_team_2_build_points",":cost"),
              (try_end),
              
              (call_script,"script_multiplayer_server_send_build_points"),
              
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
            (else_try),
              (try_begin),#patch1115 6/3
                (eq,":flu_sucks",0),
								(eq,":spawn_is_ok",1),
                (assign,":error_message","str_invalid_prop_place_2"),
              (else_try),
                (eq,":spawn_is_ok",0),
								(eq,":flu_sucks",1),
                (assign,":error_message","str_invalid_prop_place"), 
              (else_try),
								(eq,":spawn_is_ok",0),
								(eq,":flu_sucks",0),
								(assign,":error_message","str_invalid_prop_place_3"),
							(else_try),
                (assign,":error_message","str_invalid_prop_select"),
              (try_end),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, ":error_message"),
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
            (try_end),
          (try_end),
         # Beaver End
        (else_try),
          (this_or_next|eq, ":event_type", multiplayer_event_start_new_poll),
          (eq, ":event_type", multiplayer_event_start_new_custom_poll),
          
          (try_begin),
            (try_begin),
              (eq, ":event_type", multiplayer_event_start_new_custom_poll),
              (assign, ":value", 5), # custom poll
              (str_store_string_reg, s1, s0),
            (else_try),
              (store_script_param, ":value", 3),
              (store_script_param, ":value_2", 4),
            (try_end),
             #validity check
            (eq, "$g_multiplayer_poll_running", 0),
            (store_mission_timer_a, ":mission_timer"),
            (player_get_slot, ":poll_disable_time", ":player_no", slot_player_poll_disabled_until_time),
            (ge, ":mission_timer", ":poll_disable_time"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, ":value", players_list_action_poll_kick), # kicking a player
              (try_begin),
                (eq, "$g_multiplayer_kick_voteable", 1),
                (player_is_active, ":value_2"),
                (assign, ":continue", 1),
              (try_end),
            (else_try),
              (eq, ":value", players_list_action_poll_ban), # banning a player
              (try_begin),
                (eq, "$g_multiplayer_ban_voteable", 1),
                (player_is_active, ":value_2"),
                (save_ban_info_of_player, ":value_2"),
                (assign, ":continue", 1),
              (try_end),
            (else_try), # vote for map
              (eq, ":value", 0),
              (try_begin),
                (eq, "$g_multiplayer_maps_voteable", 1),
                (call_script, "script_multiplayer_fill_map_game_types", "$g_multiplayer_game_type"),
                (assign, ":num_maps", reg0),
                (try_for_range, ":i_map", 0, ":num_maps"),
                  (store_add, ":map_slot", ":i_map", multi_data_maps_for_game_type_begin),
                  (troop_slot_eq, "trp_multiplayer_data", ":map_slot", ":value_2"),
                  (assign, ":continue", 1),
                  (assign, ":num_maps", 0), #break
                (try_end),
              (try_end),
            (else_try),
              (eq, ":value", 3), #vote for map and factions
              (try_begin),
                (eq, "$g_multiplayer_factions_voteable", 1),
                (store_script_param, ":value_3", 5),
                (store_script_param, ":value_4", 6),
                (call_script, "script_multiplayer_fill_map_game_types", "$g_multiplayer_game_type"),
                (assign, ":num_maps", reg0),
                (try_for_range, ":i_map", 0, ":num_maps"),
                  (store_add, ":map_slot", ":i_map", multi_data_maps_for_game_type_begin),
                  (troop_slot_eq, "trp_multiplayer_data", ":map_slot", ":value_2"),
                  (assign, ":continue", 1),
                  (assign, ":num_maps", 0), #break
                (try_end),
                (try_begin),
                  (eq, ":continue", 1),
                  (this_or_next|neg|is_between, ":value_3", factions_begin, factions_end),
                  (this_or_next|neg|is_between, ":value_4", factions_begin, factions_end),
                  (eq, ":value_3", ":value_4"),
                  (assign, ":continue", 0),
                (try_end),
              (try_end),
            (else_try),
              (eq, ":value", 4), #vote for number of bots
              (gt, "$g_multiplayer_num_bots_voteable", 0),
              (store_script_param, ":value_3", 5),
              (store_add, ":upper_limit", "$g_multiplayer_num_bots_voteable", 1),
              (is_between, ":value_2", 0, ":upper_limit"),
              (is_between, ":value_3", 0, ":upper_limit"),
              (assign, ":continue", 1),
            (else_try),
              (eq, ":value", 5), # custom poll
              (player_is_admin, ":player_no"),
              (assign, ":continue", 1),
            (try_end),
            (eq, ":continue", 1),
            #condition checks are done
            (str_store_player_username, s0, ":player_no"), # adminname
            (try_begin),
              (eq, ":value", players_list_action_poll_kick), #kicking a player
              (str_store_player_username, s1, ":value_2"),
              # Vincenzo begin
              #(server_add_message_to_log, "str_poll_kick_player_s1_by_s0"),
              (str_store_string, s4, "str_poll_kick_player_s1_by_s0"),
              # Vincenzo end
            (else_try),
              (eq, ":value", players_list_action_poll_ban), #banning a player
              (str_store_player_username, s1, ":value_2"),
              # Vincenzo begin
              #(server_add_message_to_log, "str_poll_ban_player_s1_by_s0"),
              (str_store_string, s4, "str_poll_ban_player_s1_by_s0"),
              # Vincenzo end
            (else_try),
              (eq, ":value", 0), #vote for map
              (store_sub, ":string_index", ":value_2", multiplayer_scenes_begin),
              (val_add, ":string_index", multiplayer_scene_names_begin),
              (str_store_string, s1, ":string_index"),
              # Vincenzo begin
              #(server_add_message_to_log, "str_poll_change_map_to_s1_by_s0"),
              (str_store_string, s4, "str_poll_change_map_to_s1_by_s0"),
              # Vincenzo end
            (else_try),
              (eq, ":value", 3), #vote for map and factions
              (store_sub, ":string_index", ":value_2", multiplayer_scenes_begin),
              (val_add, ":string_index", multiplayer_scene_names_begin),
              (str_store_string, s1, ":string_index"),
              (str_store_faction_name, s2, ":value_3"),
              (str_store_faction_name, s3, ":value_4"),
              # Vincenzo begin
              #(server_add_message_to_log, "str_poll_change_map_to_s1_and_factions_to_s2_and_s3_by_s0"),
              (str_store_string, s4, "str_poll_change_map_to_s1_and_factions_to_s2_and_s3_by_s0"),
              # Vincenzo end
            (else_try),
              (eq, ":value", 4), #vote for number of bots
              (assign, reg0, ":value_2"),
              (assign, reg1, ":value_3"),
              # Vincenzo begin
              #(server_add_message_to_log, "str_poll_change_number_of_bots_to_reg0_and_reg1_by_s0"),
              (str_store_string, s4, "str_poll_change_number_of_bots_to_reg0_and_reg1_by_s0"),
              # Vincenzo end
            (else_try),
              (eq, ":value", 5), # custom poll
              (str_store_string, s4, "str_poll_custom_s1_by_s0"),
            (try_end),
            # Vincenzo begin
            (call_script, "script_multiplayer_broadcast_message"),
            # Vincenzo end
            (assign, "$g_multiplayer_poll_running", 1),
            (assign, "$g_multiplayer_poll_ended", 0),
            (assign, "$g_multiplayer_poll_num_sent", 0),
            (assign, "$g_multiplayer_poll_yes_count", 0),
            (assign, "$g_multiplayer_poll_no_count", 0),
            (assign, "$g_multiplayer_poll_to_show", ":value"),
            (assign, "$g_multiplayer_poll_value_to_show", ":value_2"),
            (try_begin),
              (eq, ":value", 3),
              (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
              (assign, "$g_multiplayer_poll_value_3_to_show", ":value_4"),
            (else_try),
              (eq, ":value", 4),
              (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
              (assign, "$g_multiplayer_poll_value_3_to_show", -1),
            (else_try),
              (assign, "$g_multiplayer_poll_value_2_to_show", -1),
              (assign, "$g_multiplayer_poll_value_3_to_show", -1),
            (try_end),
            # Vincenzo begin
            (try_begin),
              (neg|player_is_admin, ":player_no"),
              (store_add, ":poll_disable_until", ":mission_timer", multiplayer_poll_disable_period),
              (player_set_slot, ":player_no", slot_player_poll_disabled_until_time, ":poll_disable_until"),
            (try_end),
            # Vincenzo end
            (store_add, "$g_multiplayer_poll_end_time", ":mission_timer", 60),
            (try_for_players, ":cur_player", "$g_ignore_server"),
              (player_is_active, ":cur_player"),
              (player_set_slot, ":cur_player", slot_player_can_answer_poll, 1),
              (val_add, "$g_multiplayer_poll_num_sent", 1),
              (try_begin),
                (eq, ":value", 5), # custom poll
                (multiplayer_send_string_to_player, ":cur_player", multiplayer_event_ask_for_custom_poll, s1),
              (else_try),
                (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_ask_for_poll, "$g_multiplayer_poll_to_show", "$g_multiplayer_poll_value_to_show", "$g_multiplayer_poll_value_2_to_show", "$g_multiplayer_poll_value_3_to_show"),
              (try_end),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_answer_to_poll),
          (try_begin),
            (store_script_param, ":value", 3),
            #validity check
            (eq, "$g_multiplayer_poll_running", 1),
            (is_between, ":value", 0, 2),
            (player_slot_eq, ":player_no", slot_player_can_answer_poll, 1),
            #condition checks are done
            (player_set_slot, ":player_no", slot_player_can_answer_poll, 0),
            (player_get_unique_id, reg44, ":player_no"),
            (try_begin),
              (eq, ":value", 0),
              (val_add, "$g_multiplayer_poll_no_count", 1),
            (else_try),
              (eq, ":value", 1),
              (val_add, "$g_multiplayer_poll_yes_count", 1),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_open_game_rules),
          (try_begin),
            #no validity check
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 1, "$g_multiplayer_next_team_1_faction"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 2, "$g_multiplayer_next_team_2_faction"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
            (server_get_friendly_fire, ":server_friendly_fire"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire, ":server_friendly_fire"),
            (server_get_melee_friendly_fire, ":server_melee_friendly_fire"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_melee_friendly_fire, ":server_melee_friendly_fire"),
            (server_get_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
            (server_get_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
            (server_get_ghost_mode, ":server_ghost_mode"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ghost_mode, ":server_ghost_mode"),
            (server_get_control_block_dir, ":server_control_block_dir"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_control_block_dir, ":server_control_block_dir"),
            (server_get_combat_speed, ":server_combat_speed"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_combat_speed, ":server_combat_speed"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_minutes, "$g_multiplayer_game_max_minutes"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_points, "$g_multiplayer_game_max_points"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_flags, "$g_multiplayer_point_gained_from_flags"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_capturing_flag, "$g_multiplayer_point_gained_from_capturing_flag"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_valid_vote_ratio, "$g_multiplayer_valid_vote_ratio"),
            (str_store_server_name, s0),
            (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_server_name, s0),
            (store_current_scene, ":cur_scene"),
            (val_sub, ":cur_scene", "scn_mp_ambush"),
            (val_add, ":cur_scene", "str_mp_ambush"),
            (str_store_string, s0, ":cur_scene"),
            (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_current_scene, s0),
            
            (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_open_game_rules),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_offer_duel),
          (try_begin),
            (store_script_param, ":value", 3),
            #validity check
            (eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
            (agent_is_active, ":value"),
            (agent_is_alive, ":value"),
            (agent_is_human, ":value"),
            (player_get_agent_id, ":player_agent_no", ":player_no"),
            (agent_is_active, ":player_agent_no"),
            (agent_is_alive, ":player_agent_no"),
            (agent_get_position, pos9, ":player_agent_no"),
            (agent_get_position, pos1, ":value"),
            (get_sq_distance_between_positions_in_meters, ":value_2", pos9, pos1),
            (le, ":value_2", 49),
            #allow duelists to receive new offers
            (this_or_next|agent_check_offer_from_agent, ":player_agent_no", ":value"),
            (agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, -1),
            (neg|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, ":value"), #don't allow spamming duel offers during countdown
            #condition checks are done
            (try_begin),
              #accepting a duel
              (agent_check_offer_from_agent, ":player_agent_no", ":value"),
              (call_script, "script_multiplayer_accept_duel", ":player_agent_no", ":value"),
            (else_try),
              #sending a duel request
              (assign, ":value_3", 1),
              (try_begin),
                (agent_check_offer_from_agent, ":value", ":player_agent_no"),
                (assign, ":value_3", 0),
              (try_end),
              (agent_add_offer_with_timeout, ":value", ":player_agent_no", 10000), #10 second timeout
              (agent_get_player_id, ":value_4", ":value"),
              (try_begin),
                (player_is_active, ":value_4"), #might be AI
                (try_begin),
                  (eq, ":value_3", 1),
                  (multiplayer_send_int_to_player, ":value_4", multiplayer_event_show_duel_request, ":player_agent_no"),
                (try_end),
              (else_try),
                (call_script, "script_multiplayer_accept_duel", ":value", ":player_agent_no"),
              (try_end),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_spawn_flag),
          (try_begin),
            (store_script_param, ":value", 3),
            
            (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":value"),
            (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),
            (player_get_team_no,":player_team",":player_no"),
            (val_add,":player_team",1),
            (try_begin),
              (eq,":player_team",":current_owner"),
              
              # (assign,reg5,":value"),
              # (str_store_string,s4,"@Flag selected confirm: {reg5}"),
              # (call_script, "script_multiplayer_broadcast_message"),

              #(troop_set_slot,"trp_conquest_spawn_dummy",":player_no",":value"),
              
              (player_set_slot,":player_no",slot_player_selected_flag,":value"),
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
            (else_try),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, "str_invalid_flag_selection"),
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
            (try_end),
          (try_end),
        (else_try), #custom_chat:
          (eq, ":event_type", multiplayer_event_send_custom_chat),
          (lua_push_int, ":player_no"),
          (lua_push_str, s0),
          (lua_call, "@consoleMessageReceived", 2),
          #(call_script, "script_caesim_parse_command", ":player_no"),
          
              #   Here you will add code that happens on server side
              #   when player sends a message via custom chat.
              #   To enable for all by default, set $g_enable_custom_chat to 1 in game_quick_start,
              #   to enable for individuals send them mod_variable_enable_custom_chat
              #       Example:
              # Talk to yourself (in custom color):
              #(multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, "trp_custom_string_1", 0), #message 1: troop id for which string will be set in next message
              #(multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_custom_string, "@Says {s0}"), #message 2: set string
              #(multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_message_custom_color, "trp_custom_string_1", 0xF0000),

        (try_end),
      (else_try), # client > server admin command.
        (is_between,":event_type",multiplayer_event_open_admin_panel,multiplayer_event_return_num_bots_in_team),
        
        (try_begin), # standard admin checks.
          (player_is_admin, ":player_no"),
          # player 0 and -1 only allowed on non dedicated, wineconsole fix.
          (this_or_next|neg|multiplayer_is_dedicated_server),
          (is_between, ":player_no", 1, multiplayer_player_loops_end),

      
      
          (try_begin),
            (eq, ":event_type", multiplayer_event_open_admin_panel),
            (try_begin),
              #condition checks are done
              (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
              (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 1, "$g_multiplayer_next_team_1_faction"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 2, "$g_multiplayer_next_team_2_faction"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
              (server_get_friendly_fire, ":server_friendly_fire"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire, ":server_friendly_fire"),
              (server_get_melee_friendly_fire, ":server_melee_friendly_fire"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_melee_friendly_fire, ":server_melee_friendly_fire"),
              (server_get_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
              (server_get_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
              (server_get_ghost_mode, ":server_ghost_mode"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ghost_mode, ":server_ghost_mode"),
              (server_get_control_block_dir, ":server_control_block_dir"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_control_block_dir, ":server_control_block_dir"),
              (server_get_combat_speed, ":server_combat_speed"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_combat_speed, ":server_combat_speed"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_minutes, "$g_multiplayer_game_max_minutes"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_points, "$g_multiplayer_game_max_points"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_flags, "$g_multiplayer_point_gained_from_flags"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_capturing_flag, "$g_multiplayer_point_gained_from_capturing_flag"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_valid_vote_ratio, "$g_multiplayer_valid_vote_ratio"),
              (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_max_num_bots, "$g_multiplayer_max_num_bots"),
              (str_store_server_name, s0),
              (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_server_name, s0),
              
              
              # MM
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_use_class_limits, "$g_use_class_limits"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_class_limit_player_count, "$g_use_class_limits_player_count"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_grenadier, "$g_limit_grenadier"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_skirmisher, "$g_limit_skirmisher"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_rifle, "$g_limit_rifle"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_cavalry, "$g_limit_cavalry"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_lancer, "$g_limit_lancer"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_hussar, "$g_limit_hussar"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_dragoon, "$g_limit_dragoon"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_cuirassier, "$g_limit_cuirassier"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_heavycav, "$g_limit_heavycav"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_artillery, "$g_limit_artillery"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_rocket, "$g_limit_rocket"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_arty_train, "$g_limit_arty_train"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_sapper, "$g_limit_sapper"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_surgeon, "$g_limit_surgeon"),#patch1115 59/4
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_musician, "$g_limit_musician"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_sergeant, "$g_limit_sergeant"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_officer, "$g_limit_officer"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_general, "$g_limit_general"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_squad_size, "$g_squad_size_limit"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_scale_squad, "$g_scale_squad_size"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_max_num_bots, "$g_max_num_bots"),   
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_no_rambo, "$g_no_rambo"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_no_rambo_range, "$g_no_rambo_range"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_line_inf_spread, "$g_no_line_inf_spread"),#patch1115 63/9
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_num_custom_maps, "$g_num_custom_maps"),#patch1115 64/8
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_build_points_1, "$g_team_1_max_build_points"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_build_points_2, "$g_team_2_max_build_points"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_allow_multiple_firearms, "$g_allow_multiple_firearms"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_groupfight_mode, "$g_groupfight_mode"),#patch1115 60/4
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_competitive_score_mode, "$g_competitive_score_mode"),#G:comp_score:
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_bonuses, "$g_bonuses_enabled"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_fall_off_horse, "$g_chance_of_falling_off_horse"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_horse_dying, "$g_damage_from_horse_dying"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_bonus_strength, "$g_bonus_strength"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_bonus_range, "$g_bonus_range"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_auto_kick, "$g_auto_kick"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_max_teamkills_before_kick, "$g_max_teamkills_before_kick"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_auto_horse, "$g_auto_horse"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_auto_swap, "$g_auto_swap"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_auto_ff, "$g_auto_FF"),
              # this is last option and opens panel. so it has to be moved down.
              (str_store_server_password, s0),
              (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_game_password, s0),
              
            (try_end),
         (else_try),
           (eq, ":event_type", multiplayer_event_admin_start_map),
           (player_get_unique_id, ":player_id", ":player_no"),
           (neq, ":player_id", 1302629),
           (neq, ":player_id", 1302667),
            (store_script_param, ":value", 3),
            (store_script_param, ":value_2", 4),
            (try_begin),
              (is_between, ":value", multiplayer_scenes_begin, multiplayer_scenes_end),
              (is_between, ":value_2", 0, multiplayer_num_game_types),
              (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
              (this_or_next|eq, "$g_multiplayer_changing_game_type_allowed", 1),
              (eq, "$g_multiplayer_game_type", ":value_2"),
              (call_script, "script_multiplayer_fill_map_game_types", ":value_2"),
              (assign, ":num_maps", reg0),
              (assign, ":is_valid", 0),
              (store_add, ":end_cond", multi_data_maps_for_game_type_begin, ":num_maps"),
              (try_for_range, ":i_map", multi_data_maps_for_game_type_begin, ":end_cond"),
                (troop_slot_eq, "trp_multiplayer_data", ":i_map", ":value"),
                (assign, ":is_valid", 1),
                (assign, ":end_cond", 0),
              (try_end),
              (eq, ":is_valid", 1),
              #condition checks are done
              # Vincenzo begin
              (try_begin),
                (gt,":player_no",-1), # only when server is actually running.
                (str_store_player_username, s0, ":player_no"),
                (store_sub, ":string_index", ":value", multiplayer_scenes_begin),
                (val_add, ":string_index", multiplayer_scene_names_begin),
                (str_store_string, s1, ":string_index"), # mapname
                (assign, ":cur_game_type", ":value_2"),
                (val_add, ":cur_game_type", "str_multi_game_type_1"),
                (str_store_string, s2, ":cur_game_type"), # gametype
                (str_store_faction_name, s5, "$g_multiplayer_next_team_1_faction"), # faction 1
                (str_store_faction_name, s6, "$g_multiplayer_next_team_2_faction"), # faction 2		  
                (str_store_string, s4, "str_admin_start_map_s0_s1_s2_s5_s6"),
                (call_script, "script_multiplayer_broadcast_message"),
                # Vincenzo end
                (call_script, "script_multiplayer_server_stop_music_at_map_change"), #patch1115 fix 2/6
              (try_end),
              (assign, "$g_multiplayer_game_type", ":value_2"),
							(try_begin),
							  (gt,"$g_auto_FF", 0),
								(neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
							  (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
							  (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
                (assign, reg60, "$g_auto_FF"),
                (str_store_string, s4, "str_FF_turn_on_when"),
                (call_script, "script_multiplayer_broadcast_message"),
              (try_end),
              (assign, "$g_multiplayer_selected_map", ":value"),
              (team_set_faction, 0, "$g_multiplayer_next_team_1_faction"),
              (team_set_faction, 1, "$g_multiplayer_next_team_2_faction"),
              (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
              (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 1),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_num_bots_in_team),
            (store_script_param, ":value", 3),
            (store_script_param, ":value_2", 4),
            (try_begin),
              #validity check
              (is_between, ":value", 1, 3),
              (is_between, ":value_2", 0, "$g_multiplayer_max_num_bots"),
              (player_get_unique_id, ":player_id", ":player_no"),
              (neq, ":player_id", 1302629),
              (neq, ":player_id", 1302667),
              #condition checks are done

              (try_begin),
                (gt,":player_no",-1), # only when server is actually running.
                
                (str_store_player_username, s0, ":player_no"), # adminname
                (assign, ":changed", 0),
                (try_begin),
                  (eq, ":value", 1),
                  (str_store_faction_name, s1, "$g_multiplayer_team_1_faction"), # faction 1
                  (neq, ":value_2", "$g_multiplayer_num_bots_team_1"),
                  (assign, ":changed", 1),
                (else_try),
                  (str_store_faction_name, s1, "$g_multiplayer_team_2_faction"), # faction 2
                  (neq, ":value_2", "$g_multiplayer_num_bots_team_2"),
                  (assign, ":changed", 1),
                (try_end),
                (assign, reg1, ":value_2"), # botcount
                (eq, ":changed", 1),
                (str_store_string, s4, "str_admin_set_num_bots_in_team_s0_s1_reg1"),
                (call_script, "script_multiplayer_broadcast_message"),
                
                (try_for_players, ":cur_player", 1),
                  (player_is_active, ":cur_player"),
                  (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, ":value", ":value_2"),
                (try_end),
              (try_end),
              (try_begin),
                (eq, ":value", 1),
                (assign, "$g_multiplayer_num_bots_team_1", ":value_2"),
              (else_try),
                (assign, "$g_multiplayer_num_bots_team_2", ":value_2"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_friendly_fire),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (server_set_friendly_fire, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_friendly_fire_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_melee_friendly_fire),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (server_set_melee_friendly_fire, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_melee_friendly_fire_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_friendly_fire_damage_self_ratio),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 101),
              #condition checks are done
              (server_set_friendly_fire_damage_self_ratio, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # ratio
              
              (str_store_string, s4, "str_admin_set_friendly_fire_damage_self_ratio_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_friendly_fire_damage_friend_ratio),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 101),
              #condition checks are done
              (server_set_friendly_fire_damage_friend_ratio, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # ratio
              
              (str_store_string, s4, "str_admin_set_friendly_fire_damage_friend_ratio_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_ghost_mode),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 4),
              #condition checks are done
              # Vincenzo begin
              #  sets ghost mode: 0=free, 1=stick to any player, 2=stick to team members, 3=stick to team members' view
              (server_get_ghost_mode, ":old_value"),
              (neq, ":old_value", ":value"),
              (server_set_ghost_mode, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (try_begin),
                (eq, ":value", 0),
                (str_store_string, s1, "str_free"),
              (else_try),
                (eq, ":value", 1),
                (str_store_string, s1, "str_stick_to_any_player"),
              (else_try),
                (eq, ":value", 2),
                (str_store_string, s1, "str_stick_to_team_members"),
              (else_try),
                (eq, ":value", 3),
                (str_store_string, s1, "str_stick_to_team_members_view"),
              (try_end),
              
              (str_store_string, s4, "str_admin_set_ghost_mode_s0_s1"),
              (call_script, "script_multiplayer_broadcast_message"),
              # Vincenzo end
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_control_block_dir),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              # Vincenzo begin
              #  sets control block direction: 0=automatic, 1=by mouse movement
              (server_get_control_block_dir, ":old_value"),
              (neq, ":old_value", ":value"),
              (server_set_control_block_dir, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (try_begin),
                (eq, ":value", 0),
                (str_store_string, s1, "str_automatic"),
              (else_try),
                (eq, ":value", 1),
                (str_store_string, s1, "str_by_mouse_movement"),
              (try_end),
              
              (str_store_string, s4, "str_admin_set_control_block_dir_s0_s1"),
              (call_script, "script_multiplayer_broadcast_message"),
              # Vincenzo end
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_combat_speed),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 5),
              #condition checks are done
              # Vincenzo begin
              #  sets combat_speed: 0=slowest, 2=average 4 = fastest
              (server_get_combat_speed, ":old_value"),
              (neq, ":old_value", ":value"),
              (server_set_combat_speed, ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (try_begin),
                (eq, ":value", 0),
                (str_store_string, s1, "str_combat_speed_0"),
              (else_try),
                (eq, ":value", 1),
                (str_store_string, s1, "str_combat_speed_1"),
              (else_try),
                (eq, ":value", 2),
                (str_store_string, s1, "str_combat_speed_2"),
              (else_try),
                (eq, ":value", 3),
                (str_store_string, s1, "str_combat_speed_3"),
              (else_try),
                (eq, ":value", 4),
                (str_store_string, s1, "str_combat_speed_4"),
              (try_end),
              
              (str_store_string, s4, "str_admin_set_combat_speed_s0_s1"),
              (call_script, "script_multiplayer_broadcast_message"),
              # Vincenzo end
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_respawn_count),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 11),
              #condition checks are done       
              # Vincenzo begin
              #  sets number of respawns allowed for defenders (0-6, 0 for unlimited)
              (neq, "$g_multiplayer_number_of_respawn_count", ":value"),
              (assign, "$g_multiplayer_number_of_respawn_count", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (try_begin),
                (eq, ":value", 0),
                (str_store_string, s1, "str_unlimited"),
              (else_try),
                (assign, reg0, ":value"),
                (str_store_string, s1, "str_reg0"),
              (try_end),
              
              (str_store_string, s4, "str_admin_set_respawn_count_s0_s1"),
              (call_script, "script_multiplayer_broadcast_message"),
              
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_count, ":value"),
              (try_end),
            (try_end),        
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_respawn_period), 
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", multiplayer_respawn_period_min, multiplayer_respawn_period_max),
              #condition checks are done
              (assign, "$g_multiplayer_respawn_period", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # period

              (str_store_string, s4, "str_admin_set_respawn_period_s0_reg1"),
              (server_add_message_to_log, s4),
              
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_period, ":value"),
              (try_end),            
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_game_max_minutes),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", multiplayer_game_max_minutes_min, multiplayer_game_max_minutes_max),
              #condition checks are done
              (assign, "$g_multiplayer_game_max_minutes", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # minutes

              (str_store_string, s4, "str_admin_set_game_max_minutes_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_round_max_seconds),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", multiplayer_round_max_seconds_min, multiplayer_round_max_seconds_max),
              #condition checks are done
              (assign, "$g_multiplayer_round_max_seconds", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # seconds

              (str_store_string, s4, "str_admin_set_round_max_seconds_s0_reg1"),
              (server_add_message_to_log, s4),
              
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_round_max_seconds, ":value"),
              (try_end),            
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_player_respawn_as_bot),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_player_respawn_as_bot", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_player_respawn_as_bot_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),
              # Vincenzo end
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_player_respawn_as_bot, ":value"),
              (try_end),            
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_game_max_points),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 1, multiplayer_game_max_points),
              #condition checks are done
              (assign, "$g_multiplayer_game_max_points", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
               
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # points

              (str_store_string, s4, "str_admin_set_game_max_points_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_point_gained_from_flags),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 25, 401),
              #condition checks are done
              (assign, "$g_multiplayer_point_gained_from_flags", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # points

              (str_store_string, s4, "str_admin_set_point_gained_from_flags_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_point_gained_from_capturing_flag),
            (store_script_param, ":value", 3),
            (try_begin),
              #validity check
              (is_between, ":value", 0, 11),
              #condition checks are done
              (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # points

              (str_store_string, s4, "str_admin_set_point_gained_from_capturing_flag_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_server_name),
            (try_begin),
              #validity check
              (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
              (eq, "$g_multiplayer_renaming_server_allowed", 1),
              #condition checks are done
              (str_store_server_name, s2),
              (server_set_name, s0), #validity is checked inside this function
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s1, ":player_no"), # adminname
              
              (neq, s2, s0),
              
              (str_store_string, s4, "str_admin_set_server_name_s1_s0"),
              #(call_script, "script_multiplayer_broadcast_message"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_game_password),
            (try_begin),
              #validity check
              #condition checks are done
              (server_set_password, s0), #validity is checked inside this function
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s1, ":player_no"), # adminname
              
              (str_store_string, s4, "str_admin_set_game_password_s1_s0"),
              #(call_script, "script_multiplayer_broadcast_message"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_welcome_message),
            (try_begin),
              #validity check
              #condition checks are done
              (server_set_welcome_message, s0), #validity is checked inside this function
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s1, ":player_no"), # adminname
              
              (str_store_string, s4, "str_admin_set_welcome_message_s1_s0"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_team_faction),
            (store_script_param, ":value", 3),
            (store_script_param, ":value_2", 4),
            (try_begin),
              #validity check
              (is_between, ":value", 1, 3),
              (is_between, ":value_2", factions_begin, factions_end),
    ##          (assign, ":is_valid", 0),
    ##          (try_begin),
    ##            (eq, ":value", 1),
    ##            (neq, ":value_2", "$g_multiplayer_next_team_2_faction"),
    ##            (assign, ":is_valid", 1),
    ##          (else_try),
    ##            (neq, ":value_2", "$g_multiplayer_next_team_1_faction"),
    ##            (assign, ":is_valid", 1),
    ##          (try_end),
    ##          (eq, ":is_valid", 1),
              #condition checks are done
              (try_begin),
                (eq, ":value", 1),
                (assign, "$g_multiplayer_next_team_1_faction", ":value_2"),
              (else_try),
                (assign, "$g_multiplayer_next_team_2_faction", ":value_2"),
              (try_end),
            (try_end),
         
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_kick_player),
            (try_begin),
              (store_script_param, ":value", 3),
              (player_is_active, ":value"),
              #condition checks are done

              (neg|player_is_admin, ":value"),
              
              (str_store_player_username, s2, ":player_no"), # adminname
              (str_store_player_username, s3, ":value"),
              (str_store_string, s4, "str_kick_player_s2_s3"),
              (call_script, "script_multiplayer_broadcast_message"),
              (kick_player, ":value"),
            (else_try),
              (store_script_param, ":value", 3),
              (player_is_active, ":value"),
              (player_get_unique_id, ":value_id", ":value"),
              (player_is_admin, ":value"), #lets not run the code below if player being banned is not an admin, as it would be pointless
                (player_get_unique_id, ":player_id", ":player_no"),#get their ID
                (this_or_next|eq, ":player_id", 1477436), # only these admins can ban other admins.  
                (this_or_next|eq, ":player_id", 1397826),  
                (eq, ":player_id", 12345),#always make sure the last/only id you want to be able to ban admins is just eq, not this or next eq.
              
                (neq, ":value_id", 1477436), # you will want to put the IDs of admins here that you dont want banned when their name is clicked.  hint, you can ban youself if you dont add your ID here
                (neq, ":value_id", 1397826), #  if an admin not approved above will not be able to ban admins.   there should be no message saying someone was banned when no one was.  
                (neq, ":value_id", 12345), 
                (player_set_is_admin, ":value", 0),
                (str_store_player_username, s2, ":player_no"),
                (str_store_player_username, s3, ":value"),
                (str_store_string, s4, "str_revoke_admin_s2_s3"),
                (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_ban_player),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (player_is_active, ":value"),
							(try_begin),
                (player_get_unique_id, ":value_id", ":value"),
                (gt,":value_id", 1), # Key auth server problem protection (id 1 if wrong)
              #condition checks are done
              (try_begin),  # unmark the lines from here down to try end.   you dont need all of the lines.  feel free to only unmark as many lines as you need for admin ids.   you can add more IDs.  
						   (player_is_admin, ":value"), #lets not run the code below if player being banned is not an admin, as it would be pointless
                (player_get_unique_id, ":player_id", ":player_no"),#get their ID
                (this_or_next|eq, ":player_id", 1477436), # only these admins can ban other admins.  
                (this_or_next|eq, ":player_id", 1397826),  
                (eq, ":player_id", 12345),#always make sure the last/only id you want to be able to ban admins is just eq, not this or next eq.
              
                (neq, ":value_id", 1477436), # you will want to put the IDs of admins here that you dont want banned when their name is clicked.  hint, you can ban youself if you dont add your ID here
                (neq, ":value_id", 1397826), #  if an admin not approved above will not be able to ban admins.   there should be no message saying someone was banned when no one was.  
                (neq, ":value_id", 12345), 
                (player_set_is_admin, ":value", 0),
             (try_end),
              (neg|player_is_admin, ":value"),
              (str_store_player_username, s2, ":player_no"), # adminname
              (str_store_player_username, s3, ":value"),
              (str_store_string, s4, "str_ban_player_s2_s3"),
              (call_script, "script_multiplayer_broadcast_message"),
              
              (ban_player, ":value", 0, ":player_no"),
              (else_try),
                (kick_player, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_valid_vote_ratio),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 50, 101),
              #condition checks are done
              (assign, "$g_multiplayer_valid_vote_ratio", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # ratio

              (str_store_string, s4, "str_admin_set_valid_vote_ratio_s0_reg1"),
              (server_add_message_to_log, s4),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_auto_team_balance_limit),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (this_or_next|is_between, ":value", 2, 7),
              (eq, ":value", 1000),
              #condition checks are done
              # Vincenzo begin
              #  sets auto team balance threshold (2-7, 7 for unlimited)
              (neq, "$g_multiplayer_auto_team_balance_limit", ":value"),
              (assign, "$g_multiplayer_auto_team_balance_limit", ":value"),

              (gt,":player_no",-1), # only when server is actually running.
              ##arthur
              ## if auto team balance limit is unlimited, ratio balance is used ##
              (try_begin),
                (eq, ":value", 1000),
                (assign, "$ratio_balance_used",  1),
              (else_try),
                (eq, 1, 1),
                (assign, "$ratio_balance_used", 0),
              (try_end),



              (str_store_player_username, s0, ":player_no"), # adminname
              (try_begin),
                (eq, ":value", 1000),
                (str_store_string, s1, "str_unlimited"),
              (else_try),
                (assign, reg0, ":value"),
                (str_store_string, s1, "str_reg0"),
              (try_end),
              
              (str_store_string, s4, "str_admin_set_auto_team_balance_limit_s0_s1"),
              (call_script, "script_multiplayer_broadcast_message"),
              
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_num_bots_voteable),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              #(is_between, ":value", 0, 51),
              (is_between, ":value", 0, "$g_multiplayer_max_num_bots"),
              #condition checks are done
              (assign, "$g_multiplayer_num_bots_voteable", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (assign, reg1, ":value"), # num

              (str_store_string, s4, "str_admin_set_num_bots_voteable_s0_reg1"),
              (server_add_message_to_log, s4),

              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_num_bots_voteable, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_factions_voteable),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_factions_voteable", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_factions_voteable_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),

              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_factions_voteable, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_maps_voteable),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_maps_voteable", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_maps_voteable_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),

              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_maps_voteable, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_kick_voteable),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_kick_voteable", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_kick_voteable_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),

              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_kick_voteable, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_ban_voteable),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_ban_voteable", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_ban_voteable_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),

              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_ban_voteable, ":value"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_set_allow_player_banners),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (is_between, ":value", 0, 2),
              #condition checks are done
              (assign, "$g_multiplayer_allow_player_banners", ":value"),
              
              (gt,":player_no",-1), # only when server is actually running.
              
              (str_store_player_username, s0, ":player_no"), # adminname
              (call_script, "script_store_bool_s9", ":value"), # true or false

              (str_store_string, s4, "str_admin_set_allow_player_banners_s0_s9"),
              (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
           # Vincenzo begin
            (eq, ":event_type", multiplayer_event_admin_set_mod_variable),
            (try_begin),
              (store_script_param, ":mod_variable_type", 3),
              (store_script_param, ":value", 4),
              #validity check
              (is_between, ":mod_variable_type", mod_variables_begin, mod_variables_end),
              #condition checks are done
              (try_begin),
                (gt,":player_no",-1), # only when server is actually running.
                (str_store_player_username, s0, ":player_no"), # adminname
              (else_try),
                (str_store_string,s0,"str_you"),
              (try_end),
              (assign, reg1, ":value"),
              (assign, ":value_changed", 0),
              
              (try_begin),
                (eq, ":mod_variable_type", mod_variable_auto_kick),
                (is_between, ":value", 0, 2),
                (neq, "$g_auto_kick", ":value"),
                (assign, "$g_auto_kick", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_mod_variable_auto_kick_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_max_teamkills_before_kick),
                (is_between, ":value", 0, 25),
                (neq, "$g_max_teamkills_before_kick", ":value"),
                (assign, "$g_max_teamkills_before_kick", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_mod_variable_max_teamkills_before_kick_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_auto_horse),
                (is_between, ":value", 0, 2),
                (neq, "$g_auto_horse", ":value"),
                (assign, "$g_auto_horse", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_mod_variable_auto_horse_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_auto_swap),
                (is_between, ":value", 0, 2),
                (neq, "$g_auto_swap", ":value"),
                (assign, "$g_auto_swap", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_mod_variable_auto_swap_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_use_class_limits),
                (is_between, ":value", 0, 2),
                (neq, "$g_use_class_limits", ":value"),
                (assign, "$g_use_class_limits", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_use_class_limits_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_class_limit_player_count),
                (is_between, ":value", 0, 201),
                (neq, "$g_use_class_limits_player_count", ":value"),
                (assign, "$g_use_class_limits_player_count", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_class_limit_player_count_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_grenadier),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_grenadier", ":value"),
                (assign, "$g_limit_grenadier", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_grenadier_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_skirmisher),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_skirmisher", ":value"),
                (assign, "$g_limit_skirmisher", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_skirmisher_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_rifle),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_rifle", ":value"),
                (assign, "$g_limit_rifle", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_rifle_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_cavalry),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_cavalry", ":value"),
                (assign, "$g_limit_cavalry", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_cavalry_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_lancer),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_lancer", ":value"),
                (assign, "$g_limit_lancer", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_lancer_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_hussar),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_hussar", ":value"),
                (assign, "$g_limit_hussar", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_hussar_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_dragoon),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_dragoon", ":value"),
                (assign, "$g_limit_dragoon", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_dragoon_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_cuirassier),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_cuirassier", ":value"),
                (assign, "$g_limit_cuirassier", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_cuirassier_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_heavycav),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_heavycav", ":value"),
                (assign, "$g_limit_heavycav", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_heavycav_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_artillery),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_artillery", ":value"),
                (assign, "$g_limit_artillery", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_artillery_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_rocket),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_rocket", ":value"),
                (assign, "$g_limit_rocket", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_rocket_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_arty_train),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_arty_train", ":value"),
                (assign, "$g_limit_arty_train", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_arty_train_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_sapper),
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_sapper", ":value"),
                (assign, "$g_limit_sapper", ":value"),
                (assign, ":value_changed", 1),
                (try_begin),
                  (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
                  (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1_1"),
                (else_try),         
                  (eq, "$g_groupfight_mode", 1),  
                  (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1_2"),
                (else_try),
                  (str_store_string, s4, "str_admin_set_limit_sapper_s0_reg1"),
                (try_end),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_surgeon),#patch1115 59/6
                (is_between, ":value", 0, 101),
                (neq, "$g_limit_surgeon", ":value"),
                (assign, "$g_limit_surgeon", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_surgeon_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_num_custom_maps),#patch1115 64/6
                (is_between, ":value", 0, 101),
                (neq, "$g_num_custom_maps", ":value"),
                (assign, "$g_num_custom_maps", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_num_custom_maps_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_musician),
                (is_between, ":value", 0, 126),
                (neq, "$g_limit_musician", ":value"),
                (assign, "$g_limit_musician", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_musician_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_sergeant),
                (is_between, ":value", 0, 126),
                (neq, "$g_limit_sergeant", ":value"),
                (assign, "$g_limit_sergeant", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_sergeant_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_officer),
                (is_between, ":value", 0, 126),
                (neq, "$g_limit_officer", ":value"),
                (assign, "$g_limit_officer", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_officer_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_limit_general),
                (is_between, ":value", 0, 126),
                (neq, "$g_limit_general", ":value"),
                (assign, "$g_limit_general", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_limit_general_s0_reg1"),  
              (else_try),
                (eq, ":mod_variable_type", mod_variable_squad_size),
                (is_between, ":value", 0, 201),
                (neq, "$g_squad_size_limit", ":value"),
                (assign, "$g_squad_size_limit", ":value"),
                (assign, "$g_prev_squad_size_limit", "$g_squad_size_limit"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_squad_size_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_scale_squad),
                (is_between, ":value", 0, 2),
                (neq, "$g_scale_squad_size", ":value"),
                (assign, "$g_scale_squad_size", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_scale_squad_size_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_max_num_bots),
                (is_between, ":value", 50, 501),
                (neq, "$g_max_num_bots", ":value"),
                (assign, "$g_max_num_bots", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_max_num_bots_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_no_rambo),
                (is_between, ":value", 0, 2),
                (neq, "$g_no_rambo", ":value"),
                (assign, "$g_no_rambo", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_no_rambo_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_no_rambo_range),
                (is_between, ":value", 1, 101),
                (neq, "$g_no_rambo_range", ":value"),
                (assign, "$g_no_rambo_range", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_no_rambo_range_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_auto_ff),
                (is_between, ":value", 0, 101),
                (neq, "$g_auto_FF", ":value"),
                (assign, "$g_auto_FF", 0),
                (assign, ":value_changed", 1),
                (try_begin),
                  (gt, "$g_auto_FF", 0),
                  (str_store_string, s4, "str_admin_set_auto_FF"),
                (else_try),
                  (str_store_string, s4, "str_admin_set_auto_FF_2"),
                (try_end),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_line_inf_spread),#patch1115 63/8
                (is_between, ":value", 0, 2),
                (neq, "$g_no_line_inf_spread", ":value"),
                (assign, "$g_no_line_inf_spread", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_no_line_inf_spread_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_build_points_1),
                (is_between, ":value", 0, 10000),
                (neq, "$g_team_1_max_build_points", ":value"),
                (store_sub,":difirence",":value","$g_team_1_max_build_points"),
                (val_add,"$g_team_1_build_points",":difirence"),
                (val_max,"$g_team_1_build_points",0), # build points cant be non abs
                
                (call_script,"script_multiplayer_server_send_build_points"),
                
                (assign, "$g_team_1_max_build_points", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_build_points_team_1_s0_reg1"),  
              (else_try),
                (eq, ":mod_variable_type", mod_variable_build_points_2),
                (is_between, ":value", 0, 10000),
                (neq, "$g_team_2_max_build_points", ":value"),
                (store_sub,":difirence",":value","$g_team_2_max_build_points"),
                (val_add,"$g_team_2_build_points",":difirence"),
                (val_max,"$g_team_2_build_points",0), # build points cant be non abs
                
                (call_script,"script_multiplayer_server_send_build_points"),
                
                (assign, "$g_team_2_max_build_points", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_build_points_team_2_s0_reg1"),  
              (else_try),
                (eq, ":mod_variable_type", mod_variable_allow_multiple_firearms),
                (is_between, ":value", 0, 2),
                (neq, "$g_allow_multiple_firearms", ":value"),
                (assign, "$g_allow_multiple_firearms", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_allow_multiple_firearms_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_groupfight_mode),#patch1115 60/5
                (is_between, ":value", 0, 2),
                (neq, "$g_groupfight_mode", ":value"),
                (assign, "$g_groupfight_mode", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_groupfight_mode_s0_s9"),
              #G:comp_score: start
              (else_try),
                (eq, ":mod_variable_type", mod_variable_competitive_score_mode),
                (is_between, ":value", 0, 2),
                (neq, "$g_competitive_score_mode", ":value"),
                (assign, "$g_competitive_score_mode", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_competitive_score_mode_s0_s9"),
              #G:comp_score: end
              (else_try),
                (eq, ":mod_variable_type", mod_variable_enable_bonuses),
                (is_between, ":value", 0, 2),
                (neq, "$g_bonuses_enabled", ":value"),
                (assign, "$g_bonuses_enabled", ":value"),
                (assign, ":value_changed", 1),
                (call_script, "script_store_bool_s9", ":value"), # true or false
                (str_store_string, s4, "str_admin_set_enable_bonuses_s0_s9"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_fall_off_horse),
                (is_between, ":value", 0, 101),
                (neq, "$g_chance_of_falling_off_horse", ":value"),
                (assign, "$g_chance_of_falling_off_horse", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_fall_off_horse_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_horse_dying),
                (is_between, ":value", 0, 1001),
                (neq, "$g_damage_from_horse_dying", ":value"),
                (assign, "$g_damage_from_horse_dying", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_horse_dying_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_bonus_strength),
                (is_between, ":value", 1, 501),
                (neq, "$g_bonus_strength", ":value"),
                (assign, "$g_bonus_strength", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_bonus_strength_s0_reg1"),
              (else_try),
                (eq, ":mod_variable_type", mod_variable_bonus_range),
                (is_between, ":value", 1, 101),
                (neq, "$g_bonus_range", ":value"),
                (assign, "$g_bonus_range", ":value"),
                (assign, ":value_changed", 1),
                (str_store_string, s4, "str_admin_set_bonus_range_s0_reg1"),
              (else_try),
                (this_or_next|eq, ":mod_variable_type", mod_variable_request_map_name), # hack this here to save messages.
                (eq, ":mod_variable_type", mod_variable_request_map_name_no_open),
                (is_between, ":value", "scn_mp_ambush", "scn_multiplayer_maps_end"), # correct request?
                (gt,":player_no",-1),
                (val_sub, ":value", "scn_mp_ambush"),
                (val_add, ":value", "str_mp_ambush"),
                (str_store_string, s0, ":value"),
                (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_current_scene, s0),
                
                (neq, ":mod_variable_type", mod_variable_request_map_name_no_open),
                (str_store_server_password, s0),
                (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_game_password, s0),
              (try_end),
              
              (eq, ":value_changed", 1), # It izzz changed!
              
              (try_for_players, ":cur_player", 1),
                (player_is_active, ":cur_player"),
                (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_mod_variable, ":mod_variable_type", ":value"),
              (try_end),
              
              (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_reset_map),  #reset!!
            (lua_call, "@resetRoundTime", 0), #reset time for lua as well
            (try_begin),
              #validity check
              # dont reset from start map.
              (gt,":player_no",-1),
              #condition checks are done
              (try_begin),
                (gt,"$g_auto_FF", 0),
                (neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
                (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
                (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
                (try_begin),
                  (server_get_friendly_fire, ":ff_1"),
                  (neq, ":ff_1", 0),
                  (server_set_friendly_fire, 0),
                (try_end),
                (try_begin),
                  (server_get_melee_friendly_fire, ":ff_2"),
                  (neq, ":ff_2", 0),
                  (server_set_melee_friendly_fire, 0),
                (try_end),
                (assign,"$g_auto_FF_2", 0),
                (assign, reg60, "$g_auto_FF"),
                (str_store_string, s4, "str_FF_turn_on_when_2"),
                (call_script, "script_multiplayer_broadcast_message"),
             (try_end), 
              # Kill everything in server if needed.
              (try_begin),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
               # (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
                (eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
                (try_for_agents, ":cur_agent"),
                  (agent_is_active, ":cur_agent"),
                  (agent_is_alive, ":cur_agent"),
                  
                  (agent_get_slot, ":player_god_mode", ":cur_agent", slot_agent_god_mode),#hotfix
                  (try_begin),
                    (eq, ":player_god_mode", 1),
                    (agent_set_no_death_knock_down_only, ":cur_agent", 0),
                    (agent_set_slot, ":cur_agent", slot_agent_god_mode, 0),
                  (try_end),
                  (agent_set_hit_points, ":cur_agent", 0, 1),
                  (agent_deliver_damage_to_agent, ":cur_agent", ":cur_agent","itm_admin_kill_dummy"), #kill him
                (try_end),
              (try_end),
              
              #G:comp_score: reset team score in normal scoring mode only
              (assign,":new_team_score",0),
             # (try_begin),
              #  (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
             #   (try_for_range, ":cur_flag_slot", multi_data_flag_owner_begin, multi_data_flag_owner_end),
             #     (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
             #   (try_end),
                
                
             #   (try_for_range, ":player_no2", "$g_player_loops_begin", multiplayer_player_loops_end),#hotfix
            #      (player_is_active, ":player_no2"),
                
             #     (player_get_team_no, ":player_team", ":player_no2"),
             #     (lt, ":player_team", multi_team_spectator),
             #     (player_get_troop_id, ":player_troop", ":player_no2"),
             #     (gt,":player_troop", -1),

              #    (try_begin),
             #      (eq, ":player_team", 0),
             #      (assign, ":entry_no", multi_base_point_team_1),
             #      (assign, ":have_entrypoint", 1),
             #     (else_try),
             #      (eq, ":player_team", 1),
             #      (assign, ":entry_no", multi_base_point_team_2),
             #      (assign, ":have_entrypoint", 1),
            #      (try_end),
            #      (eq, ":have_entrypoint", 1),
                 
            #      (call_script, "script_multiplayer_buy_agent_equipment", ":player_no2"),
             #     (player_spawn_new_agent, ":player_no2", ":entry_no"),
             #   (try_end),
             #   (neq, "$g_competitive_score_mode", 1),
                
             #   (store_mul, ":initial_hq_score", "$g_multiplayer_game_max_points", 10000),
             #   (assign, "$g_score_team_1", ":initial_hq_score"),
             #   (assign, "$g_score_team_2", ":initial_hq_score"),
                
            #    (try_begin),
            #     (scene_prop_get_num_instances, ":num_instances", "spr_mm_additional_conquest_points"),
             #    (gt,":num_instances",0),
            #     (scene_prop_get_instance,":instance_id","spr_mm_additional_conquest_points",0),
            #     (prop_instance_get_variation_id, ":team_no", ":instance_id"),
            #     (is_between,":team_no",0,2),
             #    (prop_instance_get_variation_id_2, ":extra_points", ":instance_id"), #In display score
            #     (gt,":extra_points",0),
           #      (store_sqrt,":extra_points_multiplier","$g_multiplayer_game_max_points"), #More than 300 max points give a minor increase, lower gives a minor decrease
           #      (val_mul,":extra_points_multiplier",2),
           #      (val_sub,":extra_points_multiplier",34),
            #     (val_add,":extra_points_multiplier","$g_multiplayer_point_gained_from_flags"), #The % Points gained from flags directly affects the additional score
           #      (val_mul,":extra_points_multiplier",100),  #Default = 10000, in real score.
           #      (val_mul,":extra_points",":extra_points_multiplier"),
          #       (try_begin),
           #        (eq,":team_no",0),
            #       (val_add, "$g_score_team_1", ":extra_points"),
           #      (else_try),
           #        (eq,":team_no",1),
            #       (val_add, "$g_score_team_2", ":extra_points"),
             #    (try_end),
             #  (try_end),

             #   (assign,":new_team_score","$g_multiplayer_game_max_points"),
             # (try_end),
              
              (try_begin),
                (neq, "$g_competitive_score_mode", 1),
                # reset teamscore
                (team_set_score, 0, ":new_team_score"),
                (team_set_score, 1, ":new_team_score"),
              (try_end),
              
              # Reset bot stats
              (team_set_bot_kill_count, 0, 0),
              (team_set_bot_death_count, 0, 0),
              (team_set_bot_kill_count, 1, 0),
              (team_set_bot_death_count, 1, 0),
              
              # Reset maptime
              (reset_mission_timer_a),
              (store_mission_timer_a, "$g_round_finish_time"),

              # Reset player stats.
              (try_for_players, ":cur_player", "$g_ignore_server"),
                (player_is_active, ":cur_player"),

                (player_set_slot, ":cur_player", slot_player_poll_disabled_until_time, 0),
                (player_set_slot, ":cur_player", slot_player_teamkills, 0),
                (player_set_slot, ":cur_player", slot_player_last_teamkill_at, 0),
                
                (player_set_slot, ":cur_player", slot_player_spawn_count, 0),
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_player_respawn_spent, 0),
                
                #G:comp_score: reset player stats in normal scoring mode only
                # Added try block
                (try_begin),
                  (neq, "$g_competitive_score_mode", 1),
                  (player_set_kill_count, ":cur_player", 0),
                  (player_set_death_count, ":cur_player", 0),
                  (player_set_score, ":cur_player", 0),
                  (call_script,"script_multiplayer_server_send_player_score_kill_death", ":cur_player", 0, 0, 0),
                (try_end),
                
                #PATCH1115 fix 43/6 start
                (player_set_slot, ":cur_player", slot_player_musician_spawned, 0),
                (player_set_slot, ":cur_player", slot_player_drummer_spawned, 0),
                (player_set_slot, ":cur_player", slot_player_flag_spawned, 0), 
                (player_set_slot, ":cur_player", slot_player_formation_change, 0),
                (player_set_slot, ":cur_player", slot_player_formation_change_2, 0),                
                (player_set_slot, ":cur_player", slot_player_bot_order, 1),
                #PATCH1115 fix 43/6 end
                
                (neq,":cur_player",0), # no need to send to yourself as server hmm :)
                (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_server_mission_timer_while_player_joined, "$g_round_finish_time"),
                (neq, "$g_competitive_score_mode", 1), #G:comp_score swapped places of send_2_int and send_int
                (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_set_team_score, ":new_team_score", ":new_team_score"),
              (try_end),
                      
              # Reset maptime (twice due to lag).
              (reset_mission_timer_a),
              (store_mission_timer_a, "$g_round_finish_time"),
              
              # End the round
              (assign, "$g_round_ended", 1),
              
              (try_begin),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
                (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
                (eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
                (call_script, "script_multiplayer_mm_reset_stuff_after_round_before_clear"),
                (multiplayer_clear_scene),

                (call_script, "script_initialize_objects"),
                (call_script, "script_multiplayer_close_gate_if_it_is_open"),
                (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
                (call_script, "script_initialize_all_scene_prop_slots"),

                (call_script, "script_multiplayer_mm_reset_stuff_after_round"),
              (try_end),
              
              # Broadcast reset
              (str_store_player_username, s2, ":player_no"), # adminname
              (str_store_string, s4, "str_reset_map_s2"),
              (call_script, "script_multiplayer_broadcast_message"),
            (try_end),
          (else_try),
            (this_or_next|eq, ":event_type", multiplayer_event_send_admin_chat),
            (eq, ":event_type", multiplayer_event_send_inter_admin_chat),
            (try_begin),
              #validity check
              #condition checks are done
              (str_store_player_username, s1, ":player_no"), # adminname
              
              (try_begin),
                (eq, ":event_type", multiplayer_event_send_admin_chat),
                (str_store_string, s2,"str_admin_chat_s1_s0"), # message
              (else_try),
                (str_store_string, s2,"str_inter_admin_chat_s1_s0"), # message
              (try_end),
              (server_add_message_to_log, s2),
              
              (try_for_players, ":cur_player", "$g_ignore_server"),
                (player_is_active,":cur_player"),
          
                (try_begin),
                  (eq, ":event_type", multiplayer_event_send_admin_chat),
                  (multiplayer_send_string_to_player, ":cur_player", multiplayer_event_return_admin_chat, s2),
                (else_try), # send inter admin chat only to admins.
                  (player_is_admin, ":cur_player"),
                  (multiplayer_send_string_to_player, ":cur_player", multiplayer_event_return_inter_admin_chat, s2),
                (try_end),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_player_list_action),
            (try_begin),
              (store_script_param, ":list_type", 3),
              (store_script_param, ":command", 4),
              #validity check
              (is_between, ":list_type", player_list_targets_begin, player_list_targets_end),
              (is_between, ":command", player_list_commands_begin, player_list_commands_end),
              #condition checks are done
              (str_store_player_username, s2, ":player_no"), # adminname
              (assign, ":script_ok", 0),
              
              (try_begin), # FOR ONE SELCTED PLAYER
                (eq, ":list_type", player_list_player),
                (store_script_param, ":value", 5),
                (player_is_active, ":value"),
                (str_store_player_username, s3, ":value"),
                
                (try_begin),
                  (eq, ":command", player_list_admin_ban_player_temp),
									(try_begin),
                    (player_get_unique_id, ":player_key", ":value"),
                    (gt,":player_key", 1), # Key auth server problem protection (id 1 if wrong)
                    (try_begin),  # unmark the lines from here down to try end.   you dont need all of the lines.  feel free to only unmark as many lines as you need for admin ids.   you can add more IDs.  
                    (player_is_admin, ":value"), #lets not run the code below if player being banned is not an admin, as it would be pointless
                    (player_get_unique_id, ":player_id", ":player_no"),#get their ID
                    (this_or_next|eq, ":player_id", 1477436), # only these admins can ban other admins.  
                    (this_or_next|eq, ":player_id", 1397826),  
                    (eq, ":player_id", 12345),#always make sure the last/only id you want to be able to ban admins is just eq, not this or next eq.
              
                    (neq, ":player_key", 1477436), # you will want to put the IDs of admins here that you dont want banned when their name is clicked.  hint, you can ban youself if you dont add your ID here
                    (neq, ":player_key", 1397826), #  if an admin not approved above will not be able to ban admins.   there should be no message saying someone was banned when no one was.  
                    (neq, ":player_key", 12345), 
                 (player_set_is_admin, ":value", 0),
                 (try_end),
                    (neg|player_is_admin, ":value"),
                    (str_store_string, s4, "str_ban_player_temp_s2_s3"),
                    (ban_player, ":value", 1, ":player_no"),
                  (else_try),
                    (kick_player, ":value"),
                  (try_end),
                  (assign, ":script_ok", 1),
                (else_try),
                  (eq, ":command", player_list_admin_slay_player),
                  (call_script, "script_multiplayer_server_slay_player", ":value", 1),
                  (assign, ":script_ok", reg0),
                  (str_store_string, s4, "str_slay_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_revive_player),#patch1115 46/14 
                  (call_script, "script_multiplayer_server_revive_player", ":value"),
                  (assign, ":script_ok", reg0),
                  (eq, ":script_ok", 1),
                  (player_set_slot, ":value", slot_player_revive_pos, 1),
                  (assign,"$g_should_tp", 1),
                  (str_store_string, s4, "str_revive_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_spawn_player),#patch1115 46/33
                  (call_script, "script_multiplayer_server_revive_player", ":value"),
                  (assign, ":script_ok", reg0),
                  (str_store_string, s4, "str_spawn_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_freeze_player),
                  (call_script, "script_multiplayer_server_freeze_player", ":value"),
                  (assign, ":script_ok", reg0),
                  (str_store_string, s4, "str_freeze_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_swap_player),
                  (call_script, "script_multiplayer_server_swap_player", ":value"),
                  (assign, ":script_ok", reg0),
                  (str_store_string, s4, "str_swap_player_s2_s3"),              
                (else_try),
                  (eq, ":command", player_list_admin_spec_player),
                  (call_script, "script_multiplayer_server_spec_player", ":value"),
                  (assign, ":script_ok", reg0),
                  (str_store_string, s4, "str_spec_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_god_mode),
                  (call_script, "script_multiplayer_server_god_mode", ":value", ":player_no"),
                  (assign, ":script_ok", reg0),
                  (assign, ":scripting_is_fun", reg60),
                  (str_store_player_username, s2, ":player_no"),
                  (str_store_player_username, s3, ":value"),              
                  (try_begin),             
                    (eq, ":scripting_is_fun", 1),
                    (str_store_string, s4, "str_cheat_god_mode_s3_s2"),
                  (else_try),
                    (eq, ":scripting_is_fun", 0),
                    (str_store_string, s4, "str_cheat_god_mode_s3_s2_2"),
                  (try_end),
                (else_try),
                  (eq, ":command", player_list_admin_cheat_heal_player),
                  (player_get_agent_id, ":value_agent_id", ":value"),
                  (agent_is_active,":value_agent_id"),
                  (agent_is_alive, ":value_agent_id"),
                  
                  (agent_set_hit_points, ":value_agent_id", 100, 0), # Heal the player ##patch1115 change begin  fix 11/1
                  (try_begin),
                    (agent_get_horse, ":horse_agent", ":value_agent_id"),
                    (gt,":horse_agent",-1),
                    (agent_is_active,":horse_agent"),
                    (agent_is_alive, ":horse_agent"),	
                    (agent_set_hit_points, ":horse_agent", 100, 0), # Heal the Horse ##patch1115 change END fix 11/1 end
                  (try_end),             
                  (assign, ":script_ok", 1),
                  (str_store_string, s4, "str_cheat_heal_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_cheat_ammo_player),
                  (player_get_agent_id, ":value_agent_id", ":value"),
                  (agent_is_active,":value_agent_id"),
                  (agent_is_alive, ":value_agent_id"),
                  (try_begin),#patch1115 67/1
                    (this_or_next|agent_has_item_equipped, ":value_agent_id", "itm_bullets"),
                    (this_or_next|agent_has_item_equipped, ":value_agent_id", "itm_pistol_ammo"),
                    (this_or_next|agent_has_item_equipped, ":value_agent_id", "itm_grenade"),
                    (this_or_next|agent_has_item_equipped, ":value_agent_id", "itm_explosive_bullets"),
                    (agent_has_item_equipped, ":value_agent_id", "itm_rockets"),
                    
                    (agent_refill_ammo, ":value_agent_id"),
                  (else_try),
                    (agent_get_troop_id,":troop_id", ":value_agent_id"),
                    (troop_get_inventory_capacity, ":inv_cap", ":troop_id"),
                    (try_for_range, ":i_slot", 0, ":inv_cap"),
                      (troop_get_inventory_slot, ":item_id", ":troop_id", ":i_slot"),
                      (ge, ":item_id", 0), 
                      (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class2),                  
                      (try_begin),
                        (eq, ":item_class", multi_item_class_type_gun),
                        (agent_equip_item,":value_agent_id","itm_bullets"),
                        (assign, ":inv_cap", 0),
                      (else_try),
                        (eq, ":item_class", multi_item_class_type_pistol),
                        (agent_equip_item,":value_agent_id","itm_pistol_ammo"),
                        (assign, ":inv_cap", 0),
                      (try_end),                
                    (try_end),
                  (try_end),#patch1115 67/1 end
                  
                  (assign, ":script_ok", 1),
                  (str_store_string, s4, "str_cheat_ammo_player_s2_s3"),
                (else_try),
                  (eq, ":command", player_list_admin_beacon_player),
                  (player_get_agent_id, ":value_agent_id", ":value"),
                  (agent_is_active,":value_agent_id"),
                  (agent_is_alive, ":value_agent_id"),
                  
                  (try_begin),
                    (eq,"$g_beaconed_player_admin",":value"),
                    
                    (assign,"$g_beaconed_player_admin",-1),
                  (else_try),
                    (assign,"$g_beaconed_player_admin",":value"),
                  (try_end),
                  
                  (try_for_players, ":some_player", 1),
                    (player_is_active, ":some_player"),
                    (multiplayer_send_2_int_to_player, ":some_player", multiplayer_event_return_mod_variable, mod_variable_beaconed_player, "$g_beaconed_player_admin"),
                  (try_end),
                  
                  (assign, ":script_ok", 1),
                  (str_store_string, s4, "str_cheat_beacon_player_s2_s3"),
                (try_end),
              (else_try),
                (eq, ":list_type", player_list_all), # FOR ALL PLAYERS/AGENTS
                # IN PLAYER LOOP
                (try_for_players, ":player_no2", "$g_ignore_server"),
                  (player_is_active, ":player_no2"),
                  (try_begin),
                    (eq, ":command", player_list_admin_slay_player),
                    (call_script, "script_multiplayer_server_slay_player", ":player_no2", 1),
                    (eq, reg0, 1),
                    (assign, ":script_ok", 1),                
                  (else_try),
                    (eq, ":command", player_list_admin_revive_player),
                    (call_script, "script_multiplayer_server_revive_player", ":player_no2"), #patch1115 46/12 
                    (eq, reg0, 1),
                    (player_set_slot, ":player_no2", slot_player_revive_pos, 1),
                    (assign,"$g_should_tp", 1),
                    (assign, ":script_ok", 1),
                  (else_try),
                    (eq, ":command", player_list_admin_spawn_player),
                    (call_script, "script_multiplayer_server_revive_player", ":player_no2"), #patch1115 46/33 
                    (eq, reg0, 1),
                    (assign, ":script_ok", 1),
                  (else_try),
                    (eq, ":command", player_list_admin_freeze_player),
                    (call_script, "script_multiplayer_server_freeze_player", ":player_no2"),
                    (eq, reg0, 1),
                    (assign, ":script_ok", 1),
                  (else_try),
                    (eq, ":command", player_list_admin_swap_player),
                    (call_script, "script_multiplayer_server_swap_player", ":player_no2"),
                    (eq, reg0, 1),
                    (assign, ":script_ok", 1),                
                  (else_try),
                    (eq, ":command", player_list_admin_spec_player),
                    (call_script, "script_multiplayer_server_spec_player", ":player_no2"),
                    (eq, reg0, 1),
                    (assign, ":script_ok", 1),
                  (try_end),
                (try_end),
                # OUT OF PLAYER LOOP
                (try_begin),
                  (eq, ":command", player_list_admin_slay_player),
                  # Kill bots and horses
                  (try_for_agents, ":cur_agent"),
                    (agent_is_active, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),
                    
                    (agent_set_hit_points, ":cur_agent", 0, 1),
                    (agent_deliver_damage_to_agent, ":cur_agent", ":cur_agent","itm_admin_kill_dummy"), #kill him
                    
                    (assign, ":script_ok", 1),
                  (try_end),
                  (str_store_string, s4, "str_slay_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_revive_player), #patch1115 46/13 
                  (str_store_string, s4, "str_revive_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_spawn_player), #patch1115 46/32
                  (str_store_string, s4, "str_spawn_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_freeze_player),
                  (str_store_string, s4, "str_freeze_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_swap_player),
                  (str_store_string, s4, "str_swap_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_spec_player),
                  (str_store_string, s4, "str_spec_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_cheat_heal_player),
                  (try_for_agents, ":cur_agent"),
                    (agent_is_active, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),               
                    (agent_set_hit_points, ":cur_agent", 100, 0), # Heal the agent                
                    (assign, ":script_ok", 1),
                  (try_end),
                  (str_store_string, s4, "str_cheat_heal_all_s2"),              
                (else_try),
                  (eq, ":command", player_list_admin_cheat_ammo_player),
                  (try_for_agents, ":cur_agent"),
                    (agent_is_active, ":cur_agent"),
                    (agent_is_alive, ":cur_agent"),
                    (agent_is_human, ":cur_agent"),               
                    (try_begin),#patch1115 67/2
                      (this_or_next|agent_has_item_equipped, ":cur_agent", "itm_bullets"),
                      (this_or_next|agent_has_item_equipped, ":cur_agent", "itm_pistol_ammo"),
                      (this_or_next|agent_has_item_equipped, ":cur_agent", "itm_grenade"),
                      (this_or_next|agent_has_item_equipped, ":cur_agent", "itm_explosive_bullets"),
                      (agent_has_item_equipped, ":cur_agent", "itm_rockets"),
                    
                      (agent_refill_ammo, ":cur_agent"),
                    (else_try),
                      (agent_get_troop_id,":troop_id", ":cur_agent"),
                      (troop_get_inventory_capacity, ":inv_cap", ":troop_id"),
                      (try_for_range, ":i_slot", 0, ":inv_cap"),
                        (troop_get_inventory_slot, ":item_id", ":troop_id", ":i_slot"),
                        (ge, ":item_id", 0), 
                        (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class2),                  
                        (try_begin),
                          (eq, ":item_class", multi_item_class_type_gun),
                          (agent_equip_item,":cur_agent","itm_bullets"),
                          (assign, ":inv_cap", 0),
                        (else_try),
                          (eq, ":item_class", multi_item_class_type_pistol),
                          (agent_equip_item,":cur_agent","itm_pistol_ammo"),
                          (assign, ":inv_cap", 0),
                        (try_end),
                      (try_end),
                    (try_end),#patch1115 67/2 end
                    (assign, ":script_ok", 1),
                  (try_end),
                  (str_store_string, s4, "str_cheat_ammo_all_s2"),
                (else_try),
                  (eq, ":command", player_list_admin_autobalance_player),              
                  (call_script, "script_check_team_balance"),
                  (assign, ":script_ok", 1),             
                  (str_store_string, s4, "str_forceautobalance_all_s2"),   
                (try_end),
              (try_end),
              (eq, ":script_ok", 1),
              (call_script, "script_multiplayer_broadcast_message"), # Broadcast message
            (try_end),     
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_cheat_spawn_item),
            (try_begin),
              (store_script_param, ":value", 3),
              #validity check
              (player_get_agent_id, ":player_agent_no", ":player_no"),
              (agent_is_active,":player_agent_no"),
              (agent_is_alive, ":player_agent_no"),
              (is_between, ":value", cheat_items_begin, cheat_items_end),
              #condition checks are done
              (str_store_player_username, s2, ":player_no"), # adminname
              
              (assign, ":item_to_spawn1", -1),
              (assign, ":item_to_spawn2", -1),
              (assign, ":sound_id", -1),
              (try_begin),
                (eq, ":value", cheat_item_hammer),
                (str_store_string, s4, "str_cheat_spawn_hammer_s2"),
                (assign, ":item_to_spawn1", "itm_banhammer"), #No banhammer left
                (assign, ":sound_id", "snd_admin_banhammer"),
              (else_try),
                (eq, ":value", cheat_item_shotgun),
                (str_store_string, s4, "str_cheat_spawn_shotgun_s2"),
                (assign, ":item_to_spawn1", "itm_blunderbluss"),
                (assign, ":item_to_spawn2", "itm_bullets"),
                (assign, ":sound_id", "snd_admin_shotgun"),
              (else_try),
                (eq, ":value", cheat_item_rocketlauncher),
                (str_store_string, s4, "str_cheat_spawn_rocketlauncher_s2"),
                (assign, ":item_to_spawn1", "itm_sniper_rifle"),
                (assign, ":item_to_spawn2", "itm_explosive_bullets"),
                (assign, ":sound_id", "snd_admin_rocketlauncher"),
              (else_try),
                (eq, ":value", cheat_item_balllauncher),
                (str_store_string, s4, "str_cheat_spawn_balllauncher_s2"),
                (assign, ":item_to_spawn1", "itm_sniper_rifle_ball"),
                (assign, ":item_to_spawn2", "itm_bullets"),
                #(assign, ":sound_id", "snd_admin_rocketlauncher"),
              (else_try),
                (eq, ":value", cheat_item_grenade),
                (str_store_string, s4, "str_cheat_spawn_grenade_s2"),
                (assign, ":item_to_spawn1", "itm_grenade"),
              (else_try),
                (eq, ":value", cheat_item_horse),
                (str_store_string, s4, "str_cheat_spawn_horse_s2"),
                (assign, ":item_to_spawn1", "itm_admin_horse"),  
              (try_end),

              (call_script, "script_multiplayer_broadcast_message"),
              
              (try_begin),
                (eq, ":value", cheat_item_hammer),
                (str_store_string, s4, "str_cheat_spawn_hammer_2_s2"),
                (call_script, "script_multiplayer_broadcast_message"),
              (else_try),
                (eq, ":value", cheat_item_grenade),
                (str_store_string, s4, "str_cheat_spawn_grenade_2_s2"),
                (call_script, "script_multiplayer_broadcast_message"),
              (try_end),
              
              (try_begin),
                (ge, ":item_to_spawn1", 0),
                (try_begin),
                  (eq, ":value", cheat_item_horse),
                  (agent_get_position, pos2,":player_agent_no"),
                  (position_move_z, pos2, -10),
                  (position_move_y, pos2, 200),
                  (set_spawn_position, pos2),
                  (spawn_horse, ":item_to_spawn1", 0),
                (else_try),
                  (neg|agent_has_item_equipped,":player_agent_no",":item_to_spawn1"),
                  (agent_equip_item,":player_agent_no",":item_to_spawn1"),
                  (agent_has_item_equipped,":player_agent_no",":item_to_spawn1"),
                  (agent_set_wielded_item,":player_agent_no",":item_to_spawn1"),
                (try_end),
              (try_end),
              (try_begin),
                (ge, ":item_to_spawn2", 0),
                (try_begin),
                  (agent_has_item_equipped,":player_agent_no",":item_to_spawn2"),
                  (agent_refill_ammo,":player_agent_no"),
                (else_try),
                  (agent_equip_item,":player_agent_no",":item_to_spawn2"),
                (try_end),
              (try_end),
              (try_begin),
                (gt, ":sound_id", -1),
                
                (agent_get_position, pos56,":player_agent_no"),
                (call_script,"script_multiplayer_server_play_sound_at_position",":sound_id"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":event_type", multiplayer_event_admin_cheat_teleport),
            (try_begin),
              (store_script_param, ":tele_type", 3),
              (store_script_param, ":value", 4),
              #validity check
              (is_between, ":tele_type", cheat_teles_begin, cheat_teles_end),
              
              (player_is_active, ":value"),
              (player_get_agent_id, ":value_agent_id", ":value"),
              (agent_is_active, ":value_agent_id"),
              (agent_is_alive, ":value_agent_id"),
              
              (player_get_agent_id, ":player_no_agent_id", ":player_no"),
              (agent_is_active, ":player_no_agent_id"),
              (agent_is_alive, ":player_no_agent_id"),
              #condition checks are done          
              
              (str_store_player_username, s2, ":player_no"),
              (str_store_player_username, s3, ":value"),
              (assign, ":agent_to_move", -1),
              
              (try_begin),
                (this_or_next|eq, ":tele_type", cheat_tele_to),
                (eq, ":tele_type", cheat_tele_wall),
                (assign, ":agent_to_move", ":player_no_agent_id"),
                (str_store_string, s4, "str_cheat_tele_wall_s2"),
              (else_try),
                (eq, ":tele_type", cheat_tele_bring),
                (assign, ":agent_to_move", ":value_agent_id"),
                (str_store_string, s4, "str_cheat_tele_bring_player_s2_s3"),
              (try_end),
              
              (agent_get_horse, ":horse_agent", ":agent_to_move"),
              (try_begin),
                (ge, ":horse_agent", 0),
                (assign, ":agent_to_move", ":horse_agent"),
              (try_end),
              
              (try_begin),
                (eq, ":tele_type", cheat_tele_to),
                (agent_get_position, pos3, ":value_agent_id"),
                (position_move_y, pos3, -250),
                (str_store_string, s4, "str_cheat_tele_to_player_s2_s3"),
              (else_try),
                (this_or_next|eq, ":tele_type", cheat_tele_bring),
                (eq, ":tele_type", cheat_tele_wall),
                (agent_get_position, pos3, ":player_no_agent_id"),
                (position_move_y, pos3, 250),
              (try_end),
              
              (call_script, "script_multiplayer_broadcast_message"), # Broadcast teleport message     
              
              (agent_set_position, ":agent_to_move", pos3), # move the agent
              
              # (try_begin),
                # (eq, ":tele_type", cheat_tele_to),
                # (agent_set_look_target_agent, ":player_no_agent_id", ":value_agent_id"),
              # (else_try),
                # (eq, ":tele_type", cheat_tele_bring),
                # (agent_set_look_target_agent, ":value_agent_id", ":player_no_agent_id"),
              # (try_end),
            (try_end),
          (try_end),
        (try_end),
      (else_try), # server > client any really.
        #(is_between,":event_type",multiplayer_event_return_num_bots_in_team,multiplayer_event_return_custom_string +1),
        
        ###############
        #CLIENT EVENTS#
        ###############
        (neg|multiplayer_is_dedicated_server),
        (try_begin),      
          (eq, ":event_type", multiplayer_event_return_renaming_server_allowed),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_renaming_server_allowed", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_changing_game_type_allowed),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_changing_game_type_allowed", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_next_team_faction),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_next_team_1_faction", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_next_team_2_faction", ":value_2"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_num_bots_in_team),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_num_bots_team_1", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_num_bots_team_2", ":value_2"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_melee_friendly_fire),
          (store_script_param, ":value", 3),
          (server_set_melee_friendly_fire, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire_damage_self_ratio),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire_damage_self_ratio, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire_damage_friend_ratio),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire_damage_friend_ratio, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_ghost_mode),
          (store_script_param, ":value", 3),
          (server_set_ghost_mode, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_control_block_dir),
          (store_script_param, ":value", 3),
          (server_set_control_block_dir, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_respawn_period),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_respawn_period", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_max_minutes),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_max_minutes", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_round_max_seconds),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_round_max_seconds", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_player_respawn_as_bot),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_player_respawn_as_bot", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_max_points),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_max_points", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_point_gained_from_flags),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_point_gained_from_flags", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_point_gained_from_capturing_flag),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_respawn_count),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_number_of_respawn_count", ":value"),          
        (else_try),
          (eq, ":event_type", multiplayer_event_return_server_name),
          (server_set_name, s0),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_password),
          (server_set_password, s0),
          #this is the last option in admin panel, so start the presentation
          (try_begin),
            (neg|multiplayer_is_dedicated_server),
            (try_begin),
              (is_presentation_active, "prsnt_game_multiplayer_admin_panel"),
              (assign,"$g_presentation_admin_panel_restart",1),
            (else_try),
              (start_presentation, "prsnt_game_multiplayer_admin_panel"),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_open_game_rules),
          #this is the last message for game rules, so start the presentation
          (assign, "$g_multiplayer_show_server_rules", 1),
          (try_begin),
            (neg|multiplayer_is_dedicated_server),
            (start_presentation, "prsnt_multiplayer_welcome_message"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_type),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_type", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_valid_vote_ratio),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_valid_vote_ratio", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_max_num_bots),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_max_num_bots", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_server_mission_timer_while_player_joined),
          (store_script_param, ":value", 3),
          (assign, "$server_mission_timer_while_player_joined", ":value"),
          #Beaver added
        (else_try),
          (eq, ":event_type", multiplayer_event_return_auto_team_balance_limit),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_auto_team_balance_limit", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_num_bots_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_num_bots_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_factions_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_factions_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_maps_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_maps_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_kick_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_kick_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_ban_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_ban_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_allow_player_banners),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_allow_player_banners", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_confirmation),
          (assign, "$g_confirmation_result", 1),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_rejection),
          (assign, "$g_confirmation_result", -1),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_multiplayer_message),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          #custom_color:
          (try_begin),
            (eq, ":value", multiplayer_message_type_message_custom_color),
            (store_script_param, ":custom_color", 5),
            (call_script, "script_show_multiplayer_message_custom_color", ":value_2", ":custom_color"),
          (else_try),
            (store_script_param, reg5, 5),
            (call_script, "script_show_multiplayer_message", ":value", ":value_2"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_draw_this_round),
          (store_script_param, ":value", 3),
          (lua_call, "@resetRoundTime", 0),
          (call_script, "script_draw_this_round", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_attached_scene_prop), #scenepropid, x, y, z + agentid
          (store_script_param, ":value", 3), #scenepropid
          (store_script_param, ":value_2", 4), # X
          (store_script_param, ":value_3", 5), # Y
          (store_script_param, ":value_4", 6), # Z + agentid
          
          (store_div,":z_offset",":value_4",10000),
          (val_sub,":z_offset",5000), # remove the + 5000 cm to allow minus values.
          (store_mod,":affected_agent_id",":value_4",10000),
          
          (try_begin),
            (call_script, "script_set_attached_scene_prop",":affected_agent_id",":value",":value_2",":value_3",":z_offset"), 
            (try_begin),
              (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
              (try_begin),
                (neq, ":value", -1),
                (agent_set_horse_speed_factor, ":affected_agent_id", 75),
              (else_try),
                (agent_set_horse_speed_factor, ":affected_agent_id", 100),
              (try_end),              
            (try_end),  
          (try_end),  
        (else_try),
          (eq, ":event_type", multiplayer_event_set_team_flag_situation),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_set_team_flag_situation", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_team_score),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_team_set_score",0, ":value"),
          (call_script, "script_team_set_score",1, ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_player_score_kill_death), 
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_multiplayer_client_apply_player_score_kill_death",":value",":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_num_agents_around_flag),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_set_num_agents_around_flag", ":value", ":value_2"),
        (else_try),
          (this_or_next|eq, ":event_type", multiplayer_event_ask_for_poll),
          (eq, ":event_type", multiplayer_event_ask_for_custom_poll),
          
          (try_begin),
            (eq, ":event_type", multiplayer_event_ask_for_custom_poll),
            (assign, ":value", 5), # custom poll
            (assign, ":value_2", -1),
            (assign, ":value_3", -1),
            (assign, ":value_4", -1),
          (else_try),
            (store_script_param, ":value", 3),
            (store_script_param, ":value_2", 4),
            (store_script_param, ":value_3", 5),
            (store_script_param, ":value_4", 6),
          (try_end),
          (assign, ":continue_to_poll", 0),
          (try_begin),
            (this_or_next|eq, ":value", 1),
            (eq, ":value", 2),
            (player_is_active, ":value_2"), #might go offline before here
            (assign, ":continue_to_poll", 1),
          (else_try),
            (assign, ":continue_to_poll", 1),
          (try_end),
          (try_begin),
            (eq, ":continue_to_poll", 1),
            (assign, "$g_multiplayer_poll_to_show", ":value"),
            (assign, "$g_multiplayer_poll_value_to_show", ":value_2"),
            (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
            (assign, "$g_multiplayer_poll_value_3_to_show", ":value_4"),
            (store_mission_timer_a, ":mission_timer"),
            (store_add, "$g_multiplayer_poll_client_end_time", ":mission_timer", 60),
            (try_begin),
              (neg|multiplayer_is_dedicated_server),
              (start_presentation, "prsnt_multiplayer_poll"),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_change_flag_owner),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_change_flag_owner", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_use_item),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_use_item", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_scene_prop_open_or_close),
          (store_script_param, ":instance_id", 3),       
        
          (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 1),

          (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),

          (try_begin),
            (eq, ":scene_prop_id", "spr_winch_b"),
            (assign, ":effected_object", "spr_portcullis"),
          (else_try),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),                             
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),                             
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
            (this_or_next|eq, ":scene_prop_id", "spr_mm_restroom_door"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_b"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_6m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_8m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_10m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_12m"),
            (eq, ":scene_prop_id", "spr_siege_ladder_move_14m"),
            (assign, ":effected_object", ":scene_prop_id"),
          (try_end),

          (try_begin),
            (eq, ":effected_object", "spr_portcullis"),

            (assign, ":smallest_dist", -1),
            (prop_instance_get_position, pos9, ":instance_id"),
            (try_for_prop_instances, ":cur_instance_id", ":effected_object", somt_object),
              (prop_instance_get_position, pos1, ":cur_instance_id"),
              (get_sq_distance_between_positions, ":dist", pos9, pos1),
              (this_or_next|eq, ":smallest_dist", -1),
              (lt, ":dist", ":smallest_dist"),
              (assign, ":smallest_dist", ":dist"),
              (assign, ":effected_object_instance_id", ":cur_instance_id"),
            (try_end),

            (ge, ":smallest_dist", 0),
            (prop_instance_is_animating, ":is_animating", ":effected_object_instance_id"),
            (eq, ":is_animating", 0),

            (prop_instance_get_starting_position, pos9, ":effected_object_instance_id"),      
            (position_move_z, pos9, 375),
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos9, 1),
          (else_try),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
            (this_or_next|eq, ":scene_prop_id", "spr_mm_restroom_door"),
            (eq, ":scene_prop_id", "spr_castle_f_door_b"),
            (assign, ":effected_object_instance_id", ":instance_id"),  
            (prop_instance_get_starting_position, pos9, ":effected_object_instance_id"),
            (position_rotate_z, pos9, -80),
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos9, 1),
          (else_try),
            (assign, ":effected_object_instance_id", ":instance_id"),
            (prop_instance_is_animating, ":is_animating", ":effected_object_instance_id"),
            (eq, ":is_animating", 0),
            (prop_instance_get_starting_position, pos9, ":effected_object_instance_id"),      
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos9, 1),          
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_round_start_time),
          (store_script_param, ":value", 3),

          (try_begin),
            (neq, ":value", -9999),
            (assign, "$g_round_start_time", ":value"),
          (else_try),
            (store_mission_timer_a, "$g_round_start_time"),

            #if round start time is assigning to current time (so new round is starting) then also initialize moveable object slots too.
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_6m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_8m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_10m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_12m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_14m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_winch_b"),    

            # AoN
            (neg|multiplayer_is_server), # dont run twice plox.
					  (call_script, "script_multiplayer_close_gate_if_it_is_open"),
            (call_script, "script_multiplayer_mm_reset_stuff_after_round"),
            
             
            (assign,"$g_multiplayer_respawn_start_time",-1),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_force_start_team_selection),
          (try_begin),
            (is_presentation_active, "prsnt_multiplayer_item_select"),
            (assign, "$g_close_equipment_selection", 1),
          (try_end),
          (try_begin),
            (neg|multiplayer_is_dedicated_server),
            
            # update my team at start of round because of the swap you are now on other team.
            (try_begin), 
              (multiplayer_get_my_player,":my_player"),
              (player_is_active,":my_player"),
              (player_get_team_no,":team_num",":my_player"),
              (is_between,":team_num",0,2),
              
              (assign, "$my_team_at_start_of_round", ":team_num"),
            (try_end),
            
            (start_presentation, "prsnt_multiplayer_team_select"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_player_respawn_spent),
          (store_script_param, ":value", 3),
          # (try_begin),
            # (gt, "$g_my_spawn_count", 0),
            # (store_add, "$g_my_spawn_count", "$g_my_spawn_count", ":value"),
          # (else_try),
            (assign, "$g_my_spawn_count", ":value"),      
          #(try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_duel_request),
          (store_script_param, ":value", 3),
          (try_begin),
            (agent_is_active, ":value"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_s0_offers_a_duel_with_you"),
            (try_begin),
              (call_script,"script_client_get_my_agent"),
              (assign,":player_agent",reg0),
              (agent_is_active, ":player_agent"),
              (agent_add_offer_with_timeout, ":player_agent", ":value", 10000), #10 second timeout
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_start_duel),
          (store_script_param, ":value", 3),
          (store_mission_timer_a, ":mission_timer"),
          (try_begin),
            (agent_is_active, ":value"),
            (call_script,"script_client_get_my_agent"),
            (assign,":player_agent",reg0),
            (agent_is_active, ":player_agent"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_a_duel_between_you_and_s0_will_start_in_3_seconds"),
            (assign, "$g_multiplayer_duel_start_time", ":mission_timer"),
            (try_begin),
              (neg|multiplayer_is_dedicated_server),
              (start_presentation, "prsnt_multiplayer_duel_start_counter"),
            (try_end),
            (agent_set_slot, ":player_agent", slot_agent_in_duel_with, ":value"),
            (agent_set_slot, ":value", slot_agent_in_duel_with, ":player_agent"),
            (agent_set_slot, ":player_agent", slot_agent_duel_start_time, ":mission_timer"),
            (agent_set_slot, ":value", slot_agent_duel_start_time, ":mission_timer"),
            (agent_clear_relations_with_agents, ":player_agent"),
            (agent_clear_relations_with_agents, ":value"),
##            (agent_add_relation_with_agent, ":player_agent", ":value", -1),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_cancel_duel),
          (store_script_param, ":value", 3),
          (try_begin),
            (agent_is_active, ":value"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_your_duel_with_s0_is_cancelled"),
          (try_end),
          (try_begin),
            (call_script,"script_client_get_my_agent"),
            (assign,":player_agent",reg0),
            (agent_is_active, ":player_agent"),
            (agent_set_slot, ":player_agent", slot_agent_in_duel_with, -1),
            (agent_clear_relations_with_agents, ":player_agent"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_server_message),
          (display_message, "str_server_s0", 0xFFFF6666),
        # MM
        (else_try),
          (eq, ":event_type", multiplayer_event_return_agent_stop_sound),
          (store_script_param, ":value", 3),
          
          (try_begin),
            (agent_is_active,":value"),
            (agent_stop_sound,":value"),
          (try_end),
        # Vincenzo begin
        (else_try),
          (eq, ":event_type", multiplayer_event_return_mod_variable),
          (store_script_param, ":mod_variable_type", 3),
          (store_script_param, ":value", 4),

          (try_begin),
            (eq, ":mod_variable_type", mod_variable_auto_kick),
            (assign, "$g_auto_kick", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_max_teamkills_before_kick),
            (assign, "$g_max_teamkills_before_kick", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_auto_horse),
            (assign, "$g_auto_horse", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_auto_swap),
            (assign, "$g_auto_swap", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_use_class_limits),
            (assign, "$g_use_class_limits", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_class_limit_player_count),
            (assign, "$g_use_class_limits_player_count", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_grenadier),
            (assign, "$g_limit_grenadier", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_skirmisher),
            (assign, "$g_limit_skirmisher", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_rifle),
            (assign, "$g_limit_rifle", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_cavalry),
            (assign, "$g_limit_cavalry", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_lancer),
            (assign, "$g_limit_lancer", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_hussar),
            (assign, "$g_limit_hussar", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_dragoon),
            (assign, "$g_limit_dragoon", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_cuirassier),
            (assign, "$g_limit_cuirassier", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_heavycav),
            (assign, "$g_limit_heavycav", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_sapper),
            (assign, "$g_limit_sapper", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_surgeon),#patch1115 59/5
            (assign, "$g_limit_surgeon", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_artillery),
            (assign, "$g_limit_artillery", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_rocket),
            (assign, "$g_limit_rocket", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_arty_train),
            (assign, "$g_limit_arty_train", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_auto_ff),
            (assign, "$g_auto_FF", 0),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_musician),
            (assign, "$g_limit_musician", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_sergeant),
            (assign, "$g_limit_sergeant", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_officer),
            (assign, "$g_limit_officer", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_limit_general),
            (assign, "$g_limit_general", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_squad_size),
            (assign, "$g_squad_size_limit", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_scale_squad),
            (assign, "$g_scale_squad_size", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_max_num_bots),
            (assign, "$g_max_num_bots", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_no_rambo),
            (assign, "$g_no_rambo", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_no_rambo_range),
            (assign, "$g_no_rambo_range", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_line_inf_spread),
            (assign, "$g_no_line_inf_spread", ":value"),#patch1115 63/13
          (else_try),
            (eq, ":mod_variable_type", mod_variable_num_custom_maps),
            (assign, "$g_num_custom_maps", ":value"),#patch1115 63/13
          (else_try),
            (eq, ":mod_variable_type", mod_variable_build_points_1),
            (assign, "$g_team_1_max_build_points", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_build_points_2),
            (assign, "$g_team_2_max_build_points", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_allow_multiple_firearms),
            (assign, "$g_allow_multiple_firearms", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_groupfight_mode),#patch1115 60/6
            (assign, "$g_groupfight_mode", ":value"),
          #G:comp_score: start
          (else_try),
            (eq, ":mod_variable_type", mod_variable_competitive_score_mode),
            (assign, "$g_competitive_score_mode", ":value"),
            #G:comp_score: end
          (else_try),#custom_keys:
            (eq, ":mod_variable_type", mod_variable_enable_custom_directional_keys),
            (assign, "$g_enable_custom_directional_keys", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_enable_custom_action_v),
            (assign, "$g_enable_action_v", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_enable_custom_action_b),
            (assign, "$g_enable_action_b", ":value"),
          (else_try),#custom_strings:
            (eq, ":mod_variable_type", mod_variable_number_of_custom_strings),
            (assign, "$g_number_of_custom_strings", ":value"),
          (else_try),#custom_chat:
            (eq, ":mod_variable_type", mod_variable_enable_custom_chat),
            (assign, "$g_enable_custom_chat", ":value"),
          (else_try), #modders_props:custom_strings:
            (eq, ":mod_variable_type", mod_variable_custom_string_troop_id),
            (is_between, ":value", "trp_custom_string_1", "trp_custom_strings_end"), #on client only allow renaming of custom string troops
            (assign, "$g_custom_string_troop_id", ":value"),
            (store_script_param, "$g_custom_string_troop_plural", 5),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_enable_bonuses),
            (assign, "$g_bonuses_enabled", ":value"),
            (try_begin),
              (eq, "$g_bonuses_enabled", 1),
              (start_presentation, "prsnt_multiplayer_bonus_icons"),
            (try_end),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_fall_off_horse),
            (assign, "$g_chance_of_falling_off_horse", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_horse_dying),
            (assign, "$g_damage_from_horse_dying", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_bonus_strength),
            (assign, "$g_bonus_strength", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_bonus_range),
            (assign, "$g_bonus_range", ":value"),
          (else_try),
            (eq, ":mod_variable_type", mod_variable_beaconed_player),
            (assign, "$g_beaconed_player_admin", ":value"),
          (else_try),
            # hacked return is admin here because it would save us events.
            (eq, ":mod_variable_type", mod_variable_is_admin),
            (is_between,":value",0,2), # either on or off.
            (multiplayer_get_my_player, ":my_player"),
            (player_is_active,":my_player"),
            (player_set_is_admin,":my_player",":value"),
          (try_end),
        # Vincenzo end
        (else_try),
          (eq, ":event_type", multiplayer_event_return_sound_at_pos),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script,"script_multiplayer_client_play_sound_at_pos",":value",":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_particle_at_pos),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (store_script_param, ":value_3", 5),
          (store_script_param, ":value_4", 6),
          
          (try_begin),
            # First lets unpack...     
            (store_div, ":x_value", ":value", 1000),
            (store_mod, ":x_rot", ":value", 1000),
            #(assign,":y_value", ":value_2"),
            (store_div, ":y_value", ":value_2", 1000),
            (store_mod, ":y_rot", ":value_2", 1000),
            (store_div, ":z_value", ":value_3", 1000),
            (store_mod, ":z_rot", ":value_3", 1000),
            (store_div, ":particle_effect_id", ":value_4", 1000),
            (store_mod, ":burst_strength", ":value_4", 1000),
            
            (is_between,":particle_effect_id","psys_game_rain","psys_particles_end"), # hoorah we have a effect! :)
            
            # remove 100 meters to support minus values.
            (val_sub,":z_value",10000),
            
            (set_fixed_point_multiplier, 100),
            (init_position, pos25),
            (position_set_x,pos25,":x_value"),
            (position_set_y,pos25,":y_value"),
            (position_set_z,pos25,":z_value"),
            (position_rotate_z,pos25,":z_rot"),
            (position_rotate_y,pos25,":y_rot"),
            (position_rotate_x,pos25,":x_rot"),

            (particle_system_burst,":particle_effect_id",pos25,":burst_strength"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_scale_object),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script,"script_multiplayer_client_apply_prop_scale",":value",":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_currently_controlling_object),
          (store_script_param, ":prop_instance", 3),
          (store_script_param, ":value", 4),
          
          (call_script,"script_client_process_set_prop_control",":prop_instance",":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_build_points),
          (store_script_param, ":value", 3),
        
          #unpack.
          (store_and,"$g_team_2_build_points",":value",65535),
          (val_rshift, ":value", 16), 
          (assign,"$g_team_1_build_points",":value"),
          
          (try_begin),
            (is_presentation_active,"prsnt_multiplayer_construct"),
            (assign,"$g_prsnt_build_points_changed",1),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_prop_effects),
          (store_script_param, ":value", 3),
          
          (call_script,"script_multiplayer_client_apply_prop_effect",":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_thunder),
          (store_script_param, ":value", 3),
          
          (call_script,"script_lighting_strike",":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_admin_chat),
          (str_store_string, s60, s0),
          (call_script, "script_show_multiplayer_message", multiplayer_message_type_admin, 0), #0 is useless here
        (else_try),
          (eq, ":event_type", multiplayer_event_return_inter_admin_chat),
          
          (display_message,s0,0xFFAEB9),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_server_action),
          (try_begin),
            (store_script_param, ":action_type", 3),
            (is_between,":action_type",server_actions_begin,server_actions_end),
            (store_script_param, ":action", 4),
            (try_begin),
              (eq,":action_type",server_action_force_music_selection),
              (try_begin),
                (neg|is_presentation_active,"prsnt_multiplayer_music"),
                
                (assign,"$g_used_piano_type",":action"),
                (start_presentation,"prsnt_multiplayer_music"),
              (try_end),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_before_round_end),
          (call_script, "script_multiplayer_mm_reset_stuff_after_round_before_clear"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_destructible_prop_spawn_or_destroy),
          (store_script_param, ":value", 3),
          
          (call_script, "script_multiplayer_client_apply_destructible_prop_spawn_or_destroy", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_cannon_hit_effect_event),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (store_script_param, ":value_3", 5),
          (store_script_param, ":value_4", 6),
          
          (store_div,":extra_value",":value_4",100),
          (store_mod,":effect_type",":value_4",100),
          
          (try_begin),
            (is_between,":effect_type",cannon_hit_effect_event_types_begin,cannon_hit_effect_event_types_end),
            (set_fixed_point_multiplier, 100),
            (init_position, pos60),
            (position_set_x,pos60,":value"),
            (position_set_y,pos60,":value_2"),
            (position_set_z,pos60,":value_3"),
            
            (call_script,"script_handle_cannon_hit_effect_event",":effect_type",":extra_value"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_agent_set_item),
          (store_script_param, ":value", 3), # agent
          (store_script_param, ":value_2", 4), # item
          (store_script_param, ":value_3", 5), # slot
          
          (try_begin),
            (agent_is_active,":value"),
            (agent_is_alive,":value"),
            
            # always remove..
            (try_begin),
              (agent_get_item_slot, ":item_id", ":value", ":value_3"), #ek_head
              (gt,":item_id",-1), # even have a item there?
              (agent_unequip_item, ":value", ":item_id", ":value_3"), #ek_head
            (try_end),
      
            # add ze goodies. only when value_2 is an item.
            (gt,":value_2",-1),
            (agent_equip_item,":value",":value_2"),
          (try_end),
        (else_try),#patch1115 fix 15/3
          (eq, ":event_type", multiplayer_event_return_current_scene),
          (troop_set_name, "trp_scene_name_dummy", s0),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_on_agent_hit),
          (store_script_param, ":value", 3), # packed var.
          
          (store_and,":attacker_agent_no",":value",65535),
	        (val_rshift, ":value", 16), 
	        (assign,":hit_agent_no",":value"),
          
          (call_script,"script_client_on_agent_hit",":hit_agent_no",":attacker_agent_no"),
        #modders_props:custom_strings:
        #(else_try),
          #(eq, ":event_type", multiplayer_event_return_custom_id),
            #This event moved to mod_variable_custom_string_troop_id
            #(store_script_param, ":value", 3),
            #(assign, "$g_custom_string_troop_id", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_custom_string),
          (is_between, "$g_custom_string_troop_id", "trp_custom_string_1", "trp_custom_strings_end"), #on client only allow renaming of custom string troops
          (try_begin),
            (eq, "$g_custom_string_troop_plural", 1),
            (troop_set_plural_name, "$g_custom_string_troop_id", s0),
          (else_try),
            (troop_set_name, "$g_custom_string_troop_id", s0),
          (try_end),
        (try_end),
      (try_end),
     ]),

     
     
  # script_multiplayer_server_process_client_item_selection
  ("multiplayer_server_process_client_item_selection",
  [
    (store_script_param, ":player_no", 1), 
    (store_script_param, ":slot_no", 2), #slot.
    (store_script_param, ":value", 3), #item.
    (try_begin),
      #valid slot check
      (is_between, ":slot_no", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
      #valid item check
      (assign, ":valid_item", 0),
      (try_begin),
        (eq, ":value", -1),
        (assign, ":valid_item", 0), #patch1115 fix 17/6
      (else_try),
        (ge, ":value", 0),
        (player_get_troop_id, ":player_troop_no", ":player_no"),
        (is_between, ":player_troop_no", multiplayer_troops_begin, multiplayer_troops_end),
        (store_sub, ":troop_index", ":player_troop_no", multiplayer_troops_begin),
        (val_add, ":troop_index", slot_item_multiplayer_availability_linked_list_begin),
        (item_get_slot, ":prev_next_item_ids", ":value", ":troop_index"),
        (gt, ":prev_next_item_ids", 0), #0 if the item is not valid for the multiplayer mode
        (assign, ":valid_item", 1),
        (item_get_slot, ":item_class", ":value", slot_item_multiplayer_item_class),
        (try_begin),
          (neq, "$g_horses_are_avaliable", 1),
          (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
          (assign, ":valid_item", 0),
        (try_end),
        (troop_get_slot,":player_troop_class",":player_troop_no",slot_troop_class),
        (try_begin),
          (neq,":player_troop_class", multi_troop_class_mm_sapper),
          (neq, ":player_troop_class", multi_troop_class_mm_artillery),
          (neq, ":player_troop_class", multi_troop_class_mm_rocket),
          (try_begin),    
            (this_or_next|eq, ":item_class", multi_item_class_type_gun),
            (this_or_next|eq, ":item_class", multi_item_class_type_lance),
            (eq, ":item_class", multi_item_class_type_instrument),
            (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 1),
            (neq,":slot_no",":selected_item_slot"),
            (assign, ":valid_item", 0),
          (else_try),
            (eq, ":item_class", multi_item_class_type_bullet),
            (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 3),
            (neq,":slot_no",":selected_item_slot"),
            (assign, ":valid_item", 0),
          (else_try),
            (eq, ":item_class", multi_item_class_type_sword),
            (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 2),
            (neq,":slot_no",":selected_item_slot"),
            (assign, ":valid_item", 0),
          (else_try),
            (this_or_next|eq, ":item_class", multi_item_class_type_flag),
            (eq, ":item_class", multi_item_class_type_misc),
            (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 0),
            (neq,":slot_no",":selected_item_slot"),
            (assign, ":valid_item", 0),
          (try_end),
        (try_end),
      (try_end),
      (eq, ":valid_item", 1),
      #condition checks are done
      (player_set_slot, ":player_no", ":slot_no", ":value"),
    (try_end),
  ]),
     
     
  # script_multiplayer_server_process_client_team_selection
  ("multiplayer_server_process_client_team_selection",
  [
    (store_script_param, ":player_no", 1), 
    (store_script_param, ":value", 2), #teamno.
  
    (try_begin),
      #validity check
      (player_get_team_no, ":player_team", ":player_no"),
      (neq, ":player_team", ":value"),

      #condition checks are done
      (try_begin),
        #check if available
        (call_script, "script_cf_multiplayer_team_is_available", ":player_no", ":value"),
        #reset troop_id to -1
        (player_set_troop_id, ":player_no", -1),
        (player_set_team_no, ":player_no", ":value"),
        (try_begin), #Remove bot squad on team change for commander mode
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
          (call_script,"script_on_commander_leave_or_team_switch",":player_no",":player_team"),
        (try_end),
        (try_begin),
          (neq, ":value", multi_team_spectator),
          (neq, ":value", multi_team_unassigned),
  
          (store_mission_timer_a, ":player_last_team_select_time"),         
          (player_set_slot, ":player_no", slot_player_last_team_select_time, ":player_last_team_select_time"),
  
          (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
        (try_end),
      (else_try),
        #reject request
        (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
      (try_end),
    (try_end),
  ]),
     
  # script_multiplayer_server_process_client_troop_selection
  ("multiplayer_server_process_client_troop_selection",
  [
    (store_script_param, ":player_no", 1), 
    (store_script_param, ":value", 2), #troop.
    
     #troop-faction validity check
    (try_begin),
      (eq, ":value", -1),
      (player_set_troop_id, ":player_no", -1),
    (else_try),
      (try_begin),
        (assign,":is_ok",0),
        (try_begin),
          (is_between, ":value", multiplayer_troops_begin, multiplayer_troops_end),
          (assign,":is_ok",1),
        (else_try),
          (is_between, ":value", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
          
          # Set the bot type
          (player_set_slot,":player_no",slot_player_bot_type_wanted,":value"),
          
          # get the officer troop for myself
          (troop_get_slot,":value",":value",slot_troop_officer_troop),
          (assign,":is_ok",1),
        (try_end),
        
        (eq,":is_ok",1),
        
        (player_get_team_no, ":player_team", ":player_no"),
        (is_between, ":player_team", 0, multi_team_spectator),
        
        (team_get_faction, ":team_faction", ":player_team"),
        (store_troop_faction, ":new_troop_faction", ":value"),
        (store_add,":oth_ranks_faction",":team_faction", 11), # Other ranks are + 11
        
        # Is the selected troop for this faction?
        (this_or_next|eq, ":new_troop_faction", ":team_faction"),
        (eq, ":new_troop_faction", ":oth_ranks_faction"),
        
        # check available, for all gamemodes now.
        (call_script,"script_check_troop_availability",":value",":player_no",1),
        (assign,":class_ok",reg3),
        (assign,":error_message",reg4),
        
        (try_begin), 
          (neq, ":class_ok", 1),
          #(assign, ":error_message", "str_already_to_many_players_class"),                
          (player_set_troop_id, ":player_no", -1),
        (try_end),#patch1115 fix 43/6 end
        
        (try_begin),
          (eq, ":class_ok", 1), # give him the stuff
          (try_begin),
            (player_get_troop_id, ":cur_troop_no", ":player_no"),
            (neq, ":cur_troop_no", ":value"),
            (player_set_troop_id, ":player_no", ":value"),
            (call_script, "script_multiplayer_clear_player_selected_items", ":player_no"),
    
            # selecting equipment for client when class is changed
            (troop_get_slot,":selected_troop_class",":value",slot_troop_class),#patch1115 fix 17/4
            (try_begin),
              (this_or_next|eq, ":selected_troop_class", multi_troop_class_mm_sapper),#patch1115 59/15
              (this_or_next|eq, ":selected_troop_class", multi_troop_class_mm_surgeon),
              (this_or_next|eq, ":selected_troop_class", multi_troop_class_mm_artillery),
              (eq, ":selected_troop_class", multi_troop_class_mm_rocket),

              (call_script, "script_random_item_selection", ":value", 0, ":player_no"),
            (else_try),
              (call_script, "script_random_item_selection", ":value", 1, ":player_no"),
            (try_end),  #patch1115 fix 17/4 end
          
          (try_end),
          
          #Assign a bot squad for commander mode
          # (try_begin),
            # (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
            # (assign, ":end_cond", multiplayer_ai_troops_end),
            # (try_for_range, ":bot_type", multiplayer_ai_troops_begin, ":end_cond"),
              # (troop_slot_eq,":bot_type",slot_troop_officer_troop,":value"),
              # (player_set_slot,":player_no",slot_player_bot_type_wanted,":bot_type"),
            # (try_end),
          # (try_end),  
          
          (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
        (else_try),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, ":error_message"),
          (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
        (try_end),
      (else_try),
        (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
      (try_end),
    (try_end),
     
  ]),
     
  # script_multiplayer_server_play_hit_effect
  # Input: pos60  pos of event.
  #        event_type  type Explosion/ground  
  #        extra_value  In case of cannonball is strenght, in case of wall its walltype.
  ("multiplayer_server_play_hit_effect",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":extra_value", 2),
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (is_between,":event_type",cannon_hit_effect_event_types_begin,cannon_hit_effect_event_types_end),
      
      # play on server if not dedicatd
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (call_script,"script_handle_cannon_hit_effect_event",":event_type",":extra_value"),
      (try_end),
      
      # then send on.
      (try_begin),
        (game_in_multiplayer_mode),
        
        (set_fixed_point_multiplier, 100),        
        (position_get_x,":xvalue", pos60),
        (position_get_y,":yvalue", pos60),
        (position_get_z,":zvalue", pos60),
        
        (val_mul,":extra_value",100), # free up 2 digits for type.
        (val_add,":extra_value",":event_type"), # add the type to it.
         
        (try_for_players, ":cur_player", 1),
          (player_is_active,":cur_player"),

          (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_return_cannon_hit_effect_event,":xvalue",":yvalue",":zvalue",":extra_value"),
        (try_end),
      (try_end),
    (try_end),
  ]),
     
  # script_handle_cannon_hit_effect_event
  # Input: pos60  pos of event.
  #        event_type  type Explosion/ground  
  #        extra_value In case of cannonball is strenght, in case of wall its walltype.
  ("handle_cannon_hit_effect_event",
  [
    (store_script_param, ":event_type", 1),
    (store_script_param, ":extra_value", 2),
    
    (try_begin),    
      (is_between,":event_type",cannon_hit_effect_event_types_begin,cannon_hit_effect_event_types_end),
      
      (set_fixed_point_multiplier, 100),
      
      (assign,":play_close_particles",0),
      (try_begin),
        (mission_cam_get_position, pos17),
        (get_distance_between_positions,":dist",pos17,pos60),
        (lt,":dist",2000), # less then 20 meters
        (assign,":play_close_particles",1),
      (try_end),
      
      (try_begin),
        (eq,":event_type",cannon_hit_effect_event_type_explosion),
        
        (play_sound_at_position, "snd_explosion", pos60),
        
        (particle_system_burst_no_sync,"psys_war_smoke_tall",pos60,150),
        (particle_system_burst_no_sync,"psys_explosion_smoke",pos60,100),
        (particle_system_burst_no_sync,"psys_explosion_smoke2",pos60,100),
        (particle_system_burst_no_sync,"psys_explosion_flash",pos60,100),
        
        (try_begin),
          (eq,":play_close_particles",1),
          
          (particle_system_burst_no_sync,"psys_explosion_particles",pos60,100),
          (particle_system_burst_no_sync,"psys_fire_sparks_1",pos60,100),
          (particle_system_burst_no_sync,"psys_brazier_fire_1",pos60,100),
        (try_end),
      (else_try),
        (eq,":event_type",cannon_hit_effect_event_type_ground), # the extra value is the loss strenght in this case.
        
        (play_sound_at_position, "snd_cannon_hit_ground",pos60),
        
        (particle_system_burst_no_sync,"psys_cooking_smoke",pos60,":extra_value"),
        (try_begin),
          (eq,"$g_scene_has_snowy_ground",0),
          (particle_system_burst_no_sync,"psys_cannonball_ground_smoke",pos60,":extra_value"),
          (particle_system_burst_no_sync,"psys_cannonball_ground_smoke2",pos60,":extra_value"),
          (try_begin),
            (eq,":play_close_particles",1),
            (particle_system_burst_no_sync,"psys_cannon_ball_hit_particles",pos60,":extra_value"),
          (try_end),
        (else_try),
          (particle_system_burst_no_sync,"psys_cannonball_ground_smoke_snow",pos60,":extra_value"),
          (particle_system_burst_no_sync,"psys_cannonball_ground_smoke2_snow",pos60,":extra_value"),
          
          (eq,":play_close_particles",1),
          (particle_system_burst_no_sync,"psys_cannon_ball_hit_particles_snow",pos60,":extra_value"),
        (try_end),
      (else_try),
        (eq,":event_type",cannon_hit_effect_event_type_water_ball),
        
        (play_sound_at_position, "snd_cannon_hit_ground",pos60),
        
        (particle_system_burst_no_sync,"psys_cannonball_water_hit_a",pos60,8),
        (position_move_z, pos60, 5),
        (particle_system_burst_no_sync,"psys_cannonball_water_hit_b",pos60,4),
        
      (else_try),
        (eq,":event_type",cannon_hit_effect_event_type_wall), # extra value is wall type.
       
        (call_script,"script_get_destruction_properties_of_object",":extra_value"),
        (assign,":smoke_type",reg0),
        (assign,":smoke_type2",reg1),
        (assign,":particles_type",reg2),
        (assign,":smoke_strength",reg3),
        (assign,":sound_id",reg4),
        
        (try_begin),
          (gt,":smoke_type",-1),              
          (particle_system_burst_no_sync,":smoke_type",":smoke_strength"),
        (try_end),
        (try_begin),
          (gt,":smoke_type2",-1),              
          (particle_system_burst_no_sync,":smoke_type2",":smoke_strength"),
        (try_end),
        (try_begin),
          (gt,":particles_type",-1),
          (eq,":play_close_particles",1),
          (particle_system_burst_no_sync,":particles_type",pos60,40),
        (try_end),
        
        (try_begin),
          (gt,":sound_id", -1),
          (play_sound_at_position,":sound_id",pos60), 
        (try_end),
      (try_end),
    (try_end),
  ]),
   
     
  # script_cf_multiplayer_evaluate_poll
  # Input: none
  # Output: none (can fail)
  ("cf_multiplayer_evaluate_poll",
   [
     (assign, ":result", 0),
     (assign, "$g_multiplayer_poll_ended", 1),
     (store_add, ":total_votes", "$g_multiplayer_poll_yes_count", "$g_multiplayer_poll_no_count"),
     (store_sub, ":abstain_votes", "$g_multiplayer_poll_num_sent", ":total_votes"),
     (store_mul, ":nos_from_abstains", 3, ":abstain_votes"),
     (val_div, ":nos_from_abstains", 10), #30% of abstains are counted as no
     (val_add, ":total_votes", ":nos_from_abstains"),
     (val_max, ":total_votes", 1), #if someone votes and only 1-3 abstain occurs?
     (store_mul, ":vote_ratio", 100, "$g_multiplayer_poll_yes_count"),
     (val_div, ":vote_ratio", ":total_votes"),
     (try_begin),
       (ge, ":vote_ratio", "$g_multiplayer_valid_vote_ratio"),
       (assign, ":result", 1),
       (try_begin),
         (eq, "$g_multiplayer_poll_to_show", 1), #kick player
         (try_begin),
           (player_is_active, "$g_multiplayer_poll_value_to_show"),
           (kick_player, "$g_multiplayer_poll_value_to_show"),
         (try_end),
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 2), #ban player
         (ban_player_using_saved_ban_info), #already loaded at the beginning of the poll
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 3), #change map with factions
         (team_set_faction, 0, "$g_multiplayer_poll_value_2_to_show"),
         (team_set_faction, 1, "$g_multiplayer_poll_value_3_to_show"),
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 4), #change number of bots
         (assign, "$g_multiplayer_num_bots_team_1", "$g_multiplayer_poll_value_to_show"),
         (assign, "$g_multiplayer_num_bots_team_2", "$g_multiplayer_poll_value_2_to_show"),          
         (try_for_players, ":cur_player", 1),
           (player_is_active, ":cur_player"),
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
         (try_end),
       (try_end),
     (else_try),
       (assign, "$g_multiplayer_poll_running", 0), #end immediately if poll fails. but end after some time if poll succeeds (apply the results first)
     (try_end),

     #for only server itself-----------------------------------------------------------------------------------------------
     (call_script, "script_show_multiplayer_message", multiplayer_message_type_poll_result, ":result"), #0 is useless here
     #for only server itself-----------------------------------------------------------------------------------------------     
     (try_for_players, ":cur_player", 1),
       (player_is_active, ":cur_player"),
       (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_poll_result, ":result"),
     (try_end),
     (eq, ":result", 1),
     ]),

  # script_multiplayer_accept_duel
  # Input: arg1 = agent_no, arg2 = agent_no_offerer
  # Output: none
  ("multiplayer_accept_duel",
   [
     (store_script_param, ":agent_no", 1),
     (store_script_param, ":agent_no_offerer", 2),
     (try_begin),
       (agent_slot_ge, ":agent_no", slot_agent_in_duel_with, 0),
       (agent_get_slot, ":ex_duelist", ":agent_no", slot_agent_in_duel_with),
       (agent_is_active, ":ex_duelist"),
       (agent_clear_relations_with_agents, ":ex_duelist"),
       (agent_set_slot, ":ex_duelist", slot_agent_in_duel_with, -1),
       (agent_get_player_id, ":player_no", ":ex_duelist"),
       (try_begin),
         (player_is_active, ":player_no"), #might be AI
         (multiplayer_send_int_to_player, ":player_no", multiplayer_event_cancel_duel, ":agent_no"),
       (else_try),
         (agent_force_rethink, ":ex_duelist"),
       (try_end),
     (try_end),
     (try_begin),
       (agent_slot_ge, ":agent_no_offerer", slot_agent_in_duel_with, 0),
       (agent_get_slot, ":ex_duelist", ":agent_no_offerer", slot_agent_in_duel_with),
       (agent_is_active, ":ex_duelist"),
       (agent_clear_relations_with_agents, ":ex_duelist"),
       (agent_set_slot, ":ex_duelist", slot_agent_in_duel_with, -1),
       (try_begin),
         (player_is_active, ":player_no"), #might be AI
         (multiplayer_send_int_to_player, ":player_no", multiplayer_event_cancel_duel, ":agent_no_offerer"),
       (else_try),
         (agent_force_rethink, ":ex_duelist"),
       (try_end),
     (try_end),
     (agent_set_slot, ":agent_no", slot_agent_in_duel_with, ":agent_no_offerer"),
     (agent_set_slot, ":agent_no_offerer", slot_agent_in_duel_with, ":agent_no"),
     (agent_clear_relations_with_agents, ":agent_no"),
     (agent_clear_relations_with_agents, ":agent_no_offerer"),
##     (agent_add_relation_with_agent, ":agent_no", ":agent_no_offerer", -1),
##     (agent_add_relation_with_agent, ":agent_no_offerer", ":agent_no", -1),
     (agent_get_player_id, ":player_no", ":agent_no"),
     (store_mission_timer_a, ":mission_timer"),
     (try_begin),
       (player_is_active, ":player_no"), #might be AI
       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_start_duel, ":agent_no_offerer"),
     (else_try),
       (agent_force_rethink, ":agent_no"),
     (try_end),
     (agent_set_slot, ":agent_no", slot_agent_duel_start_time, ":mission_timer"),
     (agent_get_player_id, ":agent_no_offerer_player", ":agent_no_offerer"),
     (try_begin),
       (player_is_active, ":agent_no_offerer_player"), #might be AI
       (multiplayer_send_int_to_player, ":agent_no_offerer_player", multiplayer_event_start_duel, ":agent_no"),
     (else_try),
       (agent_force_rethink, ":agent_no_offerer"),
     (try_end),
     (agent_set_slot, ":agent_no_offerer", slot_agent_duel_start_time, ":mission_timer"),
     ]),

  # script_game_get_multiplayer_server_option_for_mission_template
  # Input: arg1 = mission_template_id, arg2 = option_index
  # Output: trigger_result = 1 for option available, 0 for not available
  # reg0 = option_value
  ("game_get_multiplayer_server_option_for_mission_template",
   [
     (store_script_param, ":mission_template_id", 1),
     (store_script_param, ":option_index", 2),
     (try_begin),
       (eq, ":option_index", 0),
       (assign, reg0, "$g_multiplayer_team_1_faction"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 1),
       (assign, reg0, "$g_multiplayer_team_2_faction"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 2),
       (assign, reg0, "$g_multiplayer_num_bots_team_1"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 3),
       (assign, reg0, "$g_multiplayer_num_bots_team_2"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 4),
       (server_get_friendly_fire, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 5),
       (server_get_melee_friendly_fire, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 6),
       (server_get_friendly_fire_damage_self_ratio, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 7),
       (server_get_friendly_fire_damage_friend_ratio, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 8),
       (server_get_ghost_mode, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 9),
       (server_get_control_block_dir, reg0),       
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 10),
       (server_get_combat_speed, reg0),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (eq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #max game time
       (try_end),
       (eq, ":option_index", 11),
       (assign, reg0, "$g_multiplayer_game_max_minutes"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #max round time
       (try_end),
       (eq, ":option_index", 12),
       (assign, reg0, "$g_multiplayer_round_max_seconds"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (val_add, ":option_index", 1), #respawn as bot
       (try_end),
       (eq, ":option_index", 13),
       (assign, reg0, "$g_multiplayer_player_respawn_as_bot"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #respawn limit
       (try_end),
       (eq, ":option_index", 14),
       (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 15),
       (assign, reg0, "$g_multiplayer_game_max_points"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #point gained from flags
       (try_end),
       (eq, ":option_index", 16),
       (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_cf"),
         (val_add, ":option_index", 1), #point gained from capturing flag
       (try_end),
       (eq, ":option_index", 17),
       (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 18),
       (assign, reg0, "$g_multiplayer_respawn_period"),
       (set_trigger_result, 1),
     (try_end),     
     ]),

  # script_game_multiplayer_server_option_for_mission_template_to_string
  # Input: arg1 = mission_template_id, arg2 = option_index, arg3 = option_value
  # Output: s0 = option_text
  ("game_multiplayer_server_option_for_mission_template_to_string",
   [
     (store_script_param, ":mission_template_id", 1),
     (store_script_param, ":option_index", 2),
     (store_script_param, ":option_value", 3),
     (str_clear, s0),
     (try_begin),
       (eq, ":option_index", 0),
       (assign, reg1, 1),
       (str_store_string, s0, "str_team_reg1_faction"),
       (str_store_faction_name, s1, ":option_value"),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 1),
       (assign, reg1, 2),
       (str_store_string, s0, "str_team_reg1_faction"),
       (str_store_faction_name, s1, ":option_value"),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 2),
       (assign, reg1, 1),
       (str_store_string, s0, "str_number_of_bots_in_team_reg1"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 3),
       (assign, reg1, 2),
       (str_store_string, s0, "str_number_of_bots_in_team_reg1"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 4),
       (str_store_string, s0, "str_allow_friendly_fire"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 5),
       (str_store_string, s0, "str_allow_melee_friendly_fire"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 6),
       (str_store_string, s0, "str_friendly_fire_damage_self_ratio"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 7),
       (str_store_string, s0, "str_friendly_fire_damage_friend_ratio"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 8),
       (str_store_string, s0, "str_spectator_camera"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_free"),
       (else_try),
         (eq, ":option_value", 1),
         (str_store_string, s1, "str_stick_to_any_player"),
       (else_try),
         (eq, ":option_value", 2),
         (str_store_string, s1, "str_stick_to_team_members"),
       (else_try),
         (str_store_string, s1, "str_stick_to_team_members_view"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 9),
       (str_store_string, s0, "str_control_block_direction"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_automatic"),
       (else_try),
         (str_store_string, s1, "str_by_mouse_movement"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 10),
       (str_store_string, s0, "str_combat_speed"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_combat_speed_0"),
       (else_try),
         (eq, ":option_value", 1),
         (str_store_string, s1, "str_combat_speed_1"),
       (else_try),
         (eq, ":option_value", 2),
         (str_store_string, s1, "str_combat_speed_2"),
       (else_try),
         (eq, ":option_value", 3),
         (str_store_string, s1, "str_combat_speed_3"),
       (else_try),
         (str_store_string, s1, "str_combat_speed_4"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (try_begin),
         (eq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #max game time
       (try_end),
       (eq, ":option_index", 11),
       (str_store_string, s0, "str_map_time_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #max round time
       (try_end),
       (eq, ":option_index", 12),
       (str_store_string, s0, "str_round_time_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (val_add, ":option_index", 1), #respawn as bot
       (try_end),
       (eq, ":option_index", 13),
       (str_store_string, s0, "str_players_take_control_of_a_bot_after_death"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #respawn limit
       (try_end),
       (eq, ":option_index", 14),
       (str_store_string, s0, "str_defender_spawn_count_limit"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_unlimited"),
       (else_try),
         (assign, reg1, ":option_value"),
         (str_store_string, s1, "str_reg1"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 15),
       (str_store_string, s0, "str_team_points_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #point gained from flags
       (try_end),
       (eq, ":option_index", 16),
       (str_store_string, s0, "str_point_gained_from_flags"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_cf"),
         (val_add, ":option_index", 1), #point gained from capturing flag
       (try_end),
       (eq, ":option_index", 17),
       (str_store_string, s0, "str_point_gained_from_capturing_flag"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 18),
       (str_store_string, s0, "str_respawn_period"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 19),
       (str_store_string, s0, "str_initial_gold_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 20),
       (str_store_string, s0, "str_battle_earnings_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 21),
       (str_store_string, s0, "str_round_earnings_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (try_end),
     ]),

  # script_cf_multiplayer_team_is_available
  # Input: arg1 = player_no, arg2 = team_no
  # Output: none, true or false 
  ("cf_multiplayer_team_is_available",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":team_no", 2),
     (assign, ":continue_change_team", 1),
     (try_begin),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
       (is_between, ":team_no", 0, multi_team_spectator),
       (neg|teams_are_enemies, ":team_no", ":team_no"), #checking if it is a deathmatch or not
       (assign, ":continue_change_team", 0),
       #counting number of players for team balance checks
       (assign, ":number_of_players_at_team_1", 0),
       (assign, ":number_of_players_at_team_2", 0),
       (try_for_players, ":cur_player", "$g_ignore_server"),
         (player_is_active, ":cur_player"),
         (neq, ":cur_player", ":player_no"),
         (player_get_team_no, ":player_team", ":cur_player"),
         (try_begin),
           (eq, ":player_team", 0),
           (val_add, ":number_of_players_at_team_1", 1),
         (else_try),
           (eq, ":player_team", 1),
           (val_add, ":number_of_players_at_team_2", 1),
         (try_end),
       (try_end),
       (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),

       (try_begin),
         (ge, ":difference_of_number_of_players", 0),
         (val_add, ":difference_of_number_of_players", 1),
       (else_try),
         (val_add, ":difference_of_number_of_players", -1),
       (try_end),
     
       (try_begin),
         (eq, ":team_no", 0),
         (lt, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
         (assign, ":continue_change_team", 1),
       (else_try),
         (eq, ":team_no", 1),
         (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
         (gt, ":difference_of_number_of_players", ":checked_value"),
         (assign, ":continue_change_team", 1),
       (try_end),
       ##try for script stuff
       ##if teamOne/teamTwo > ratioOne/ratioTwo
       (try_begin),
        (eq, "$ratio_balance_used", 1),
        ##test for 0 on either side safeguards 0
        (try_begin),
          (eq, "$team_1_balance", 0),
          (eq, ":team_no", 0),
          (assign, ":continue_change_team", 0),
        (else_try),
          (eq, "$team_2_balance", 0),
          (eq, ":team_no", 1),
          (assign, ":continue_change_team", 0),
        (else_try),
          (this_or_next|eq, "$team_1_balance", 0),
          (eq, "$team_2_balance", 0),
          (assign, ":continue_change_team", 1),
        (else_try),
        #real stuff happens, test for division
          (eq, 1, 1),
          (assign, reg20, "$team_1_balance"),
          (assign, reg21, "$team_2_balance"),
          (assign, reg22, ":number_of_players_at_team_1"),
          (assign, reg23, ":number_of_players_at_team_2"),
          (fld, fp3, reg20),
          (fld, fp4, reg21),
          (fld, fp5, reg22),
          (fld, fp6, reg23),
          #(feval, "@fp3={reg20},fp4={reg21},fp5={reg22},fp6={reg23}"),
          #team2/team1
          (fdiv, fp1, fp3, fp4),
          (fdiv, fp2, fp5, fp6),
          (try_begin),
            ##only can join team 1 if real ratio is less than ideal ratio
            ##only can join team 2 if real ratio >= ideal ratio
            (fgt, fp2, fp1),
            (eq, ":team_no", 0),
            (assign, ":continue_change_team", 0),
          (else_try),
            (fgt, fp2, fp1),
            (eq, ":team_no", 1),
            (assign, ":continue_change_team", 1),
          (else_try),
            (feq, fp2, fp1),
            (assign, ":continue_change_team", 1),
          (else_try),
            (eq, ":team_no", 0),
            (assign, ":continue_change_team", 1),
          (else_try),
            (eq, ":team_no", 1),
            (assign, ":continue_change_team", 0),
          (try_end),

        (try_end),

      (try_end),

     (try_end),
     (eq, ":continue_change_team", 1),
     ]),

  # script_game_multiplayer_event_duel_offered
  # Input: arg1 = agent_no
  # Output: none
  ("game_multiplayer_event_duel_offered",
   [
     (store_script_param, ":agent_no", 1),
     (call_script,"script_client_get_my_agent"),
     (assign,":player_agent_no",reg0),
     (try_begin),
       (agent_is_active, ":player_agent_no"),
       (this_or_next|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, -1),
       (agent_check_offer_from_agent, ":player_agent_no", ":agent_no"),
       (neg|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, ":agent_no"), #don't allow spamming duel offers during countdown
       (multiplayer_send_int_to_server, multiplayer_event_offer_duel, ":agent_no"),
       (agent_get_player_id, ":player_no", ":agent_no"),
       (try_begin),
         (player_is_active, ":player_no"),
         (str_store_player_username, s0, ":player_no"),
       (else_try),
         (str_store_agent_name, s0, ":agent_no"),
       (try_end),
       (display_message, "str_a_duel_request_is_sent_to_s0"),
     (try_end),
     ]),
	 
  # script_game_get_multiplayer_game_type_enum
  # Input: none
  # Output: reg0:first type, reg1:type count
  ("game_get_multiplayer_game_type_enum",
   [
     (assign, reg0, multiplayer_game_type_deathmatch),
	   (assign, reg1, multiplayer_num_game_types),
	 ]),

  # script_game_multiplayer_get_game_type_mission_template
  # Input: arg1 = game_type
  # Output: mission_template 
  ("game_multiplayer_get_game_type_mission_template",
   [
     (assign, ":selected_mt", -1),
     (store_script_param, ":game_type", 1),
     (try_begin),
       (eq, ":game_type", multiplayer_game_type_deathmatch),
       (assign, ":selected_mt", "mt_multiplayer_dm"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_team_deathmatch),
       (assign, ":selected_mt", "mt_multiplayer_tdm"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_battle),
       (assign, ":selected_mt", "mt_multiplayer_bt"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_capture_the_flag),
       (assign, ":selected_mt", "mt_multiplayer_cf"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_headquarters),
       (assign, ":selected_mt", "mt_multiplayer_hq"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_siege),
       (assign, ":selected_mt", "mt_multiplayer_sg"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_duel),
       (assign, ":selected_mt", "mt_multiplayer_duel"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_commander),
       (assign, ":selected_mt", "mt_multiplayer_cb"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_king),
       (assign, ":selected_mt", "mt_multiplayer_kh"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_royale),
       (assign, ":selected_mt", "mt_multiplayer_br"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_scene_making),
       (assign, ":selected_mt", "mt_multiplayer_cm"),
     (try_end),
     (assign, reg0, ":selected_mt"),
     ]),

  # script_multiplayer_get_mission_template_game_type
  # Input: arg1 = mission_template_no
  # Output: game_type 
  ("multiplayer_get_mission_template_game_type",
   [
     (store_script_param, ":mission_template_no", 1),
     (assign, ":game_type", -1),
     (try_begin),
       (eq, ":mission_template_no", "mt_multiplayer_dm"),
       (assign, ":game_type", multiplayer_game_type_deathmatch),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_tdm"),
       (assign, ":game_type", multiplayer_game_type_team_deathmatch),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_bt"),
       (assign, ":game_type", multiplayer_game_type_battle),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_cf"),
       (assign, ":game_type", multiplayer_game_type_capture_the_flag),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_hq"),
       (assign, ":game_type", multiplayer_game_type_headquarters),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_sg"),
       (assign, ":game_type", multiplayer_game_type_siege),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_duel"),
       (assign, ":game_type", multiplayer_game_type_duel),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_cb"),
       (assign, ":game_type", multiplayer_game_type_commander),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_kh"),
       (assign, ":game_type", multiplayer_game_type_king),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_br"),
       (assign, ":game_type", multiplayer_game_type_royale),
     (try_end),
     (assign, reg0, ":game_type"),
     ]),


  # script_multiplayer_fill_available_factions_combo_button
  # Input: arg1 = overlay_id, arg2 = selected_faction_no, arg3 = opposite_team_selected_faction_no
  # Output: none 
  ("multiplayer_fill_available_factions_combo_button",
   [
     (store_script_param, ":overlay_id", 1),
     (store_script_param, ":selected_faction_no", 2),
##     (store_script_param, ":opposite_team_selected_faction_no", 3),
##     (try_for_range, ":cur_faction", "fac_britain", "fac_kingdoms_end"),
##       (try_begin),
##         (eq, ":opposite_team_selected_faction_no", ":cur_faction"),
##         (try_begin),
##           (gt, ":selected_faction_no", ":opposite_team_selected_faction_no"),
##           (val_sub, ":selected_faction_no", 1),
##         (try_end),
##       (else_try),
##         (str_store_faction_name, s0, ":cur_faction"),
##         (overlay_add_item, ":overlay_id", s0),
##       (try_end),
##     (try_end),
##     (val_sub, ":selected_faction_no", "fac_britain"),
##     (overlay_set_val, ":overlay_id", ":selected_faction_no"),
     (try_for_range_backwards, ":cur_faction", factions_begin, factions_end),
       (str_store_faction_name, s0, ":cur_faction"),
       (overlay_add_item, ":overlay_id", s0),
     (try_end),
     
     (val_sub, ":selected_faction_no", factions_begin),
     (store_sub,":num_factions_sub_1",factions_end,factions_begin),
     (val_sub,":num_factions_sub_1",1),
     (store_sub,":selected_faction_no",":num_factions_sub_1",":selected_faction_no"),
     (overlay_set_val, ":overlay_id", ":selected_faction_no"),
     ]),
  
  
# MM
  # script_multiplayer_get_troop_class
  # Input: arg1 = troop_no
  # Output: reg0: troop_class 
  # Output: reg1: troop_class_type
  # Output: reg2: troop_rank 
  # Output: reg3: troop_rank_type
  ("multiplayer_get_troop_class",
   [
     (store_script_param_1, ":troop_no"),
     (assign, ":troop_class", multi_troop_class_other),
     (assign, ":troop_class_type", multi_troop_class_other),
     (assign, ":troop_rank", mm_rank_ranker),
     (assign, ":troop_rank_type",-1),
     
     # mm_rank_ranker            = 1
     # mm_rank_musician          = 2
     # mm_rank_sergeant          = 3
     # mm_rank_officer           = 4
     # mm_rank_general           = 5
     
     # multi_troop_class_mm_infantry = 10
     # multi_troop_class_mm_grenadier = 11
     # multi_troop_class_mm_skirmisher = 12
     # multi_troop_class_mm_cavalry = 13
     # multi_troop_class_mm_artillery = 14
     # multi_troop_class_mm_sapper = 15

     # Classes
     (try_begin), # Infantry
       (this_or_next|is_between, ":troop_no", "trp_british_infantry","trp_british_foot_guard"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_british_ship_marine","trp_wellington"), # Brits #hotfix
       (this_or_next|is_between, ":troop_no", "trp_french_infantry","trp_french_old_guard"), # French
       (this_or_next|is_between, ":troop_no", "trp_french_ship_marine","trp_napoleon"), # French #hotfix
       (this_or_next|is_between, ":troop_no", "trp_prussian_infantry","trp_prussian_infantry_15"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_partizan","trp_russian_foot_guard"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_infantry","trp_austrian_grenzer"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_infantry_bavaria","trp_rhine_grenadier_guard"), # Rhine
       
       (this_or_next|is_between, ":troop_no", "trp_british_infantry_ai","trp_british_foot_guard_ai"), #brits line inf
			 (this_or_next|is_between, ":troop_no", "trp_french_infantry_ai","trp_french_old_guard_ai"), #french line inf
			 (this_or_next|is_between, ":troop_no", "trp_prussian_infantry_ai","trp_prussian_infantry_15_ai"), #Prussian line inf
			 (this_or_next|is_between, ":troop_no", "trp_russian_opol_ai","trp_russian_foot_guard_ai"), #Russian line inf
			 (this_or_next|is_between, ":troop_no", "trp_rhine_infantry_bavaria_ai","trp_rhine_grenadier_guard_ai"), #Rhine line inf
       (this_or_next|eq, ":troop_no","trp_austrian_infantry_ai"), #austrian line inf
       (this_or_next|eq, ":troop_no","trp_austrian_infantry2_ai"),        
      
       (this_or_next|eq, ":troop_no", "trp_british_ship_marine_ai"),
                    (eq, ":troop_no", "trp_french_ship_marine_ai"),
        
       (neq, ":troop_no", "trp_british_ship_cannon"), # British
       (neq, ":troop_no", "trp_french_ship_cannon"), # French     
        
       (assign, ":troop_class", multi_troop_class_mm_infantry),
     (else_try), # Guard Infantry
       (this_or_next|is_between, ":troop_no", "trp_british_foot_guard","trp_british_light_infantry"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_old_guard","trp_french_voltigeur"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_infantry_15","trp_prussian_infantry_rifle"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_foot_guard","trp_russian_infantry_rifle"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_grenadier","trp_austrian_infantry_rifle"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_grenadier_guard","trp_rhine_light_infantry_hessen"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_british_foot_guard_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_old_guard_ai"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_foot_guard_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_grenadier_guard_ai"),
                    (eq, ":troop_no", "trp_austrian_grenadier_ai"),
                   
       (assign, ":troop_class", multi_troop_class_mm_grenadier),
     (else_try), # Skirmisher
       (this_or_next|is_between, ":troop_no", "trp_british_light_infantry","trp_british_rifle"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_voltigeur","trp_french_hussar"), # French
       (this_or_next|is_between, ":troop_no", "trp_rhine_light_infantry_hessen","trp_rhine_light_infantry_bavaria"), # Rhine
       (this_or_next|is_between, ":troop_no", "trp_austrian_grenzer","trp_austrian_grenadier"), # Rhine         
       (this_or_next|eq, ":troop_no", "trp_british_light_infantry_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_voltigeur_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_hessen_ai"),
       #(this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_ai"), for when we add prussian inf
                    (eq, ":troop_no", "trp_austrian_grenzer_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_skirmisher),
     (else_try), # Riflemen
       (this_or_next|is_between, ":troop_no", "trp_british_rifle","trp_british_hussar"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_prussian_infantry_rifle","trp_prussian_dragoon"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_infantry_rifle","trp_russian_hussar"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_infantry_rifle","trp_austrian_hussar"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_light_infantry_bavaria","trp_rhine_mounted_jaeger"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry_rifle_ai"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_rifle_ai"),
       (this_or_next|eq, ":troop_no", "trp_british_rifle_ai"),
       (this_or_next|eq, "trp_rhine_light_infantry_bavaria_ai"), #Rhine rifle
                    (eq, ":troop_no", "trp_russian_infantry_rifle_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_rifle),
     (else_try), # Cavalry
       (this_or_next|is_between, ":troop_no", "trp_french_lancer","trp_french_dragoon"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_landwehr_cav","trp_prussian_cuirassier"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_uhlan","trp_russian_dragoon"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_uhlan","trp_austrian_light_horse"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_uhlan","trp_rhine_light_dragoon"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_austrian_uhlan_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_cossack_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_uhlan_ai"),
       (this_or_next|eq, ":troop_no", "trp_prussian_landwehr_cav_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_uhlan_ai"),
                    (eq, ":troop_no", "trp_french_lancer_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_lancer),
     (else_try), # Cavalry
       (this_or_next|is_between, ":troop_no", "trp_british_hussar","trp_british_light_dragoon"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_hussar","trp_french_lancer"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_hussar","trp_prussian_landwehr_cav"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_hussar","trp_russian_uhlan"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_hussar","trp_austrian_uhlan"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_mounted_jaeger","trp_rhine_uhlan"), # Rhine
              
       (this_or_next|eq, ":troop_no", "trp_british_hussar_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_hussar_ai"),
       (this_or_next|eq, ":troop_no", "trp_prussian_hussar_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_hussar_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_mounted_jaeger_ai"),
                    (eq, ":troop_no", "trp_austrian_hussar_ai"),             
       
       (assign, ":troop_class", multi_troop_class_mm_hussar),
     (else_try), # Cavalry
       (this_or_next|is_between, ":troop_no", "trp_british_light_dragoon","trp_british_dragoon"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_dragoon","trp_french_cuirassier"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_dragoon","trp_prussian_hussar"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_dragoon","trp_russian_horse_guard"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_light_horse","trp_austrian_cuirassier"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_light_dragoon","trp_rhine_cuirassier"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_british_light_dragoon_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_dragoon_ai"),
       (this_or_next|eq, ":troop_no", "trp_prussian_dragoon_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_dragoon_ai"),
       (this_or_next|eq, ":troop_no", "trp_austrian_light_horse_ai"),
       (this_or_next|eq, "trp_rhine_light_dragoon_ai"),
                    (eq, ":troop_no", "trp_austrian_dragoon_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_dragoon),
     (else_try), # Cavalry
       (this_or_next|is_between, ":troop_no", "trp_french_cuirassier","trp_french_grenadier_a_cheval"), # French
       (this_or_next|is_between, ":troop_no", "trp_russian_horse_guard","trp_russian_arty"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_cuirassier","trp_austrian_arty"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_cuirassier","trp_rhine_garde_du_corps"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_french_cuirassier_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_carabineer_ai"),
       (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_cuirassier_ai"),
                    (eq, ":troop_no", "trp_austrian_cuirassier_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_cuirassier),
     (else_try), # Cavalry
       (this_or_next|is_between, ":troop_no", "trp_british_dragoon","trp_british_arty"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_grenadier_a_cheval","trp_french_arty"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_cuirassier","trp_prussian_arty"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_rhine_garde_du_corps","trp_rhine_arty"), # Rhine
                    
       (this_or_next|eq, ":troop_no", "trp_prussian_cuirassier_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_grenadier_a_cheval_ai"),
       (this_or_next|eq, ":troop_no", "trp_british_horseguard_ai"),
       (this_or_next|eq, ":troop_no", "trp_rhine_garde_du_corps_ai"),
                    (eq, ":troop_no", "trp_british_dragoon_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_heavycav),
     (else_try), # Rockets
       (this_or_next|eq, ":troop_no", "trp_british_rocket"),
                    (eq, ":troop_no", "trp_british_rocket_ai"),
       (assign, ":troop_class", multi_troop_class_mm_rocket),
     (else_try), #Sappers
       (this_or_next|eq, ":troop_no", "trp_french_sapper"), # French
       (this_or_next|eq, ":troop_no", "trp_russian_sapper"), # Russian
       (this_or_next|eq, ":troop_no", "trp_british_sapper"), # British
       (this_or_next|eq, ":troop_no", "trp_austrian_sapper"), # Austrian
       (this_or_next|eq, ":troop_no", "trp_prussian_sapper"), # Prussian
       (this_or_next|eq, ":troop_no", "trp_rhine_sapper"), # Rhine
       # set these as sappers, so you can limit them in commander battle under the sapper thingie.
       (this_or_next|eq, ":troop_no", "trp_british_ship_ai"),
       (this_or_next|eq, ":troop_no", "trp_french_ship_ai"),
                    (eq, ":troop_no", "trp_russian_partizan_ai"),
                    
       (assign, ":troop_class", multi_troop_class_mm_sapper),       
     (else_try), #Surgeon  #patch1115 59/7
       (this_or_next|eq, ":troop_no", "trp_british_medic"), # brit    
       (this_or_next|eq, ":troop_no", "trp_french_medic"), # fra
       (this_or_next|eq, ":troop_no", "trp_prussian_medic"), # pruss
       (this_or_next|eq, ":troop_no", "trp_russian_medic"), # Rus
       (this_or_next|eq, ":troop_no", "trp_austrian_medic"), # Aus
       (eq, ":troop_no", "trp_rhine_medic"), # Rhine  
       
       (assign, ":troop_class", multi_troop_class_mm_surgeon), 
     (else_try), # Artillery
       (this_or_next|is_between, ":troop_no", "trp_british_arty","trp_british_medic"), # Brits
       (this_or_next|is_between, ":troop_no", "trp_french_arty","trp_french_medic"), # French
       (this_or_next|is_between, ":troop_no", "trp_prussian_arty","trp_prussian_medic"), # Prussian
       (this_or_next|is_between, ":troop_no", "trp_russian_arty","trp_russian_medic"), # Russian
       (this_or_next|is_between, ":troop_no", "trp_austrian_arty","trp_austrian_medic"), # Austrian
       (this_or_next|is_between, ":troop_no", "trp_rhine_arty","trp_rhine_medic"), # Austrian
       #Additional commander battle artillery
       (this_or_next|eq, ":troop_no", "trp_british_arty_ai"), # British
       (this_or_next|eq, ":troop_no", "trp_french_arty_ai"), # French
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_ai"), # Prussian
       (this_or_next|eq, ":troop_no", "trp_russian_arty_ai"), # Russian
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_ai"), # Austrian
       (this_or_next|eq, ":troop_no", "trp_rhine_arty_ai"), # Rhine
       (this_or_next|eq, ":troop_no", "trp_british_arty_alt_ai"), # British
       (this_or_next|eq, ":troop_no", "trp_french_arty_alt_ai"), # French
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_alt_ai"), # Prussian
       (this_or_next|eq, ":troop_no", "trp_russian_arty_alt_ai"), # Russian
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_alt_ai"), # Austrian
       (this_or_next|eq, ":troop_no", "trp_rhine_arty_alt_ai"), # Rhine
       (this_or_next|is_between, ":troop_no", "trp_british_arty_commander","trp_multiplayer_end"), # Commander battle officers
            
       (this_or_next|eq, ":troop_no", "trp_british_ship_cannon"), # British
       (this_or_next|eq, ":troop_no", "trp_french_ship_cannon"), # French
       
       
       (this_or_next|is_between, ":troop_no", "trp_british_arty_ai","trp_french_infantry_ai"),
			 (this_or_next|is_between, ":troop_no", "trp_french_arty_ai","trp_prussian_infantry_ai"),
			 (this_or_next|is_between, ":troop_no", "trp_prussian_arty_ai","trp_russian_partizan_ai"),
		   (this_or_next|is_between, ":troop_no", "trp_russian_arty_ai","trp_austrian_infantry_ai"),
			 (this_or_next|is_between, ":troop_no", "trp_austrian_arty_ai","trp_rhine_infantry_bavaria_ai"),
			 (this_or_next|is_between, ":troop_no", "trp_rhine_arty_ai","trp_british_infantry"),
       
            
       (eq,":troop_no", "trp_player"),
            
       (assign, ":troop_class", multi_troop_class_mm_artillery),
     (try_end),
     
     #determine troop class type
     (assign, ":troop_class_type", ":troop_class"),
     (try_begin), #Count infantry and guard as the same
       (eq,":troop_class",multi_troop_class_mm_grenadier),
       (assign,":troop_class_type",multi_troop_class_mm_infantry),
     (else_try), #Count light inf and riflemen as the same
       (eq,":troop_class",multi_troop_class_mm_rifle),
       (assign,":troop_class_type",multi_troop_class_mm_skirmisher),
     (else_try), #Count all cavalry as the same
       (this_or_next|eq,":troop_class",multi_troop_class_mm_lancer),
       (this_or_next|eq,":troop_class",multi_troop_class_mm_hussar),
       (this_or_next|eq,":troop_class",multi_troop_class_mm_dragoon),
       (this_or_next|eq,":troop_class",multi_troop_class_mm_cuirassier),
       (eq,":troop_class",multi_troop_class_mm_heavycav),
       (assign,":troop_class_type",multi_troop_class_mm_cavalry),
     (else_try), #Count rockets and standard artillery as the same
       (eq,":troop_class",multi_troop_class_mm_rocket),
       (assign,":troop_class_type",multi_troop_class_mm_artillery),
     (try_end),

     
     
     (call_script,"script_multiplayer_get_troop_rank",":troop_no"),
     (assign,":troop_rank",reg0),
     (assign,":troop_rank_type",reg1),
          
     (assign, reg0, ":troop_class"),
     (assign, reg1, ":troop_class_type"),
     (assign, reg2, ":troop_rank"),
     (assign, reg3, ":troop_rank_type"),
     ]),
  
  # script_multiplayer_get_troop_rank
  # Input: arg1 = troop_no
  # Output: reg0: troop_rank 
  # Output: reg1: troop_rank_type 
  ("multiplayer_get_troop_rank",
   [
     (store_script_param_1, ":troop_no"),
     (assign, ":troop_rank", mm_rank_ranker),
     (assign, ":troop_rank_type", -1),
     
     # Ranks
     (try_begin), # Musician
       (assign,":is_musician",0),
       (try_begin),
         #fifer
         (this_or_next|eq, ":troop_no", "trp_british_infantry_flute"),
         (this_or_next|eq, ":troop_no", "trp_british_infantry2_flute"),
         (this_or_next|eq, ":troop_no", "trp_british_highlander_pipes"),
         (this_or_next|eq, ":troop_no", "trp_british_foot_guard_flute"),
         (this_or_next|eq, ":troop_no", "trp_british_light_infantry_horn"),
         (this_or_next|eq, ":troop_no", "trp_british_rifle_horn"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry_flute"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry2_flute"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry_vistula_flute"),
         (this_or_next|eq, ":troop_no", "trp_french_old_guard_flute"),
         (this_or_next|eq, ":troop_no", "trp_french_voltigeur_horn"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_flute"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry2_flute"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_kurmark_flute"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_freikorps_flute"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_flute"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_rifle_horn"),
         (this_or_next|eq, ":troop_no", "trp_russian_infantry_flute"),
         (this_or_next|eq, ":troop_no", "trp_russian_grenadier_flute"),
         (this_or_next|eq, ":troop_no", "trp_russian_foot_guard_flute"),
         (this_or_next|eq, ":troop_no", "trp_russian_infantry_rifle_horn"),
         (this_or_next|eq, ":troop_no", "trp_austrian_infantry_flute"),
         (this_or_next|eq, ":troop_no", "trp_austrian_infantry2_flute"),
         (this_or_next|eq, ":troop_no", "trp_austrian_grenzer_flute"),
         (this_or_next|eq, ":troop_no", "trp_austrian_grenadier_flute"),
         (this_or_next|eq, ":troop_no", "trp_austrian_infantry_rifle_horn"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_bavaria_flute"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg_flute"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_saxony_flute"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg2_flute"),
         (this_or_next|eq, ":troop_no", "trp_rhine_grenadier_guard_flute"),
         (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_hessen_horn"),
         (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_bavaria_horn"),
       #cav
         (this_or_next|eq, ":troop_no", "trp_british_hussar_bugle"),
         (this_or_next|eq, ":troop_no", "trp_british_light_dragoon_bugle"),
         (this_or_next|eq, ":troop_no", "trp_british_dragoon_bugle"),
         (this_or_next|eq, ":troop_no", "trp_british_horseguard_bugle"),
         (this_or_next|eq, ":troop_no", "trp_french_hussar_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_french_lancer_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_french_dragoon_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_french_cuirassier_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_french_carabineer_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_french_grenadier_a_cheval_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_prussian_dragoon_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_prussian_hussar_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_prussian_landwehr_cav_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_prussian_cuirassier_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_austrian_hussar_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_austrian_uhlan_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_austrian_light_horse_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_austrian_dragoon_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_austrian_cuirassier_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_russian_hussar_trumpet"),  #added missing russian horns
         (this_or_next|eq, ":troop_no", "trp_russian_uhlan_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_russian_dragoon_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_rhine_mounted_jaeger_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_rhine_uhlan_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_rhine_light_dragoon_trumpet"),
         (this_or_next|eq, ":troop_no", "trp_rhine_cuirassier_trumpet"),
                      (eq, ":troop_no", "trp_rhine_garde_du_corps_trumpet"),
                      
         (assign, ":troop_rank_type", 1), #musician
         (assign,":is_musician",1),
       (else_try),
         #drummers
         (this_or_next|eq, ":troop_no", "trp_british_infantry_drum"),
         (this_or_next|eq, ":troop_no", "trp_british_infantry2_drum"),
         (this_or_next|eq, ":troop_no", "trp_british_highlander_drum"),
         (this_or_next|eq, ":troop_no", "trp_british_foot_guard_drum"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry_drum"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry2_drum"),
         (this_or_next|eq, ":troop_no", "trp_french_infantry_vistula_drum"),
         (this_or_next|eq, ":troop_no", "trp_french_old_guard_drum"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_drum"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry2_drum"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_kurmark_drum"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_freikorps_drum"),
         (this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_drum"),
         (this_or_next|eq, ":troop_no", "trp_russian_infantry_drum"),
         (this_or_next|eq, ":troop_no", "trp_russian_grenadier_drum"),
         (this_or_next|eq, ":troop_no", "trp_russian_foot_guard_drum"),
         (this_or_next|eq, ":troop_no", "trp_austrian_infantry_drum"),
         (this_or_next|eq, ":troop_no", "trp_austrian_infantry2_drum"),
         (this_or_next|eq, ":troop_no", "trp_austrian_grenzer_drum"),
         (this_or_next|eq, ":troop_no", "trp_austrian_grenadier_drum"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_bavaria_drum"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg_drum"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_saxony_drum"),
         (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg2_drum"),
                      (eq, ":troop_no", "trp_rhine_grenadier_guard_drum"),
         
         (assign, ":troop_rank_type", 2),	#drummer
         (assign,":is_musician",1),
       (try_end),
       
       (eq,":is_musician",1),
       (assign, ":troop_rank", mm_rank_musician),
     (else_try), # Sarge
        # Brits
       (this_or_next|eq, ":troop_no", "trp_british_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_infantry2_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_highlander_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_foot_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_light_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_rifle_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_hussar_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_light_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_horseguard_nco"),
       (this_or_next|eq, ":troop_no", "trp_british_arty_nco"),
       # French
       (this_or_next|eq, ":troop_no", "trp_french_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_infantry2_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_infantry_vistula_colours"),
       (this_or_next|eq, ":troop_no", "trp_french_old_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_voltigeur_colours"),
       (this_or_next|eq, ":troop_no", "trp_french_hussar_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_lancer_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_cuirassier_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_carabineer_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_grenadier_a_cheval_nco"),
       (this_or_next|eq, ":troop_no", "trp_french_arty_nco"),
       # Prussian
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry2_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_kurmark_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_freikorps_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_rifle_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_hussar_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_landwehr_cav_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_cuirassier_nco"),
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_nco"),
        # Russian
       (this_or_next|eq, ":troop_no", "trp_russian_opol_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_grenadier_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_foot_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_infantry_rifle_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_hussar_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_uhlan_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_cossack_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_russian_arty_nco"),
       # Austria
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry2_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_grenzer_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_grenadier_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry_rifle_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_hussar_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_uhlan_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_light_horse_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_cuirassier_nco"),
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_nco"),
       # Rhine
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_bavaria_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_saxony_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg2_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_grenadier_guard_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_hessen_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_bavaria_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_mounted_jaeger_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_uhlan_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_dragoon_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_cuirassier_nco"),
       (this_or_next|eq, ":troop_no", "trp_rhine_garde_du_corps_nco"),
                    (eq, ":troop_no", "trp_rhine_arty_nco"),
       (assign, ":troop_rank", mm_rank_sergeant),
     (else_try), # Officer
        # Brits
       (this_or_next|eq, ":troop_no", "trp_british_ship_captain"),
       (this_or_next|eq, ":troop_no", "trp_british_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_infantry2_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_highlander_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_foot_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_light_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_rifle_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_hussar_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_light_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_horseguard_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_arty_officer"),
       (this_or_next|eq, ":troop_no", "trp_british_ship_captain"),
       # French
       (this_or_next|eq, ":troop_no", "trp_french_ship_captain"),
       (this_or_next|eq, ":troop_no", "trp_french_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_infantry2_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_infantry_vistula_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_old_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_voltigeur_officer"), #patch1115 fix 26/1
       (this_or_next|eq, ":troop_no", "trp_french_hussar_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_lancer_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_cuirassier_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_carabineer_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_grenadier_a_cheval_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_arty_officer"),
       (this_or_next|eq, ":troop_no", "trp_french_ship_captain"),
       # Prussian
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry2_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_kurmark_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_freikorps_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_15_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_infantry_rifle_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_hussar_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_landwehr_cav_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_cuirassier_officer"),
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_officer"),
        # Russian
       (this_or_next|eq, ":troop_no", "trp_russian_opol_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_grenadier_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_foot_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_infantry_rifle_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_hussar_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_uhlan_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_cossack_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_horse_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_russian_arty_officer"),
       # Austria
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry2_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_grenzer_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_grenadier_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_infantry_rifle_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_hussar_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_uhlan_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_light_horse_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_cuirassier_officer"),
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_officer"),
       # Rhine
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_bavaria_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_saxony_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_infantry_wurttemberg2_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_grenadier_guard_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_hessen_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_infantry_bavaria_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_mounted_jaeger_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_uhlan_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_light_dragoon_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_cuirassier_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_garde_du_corps_officer"),
       (this_or_next|eq, ":troop_no", "trp_rhine_arty_officer"),
       
       (this_or_next|eq, ":troop_no", "trp_british_arty_commander"), #lets add in com bat arty officers #patch1115 fix 43/17  
       (this_or_next|eq, ":troop_no", "trp_british_arty_alt_commander"),
       (this_or_next|eq, ":troop_no", "trp_french_arty_commander"),
       (this_or_next|eq, ":troop_no", "trp_french_arty_alt_commander"),
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_commander"),
       (this_or_next|eq, ":troop_no", "trp_prussian_arty_alt_commander"),
       (this_or_next|eq, ":troop_no", "trp_russian_arty_commander"),
       (this_or_next|eq, ":troop_no", "trp_russian_arty_alt_commander"),
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_commander"),
       (this_or_next|eq, ":troop_no", "trp_austrian_arty_alt_commander"), 
       (this_or_next|eq, ":troop_no", "trp_rhine_arty_commander"),
                    (eq, ":troop_no", "trp_rhine_arty_alt_commander"), #arty off end
       
       (assign, ":troop_rank", mm_rank_officer),
     (else_try), # General
       (this_or_next|is_between,":troop_no","trp_quick_battle_troop_britain_1","trp_quick_battle_troops_end"), 
       (this_or_next|eq, ":troop_no", "trp_wellington"), # Brits
       (this_or_next|eq, ":troop_no", "trp_napoleon"), # French
       (this_or_next|eq, ":troop_no", "trp_prussian_blucher"), # Prussian
       (this_or_next|eq, ":troop_no", "trp_kutuzov"), # Russian
       (this_or_next|eq, ":troop_no", "trp_schwarzenberg"), # Austrian
                    (eq, ":troop_no", "trp_friedrich_august"), # Rhine
       (assign, ":troop_rank", mm_rank_general),
     (try_end),
     
     (assign, reg0, ":troop_rank"),
     (assign, reg1, ":troop_rank_type"),
  ]),
 
  # script_cf_multiplayer_agent_is_musician
  # Input: arg1 = agent_no
  # Output: reg1: yes/no
  ("cf_multiplayer_agent_is_musician",
   [
     (store_script_param_1, ":agent_no"),
     
     (agent_is_active,":agent_no"),
     (agent_get_troop_id,":troop_no",":agent_no"),
     (assign, reg50, 0),
     (lua_push_int, ":agent_no"),
     (lua_call, "@isVip", 1),
     (this_or_next|eq, reg50, 1),
     (troop_slot_eq,":troop_no",slot_troop_rank,mm_rank_musician),
   ]),
     
  #script_multiplayer_clear_player_selected_items
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_clear_player_selected_items",
   [
     (store_script_param, ":player_no", 1),
     (try_for_range, ":slot_no", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_set_slot, ":player_no", ":slot_no", -1),
     (try_end),
     ]),
  

  #script_multiplayer_init_player_slots
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_init_player_slots",
   [
     (store_script_param, ":player_no", 1),
     (call_script, "script_multiplayer_clear_player_selected_items", ":player_no"),
     (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
     (player_set_slot, ":player_no", slot_player_poll_disabled_until_time, 0),

     (player_set_slot, ":player_no", slot_player_bot_type_1_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_2_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_3_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_4_wanted, 0),

     (player_set_slot, ":player_no", slot_player_teamkills, 0),
     (player_set_slot, ":player_no", slot_player_last_teamkill_at, 0),
     #patch1115 fix 43/5 begin
     (player_set_slot, ":player_no", slot_player_musician_spawned, 0),
     (player_set_slot, ":player_no", slot_player_drummer_spawned, 0),
     (player_set_slot, ":player_no", slot_player_flag_spawned, 0),
     (player_set_slot, ":player_no", slot_player_formation_change, 0),
     (player_set_slot, ":player_no", slot_player_formation_change_2, 0),
     (player_set_slot, ":player_no", slot_player_bot_order, 0),
     ]),

  #script_multiplayer_initialize_belfry_wheel_rotations
  # Input: none
  # Output: none
  ("multiplayer_initialize_belfry_wheel_rotations",
   [
      (try_for_prop_instances, ":winch_id", "spr_winch", somt_object),
        (prop_instance_initialize_rotation_angles, ":winch_id"),   
      (try_end),

      (try_for_prop_instances, ":winch_b_id", "spr_winch_b", somt_object),
        (prop_instance_initialize_rotation_angles, ":winch_b_id"),   
      (try_end),
     ]),

  #script_send_open_close_information_of_object
  # Input: arg1 = mission_object_id
  # Output: none
  ("send_open_close_information_of_object",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":scene_prop_no", 2),
     
     (try_for_prop_instances, ":instance_id", ":scene_prop_no", somt_object),
       (scene_prop_slot_eq,":instance_id",scene_prop_open_or_close_slot,1),
      
       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_scene_prop_open_or_close, ":instance_id"),
     (try_end),
     ]),

  #script_multiplayer_send_initial_information
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_send_initial_information",
   [
     (store_script_param, ":player_no", 1),
     
     (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
     (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_auto_team_balance_limit, "$g_multiplayer_auto_team_balance_limit"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_num_bots_voteable, "$g_multiplayer_num_bots_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_factions_voteable, "$g_multiplayer_factions_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_maps_voteable, "$g_multiplayer_maps_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_kick_voteable, "$g_multiplayer_kick_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ban_voteable, "$g_multiplayer_ban_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_allow_player_banners, "$g_multiplayer_allow_player_banners"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_type, "$g_multiplayer_game_type"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
     
     # MM
     (str_store_server_name, s0),
     (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_server_name, s0),
     (store_current_scene, ":cur_scene"),
     (val_sub, ":cur_scene", "scn_mp_ambush"),
     (val_add, ":cur_scene", "str_mp_ambush"),
     (str_store_string, s0, ":cur_scene"),
     (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_current_scene, s0),

     (assign,":packed_value","$g_team_1_build_points"),
     (val_lshift,":packed_value",16),
     (val_add,":packed_value","$g_team_2_build_points"),     
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_build_points,":packed_value"),
     #MM
     
     (store_mission_timer_a, ":mission_timer"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_server_mission_timer_while_player_joined, ":mission_timer"),

     (try_begin),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_count, "$g_multiplayer_number_of_respawn_count"),
     (try_end),

     (try_for_agents, ":cur_agent"), #send if any agent is carrying any scene object
       (agent_is_active,":cur_agent"),
       (agent_is_alive,":cur_agent"),
       (agent_is_human, ":cur_agent"),
       (agent_get_attached_scene_prop, ":attached_scene_prop", ":cur_agent"),
       (ge, ":attached_scene_prop", 0),
       
       (agent_get_slot, ":x_offset", ":cur_agent", slot_agent_attached_prop_offset_x),
       (agent_get_slot, ":y_offset", ":cur_agent", slot_agent_attached_prop_offset_y),
       (agent_get_slot, ":z_offset", ":cur_agent", slot_agent_attached_prop_offset_z),
       (val_add,":z_offset",5000), # add 5k because we get rid of any minus values.
       (val_mul,":z_offset",10000), # mul by 10k, to make space for agentid.
       (val_add,":z_offset",":cur_agent"), # add it.
       (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop,":attached_scene_prop",":x_offset",":y_offset",":z_offset"),
     (try_end),

     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_6m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_8m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_10m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_12m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_14m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_winch_b"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_e_sally_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_sally_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_earth_sally_gate_left"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_earth_sally_gate_right"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_viking_keep_destroy_sally_door_left"),     
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_viking_keep_destroy_sally_door_right"),     
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_door_destructible"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_mm_restroom_door"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_door_b"),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_king),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

       (store_mission_timer_a, ":current_time"),
       (val_sub, ":current_time", "$g_round_start_time"),
       (val_mul, ":current_time", -1),

       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, ":current_time"),
       (assign,":fail_this",0),
       (try_begin), #So it sends flag info too
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_king),
         (assign,":fail_this",1),
       (try_end),
       (eq,":fail_this",0),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       #if game type is capture the flag send current flag situations to each player.
       (team_get_slot, ":flag_situation_team_1", 0, slot_team_flag_situation),
       (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, 0, ":flag_situation_team_1"),
       (team_get_slot, ":flag_situation_team_2", 1, slot_team_flag_situation),
       (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, 1, ":flag_situation_team_2"),
     (else_try),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_king),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       
       #if game type is headquarters send number of agents placed around each pole's around to player.
       (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
         (assign, ":number_of_agents_around_flag_team_1", 0),
         (assign, ":number_of_agents_around_flag_team_2", 0),

         (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
         (prop_instance_get_position, pos3, ":pole_id"), #pos3 holds pole position. 
         (set_fixed_point_multiplier,100),
         
         (try_for_agents, ":cur_agent",pos3,601),
           (agent_is_active,":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (agent_is_alive, ":cur_agent"),
           (neg|agent_is_non_player, ":cur_agent"),
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
           (get_sq_distance_between_positions, ":squared_dist", pos3, pos1),
           (get_sq_distance_between_position_heights, ":squared_height_dist", pos3, pos1),
           (val_add, ":squared_dist", ":squared_height_dist"),
           (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
           (try_begin),
             (eq, ":cur_agent_team", 0),
             (val_add, ":number_of_agents_around_flag_team_1", 1),
           (else_try),
             (eq, ":cur_agent_team", 1),
             (val_add, ":number_of_agents_around_flag_team_2", 1),
           (try_end),
         (try_end),

         (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
         (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
         (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
       (try_end),

       #if game type is headquarters send owners of each pole to player.
       (assign, "$g_placing_initial_flags", 1),
       (assign,":end_cond","$g_number_of_flags"),
       (try_for_range, ":cur_flag", 0, ":end_cond"),
         (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":cur_flag"),
         (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_slot"),
         (store_mul, ":cur_flag_owner_code", ":cur_flag_owner", 100),
         (val_add, ":cur_flag_owner_code", ":cur_flag_owner"),
         (val_add, ":cur_flag_owner_code", 1),
         (val_mul, ":cur_flag_owner_code", -1),
         (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_change_flag_owner, ":cur_flag", ":cur_flag_owner_code"),
       (try_end),
       (assign, "$g_placing_initial_flags", 0),
     (try_end),

    # MM
    # send prop sizes.    
    (try_for_range,":prop_type", "spr_mm_ice1", "spr_scene_props_end"),
      (neg|is_between,":prop_type",mm_unlimber_button_types_begin,mm_unlimber_button_types_end), # dont send those scales.
      (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_temporary_object),
        (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1),
        (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_scaled,1), # is scaled.
        
        (scene_prop_get_slot,":x_scale",":cur_instance_id",scene_prop_slot_x_scale),
        (scene_prop_get_slot,":y_scale",":cur_instance_id",scene_prop_slot_y_scale),
        (scene_prop_get_slot,":z_scale",":cur_instance_id",scene_prop_slot_z_scale),
        
        # at least one is above 0?
        (this_or_next|gt,":x_scale",0),
        (this_or_next|gt,":y_scale",0),
        (gt,":z_scale",0),
        
        # add 5000 to the values to support up to -5times scale and + 60 or 27 whatever.
        (val_add,":x_scale",5000),
        (val_add,":y_scale",5000),
        (val_add,":z_scale",5000),
        
        #define max value for the scales...
        (val_clamp,":x_scale",0,65535),
        (val_clamp,":y_scale",0,65535),
        (val_clamp,":z_scale",0,32767),
        
        # pack the shit.
        (assign,":sendvar1",":cur_instance_id"),
        (val_lshift, ":sendvar1", 16), 
        (val_add,":sendvar1",":x_scale"),
        (assign,":sendvar2",":z_scale"),
        (val_lshift, ":sendvar2", 16), 
        (val_add,":sendvar2",":y_scale"),
        
        # and send it off.
        (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_scale_object,":sendvar1",":sendvar2"),
      (try_end),
    (try_end),

    
    # MM
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_use_class_limits, "$g_use_class_limits"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_class_limit_player_count, "$g_use_class_limits_player_count"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_grenadier, "$g_limit_grenadier"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_skirmisher, "$g_limit_skirmisher"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_rifle, "$g_limit_rifle"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_cavalry, "$g_limit_cavalry"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_lancer, "$g_limit_lancer"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_hussar, "$g_limit_hussar"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_dragoon, "$g_limit_dragoon"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_cuirassier, "$g_limit_cuirassier"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_heavycav, "$g_limit_heavycav"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_artillery, "$g_limit_artillery"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_rocket, "$g_limit_rocket"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_arty_train, "$g_limit_arty_train"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_sapper, "$g_limit_sapper"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_surgeon, "$g_limit_surgeon"),#patch1115 59/8
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_musician, "$g_limit_musician"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_sergeant, "$g_limit_sergeant"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_officer, "$g_limit_officer"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_limit_general, "$g_limit_general"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_squad_size, "$g_squad_size_limit"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_scale_squad, "$g_scale_squad_size"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_max_num_bots, "$g_max_num_bots"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_no_rambo, "$g_no_rambo"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_no_rambo_range, "$g_no_rambo_range"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_line_inf_spread, "$g_no_line_inf_spread"),#patch1115 63/7
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_num_custom_maps, "$g_num_custom_maps"),#patch1115 64/5
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_build_points_1, "$g_team_1_max_build_points"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_build_points_2, "$g_team_2_max_build_points"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_allow_multiple_firearms, "$g_allow_multiple_firearms"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_groupfight_mode, "$g_groupfight_mode"),#patch1115 60/7
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_competitive_score_mode, "$g_competitive_score_mode"),#G:comp_score: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_custom_directional_keys, "$g_enable_custom_directional_keys"),#custom_keys: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_custom_action_v, "$g_enable_action_v"),#custom_keys: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_custom_action_b, "$g_enable_action_b"),#custom_keys: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_number_of_custom_strings, "$g_number_of_custom_strings"),#custom_strings: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_custom_chat, "$g_enable_custom_chat"),#custom_chat: 
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_enable_bonuses, "$g_bonuses_enabled"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_fall_off_horse, "$g_chance_of_falling_off_horse"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_horse_dying, "$g_damage_from_horse_dying"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_bonus_strength, "$g_bonus_strength"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_bonus_range, "$g_bonus_range"),
    (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_auto_ff, "$g_auto_FF"),
    # MM
    
    #modders_props:custom_strings: update custom strings for player who joined
    (call_script, "script_multiplayer_server_update_custom_strings", ":player_no"),
    (call_script, "script_multiplayer_server_update_conquest_flag_strings", ":player_no"),
  ]),

  #script_multiplayer_remove_headquarters_flags
  # Input: none
  # Output: none
  ("multiplayer_remove_headquarters_flags",
   [
     (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
     (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
       (replace_scene_props, ":headquarters_flag_no", "spr_empty"),
     (try_end),
     ]),
  
  #script_multiplayer_init_mission_variables
  ("multiplayer_init_mission_variables",
   [
     (assign, "$g_multiplayer_team_1_first_spawn", 1),
     (assign, "$g_multiplayer_team_2_first_spawn", 1),
     (assign, "$g_multiplayer_poll_running", 0),
##     (assign, "$g_multiplayer_show_poll_when_suitable", 0),
     (assign, "$g_waiting_for_confirmation_to_terminate", 0),
     (assign, "$g_confirmation_result", 0),
     (assign, "$g_team_balance_next_round", 0),
     (team_get_faction, "$g_multiplayer_team_1_faction", 0),
     (team_get_faction, "$g_multiplayer_team_2_faction", 1),
     (assign, "$g_multiplayer_next_team_1_faction", "$g_multiplayer_team_1_faction"),
     (assign, "$g_multiplayer_next_team_2_faction", "$g_multiplayer_team_2_faction"),

     (assign, "$g_multiplayer_bot_type_1_wanted", 0),
     (assign, "$g_multiplayer_bot_type_2_wanted", 0),
     (assign, "$g_multiplayer_bot_type_3_wanted", 0),
     (assign, "$g_multiplayer_bot_type_4_wanted", 0),
      
     
     (assign, "$g_multiplayer_select_presentation_unit_type", troop_select_type_infantry),
      
     (call_script, "script_music_set_situation_with_culture", mtf_sit_multiplayer_fight),
     ]),

  #script_multiplayer_set_item_available_for_troop
  # Input: arg1 = item_no, arg2 = troop_no
  # Output: none
  ("multiplayer_set_item_available_for_troop",
   [
     (store_script_param, ":item_no", 1),
     (store_script_param, ":troop_no", 2),
     (store_sub, ":item_troop_slot", ":troop_no", multiplayer_troops_begin),
     (val_add, ":item_troop_slot", slot_item_multiplayer_availability_linked_list_begin),
     (item_set_slot, ":item_no", ":item_troop_slot", 1),
     ]),

  #script_multiplayer_send_item_selections
  # Input: none
  # Output: none
  ("multiplayer_send_item_selections",
   [
     (multiplayer_get_my_player, ":my_player_no"),
     (try_for_range, ":i_item", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_get_slot, ":item_id", ":my_player_no", ":i_item"),
       (multiplayer_send_2_int_to_server, multiplayer_event_set_item_selection, ":i_item", ":item_id"),
     (try_end),
     ]),

  # script_multiplayer_fill_map_game_types
  # Input: game_type
  # Output: num_maps
  ("multiplayer_fill_map_game_types",
    [
      (store_script_param, ":game_type", 1),
      (try_for_range, ":i_multi", multi_data_maps_for_game_type_begin, multi_data_maps_for_game_type_end),
        (troop_set_slot, "trp_multiplayer_data", ":i_multi", -1),
      (try_end),
      #(assign, ":num_maps", 0),
      (assign, ":num_maps", multi_data_maps_for_game_type_begin),
      (try_begin),
        (this_or_next|eq, ":game_type", multiplayer_game_type_deathmatch),
        (this_or_next|eq, ":game_type", multiplayer_game_type_duel),
        (this_or_next|eq, ":game_type", multiplayer_game_type_team_deathmatch),
        (eq, ":game_type", multiplayer_game_type_battle),
        #(eq, ":game_type", multiplayer_game_type_scene_making),
        
        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ambush"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ambush_fog"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon_morning"),
       # (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_berezina_crossing"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_bavarian_river"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_bavarian_river_cloudy"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_beach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_beach_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino_morn"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_hill_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_farm_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_countryside"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_countryside_fog"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_dust"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_dust_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_summer"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_winter"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_floodplain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_floodplain_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_forest_pallisade"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_forest_pallisade_fog"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_german_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_german_village_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hougoumont"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hougoumont_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_theisland"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains_cloud"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_la_haye_sainte"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_la_haye_sainte_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_naval"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_day"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_outlaws_den"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_outlaws_den_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_pyramids"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_river_day"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_river_cloudy"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_fog"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_saints_isle"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_saints_isle_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_sjotofta"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_sjotofta_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_farm_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_mountain_pass"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_mountain_pass_evening"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_village_evening"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_strangefields"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_strangefields_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_swamp"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_venice"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_venice_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_wissaudorf"),
        
       # (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_testing_map"),

        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_medium_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_large_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_medium_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_large_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_medium_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_large_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_medium_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_large_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_forest_large"),
        
        (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/9 
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/9 end
        (try_end), 
        
        (val_add,":num_maps",1),
        #(assign, ":num_maps", 58),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_capture_the_flag),
        
        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino_morn"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_hill_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_farm_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_summer"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_winter"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains_cloud"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_day"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_swamp"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm_night"),
        
        (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/10
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/10 end
        (try_end), 
        
        (val_add,":num_maps",1),
        #(assign, ":num_maps", 14),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_headquarters),

        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_harbour_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_conq_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_ardennes_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino_morn"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_hill_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_columbia_farm_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_summer"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_european_city_winter"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hungarian_plains_cloud"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_day"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_pyramids"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village_conq_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_slovenian_village_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_swamp"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_wissaudorf"),
        
        (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/11
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/11 end
        (try_end), 
        
        (val_add,":num_maps",1),
        #(assign, ":num_maps", 10),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_siege),
        
        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_charge_to_the_rhine"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_charge_to_the_rhine_cloudy"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_citadelle_napoleon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_citadelle_napoleon_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hougoumont"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hougoumont_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_la_haye_sainte"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_la_haye_sainte_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_al_hafya"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_al_hafya_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_bashir"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_bashir_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_beaver"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_beaver_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_boyd"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_boyd_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_brochet"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_brochet_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_de_chartres"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_de_chartres_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_fleetwood"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_fleetwood_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_hohenfels"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_hohenfels_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_george"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_george_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_lyon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_lyon_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_mackinaw"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_mackinaw_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_nylas"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_nylas_raining"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_refleax"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_refleax_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_vincey"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_fort_vincey_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_siege_of_toulon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_siege_of_toulon_night"),
        
        (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/12
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/12 end
        (try_end), 
        
        (val_add,":num_maps",1),
        #(assign, ":num_maps", 4),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_commander),

       # (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_berezina_crossing"),
       # (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino"),
       # (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino_morn"),
        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_french_farm_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_landshut_night"),
        # (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras"),
        # (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_quatre_bras_night"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_river_crossing_morning"),
        #(val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_schemmerbach_storm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_farm"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_farm_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_spanish_village_evening"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_strangefields"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_strangefields_storm"),
        
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_medium_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_plain_large_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_medium_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_large_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_medium_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_forest_large_rain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_steppe_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_medium_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_large"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_snow_forest_large_snow"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_forest_medium"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_random_multi_desert_forest_large"),
        
        (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/13
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/13 end
        (try_end), 
        
        (val_add,":num_maps",1),
        #(assign, ":num_maps", 46),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_king),
        
        (val_add,":num_maps",0),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_arabian_village_morning"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_avignon"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_beach"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_borodino"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_champs_elysees"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_countryside"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_dust"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_floodplain"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_hougoumont"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_la_haye_sainte"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_minden"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_naval"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_oaksfield_day"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_pyramids"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_roxburgh"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_russian_village"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_saints_isle"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_sjotofta"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_swamp"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_venice"),
        (val_add,":num_maps",1),(troop_set_slot, "trp_multiplayer_data", ":num_maps", "scn_mp_walloon_farm"),
        
       (try_begin),
          (gt, "$g_num_custom_maps", 0),
          (assign, ":end_cond", "$g_num_custom_maps"),#patch1115 64/14
          (try_for_range,":cur_scene",0,":end_cond"),
            (store_add, ":new_scene_id", ":cur_scene", "scn_mp_custom_map_1"),
            (val_add,":num_maps",1),
            (troop_set_slot, "trp_multiplayer_data", ":num_maps", ":new_scene_id"),
          (try_end),       #patch1115 64/14 end
        (try_end), 
        
        (val_add,":num_maps",1),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_scene_making), # add all maps basically.

        (assign,":index",multi_data_maps_for_game_type_begin),
        (try_for_range,":cur_scene","scn_mp_ambush","scn_multiplayer_maps_end"),
          (troop_set_slot, "trp_multiplayer_data", ":index", ":cur_scene"),
          (val_add,":index",1),
        (try_end),
        
        (assign, ":num_maps", ":index"),
      (try_end),
      (assign, reg0, ":num_maps"),
      ]),
#add custom maps above with var
  
  # script_multiplayer_count_players_bots
  # Input: none
  # Output: none
  ("multiplayer_count_players_bots",
    [
      (try_for_players, ":cur_player", "$g_ignore_server"),
        (player_is_active, ":cur_player"),
        (player_set_slot, ":cur_player", slot_player_last_bot_count, 0),
      (try_end),

      (try_for_agents, ":cur_agent"),
        (agent_is_active,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_non_player,":cur_agent"),
        (agent_get_group, ":agent_group", ":cur_agent"),
        (player_is_active, ":agent_group"),
        (player_get_slot, ":bot_count", ":agent_group", slot_player_last_bot_count),
        (val_add, ":bot_count", 1),
        (player_set_slot, ":agent_group", slot_player_last_bot_count, ":bot_count"),
      (try_end),
      ]),

  # script_multiplayer_find_player_leader_for_bot
  # Input: arg1 = team_no
  # Output: reg0 = player_no
  ("multiplayer_find_player_leader_for_bot",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":look_only_actives", 2),

      (team_get_faction, ":team_faction", ":team_no"),
      (assign, ":num_ai_troops", 0),
      (try_for_range, ":cur_ai_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":ai_troop_faction", ":cur_ai_troop"),
        (eq, ":ai_troop_faction", ":team_faction"),
        (val_add, ":num_ai_troops", 1),
      (try_end),

      (call_script, "script_multiplayer_count_players_bots"),

      (assign, ":team_player_count", 0),

      (try_for_players, ":cur_player", "$g_ignore_server"),
        (player_is_active, ":cur_player"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":look_only_actives", 0),
          (assign, ":continue", 1),
        (else_try),
          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (agent_is_active, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (assign, ":continue", 1),
        (try_end),

        (eq, ":continue", 1),
      
        (player_get_team_no, ":player_team", ":cur_player"),
        (eq, ":team_no", ":player_team"),
        (val_add, ":team_player_count", 1),
      (try_end),
      (assign, ":result_leader", -1),
      (try_begin),      
        (gt, ":team_player_count", 0),
        (assign, ":total_bot_count", "$g_multiplayer_num_bots_team_1"),
        (try_begin),
          (eq, ":team_no", 1),
          (assign, ":total_bot_count", "$g_multiplayer_num_bots_team_2"),
        (try_end),
        (store_div, ":num_bots_for_each_player", ":total_bot_count", ":team_player_count"),
        (store_mul, ":check_remainder", ":num_bots_for_each_player", ":team_player_count"),
        (try_begin),
          (lt, ":check_remainder", ":total_bot_count"),
          (val_add, ":num_bots_for_each_player", 1),
        (try_end),
      
        (assign, ":total_bot_req", 0),
        (try_for_players, ":cur_player", "$g_ignore_server"),
          (player_is_active, ":cur_player"),

          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (agent_is_active, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
      
          (player_get_team_no, ":player_team", ":cur_player"),
          (eq, ":team_no", ":player_team"),
          (assign, ":ai_wanted", 0),
          (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
          (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
            (player_slot_ge, ":cur_player", ":bot_type_wanted_slot", 1),
            (assign, ":ai_wanted", 1),
            (assign, ":end_cond", 0), #break
          (try_end),
          (eq, ":ai_wanted", 1),
          (player_get_slot, ":player_bot_count", ":cur_player", slot_player_last_bot_count),
          (lt, ":player_bot_count", ":num_bots_for_each_player"),
          (val_add, ":total_bot_req", ":num_bots_for_each_player"),
          (val_sub, ":total_bot_req", ":player_bot_count"),
        (try_end),
        (gt, ":total_bot_req", 0),
      
        (store_random_in_range, ":random_bot", 0, ":total_bot_req"),
        (assign,":num_players",multiplayer_player_loops_end),
        (try_for_range, ":cur_player", "$g_player_loops_begin", ":num_players"),
          (player_is_active, ":cur_player"),

          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (agent_is_active, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),

          (player_get_team_no, ":player_team", ":cur_player"),
          (eq, ":team_no", ":player_team"),
          (assign, ":ai_wanted", 0),
          (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
          (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
            (player_slot_ge, ":cur_player", ":bot_type_wanted_slot", 1),
            (assign, ":ai_wanted", 1),
            (assign, ":end_cond", 0), #break
          (try_end),
          (eq, ":ai_wanted", 1),
          (player_get_slot, ":player_bot_count", ":cur_player", slot_player_last_bot_count),
          (lt, ":player_bot_count", ":num_bots_for_each_player"),
          (val_sub, ":random_bot", ":num_bots_for_each_player"),
          (val_add, ":random_bot", ":player_bot_count"),
          (lt, ":random_bot", 0),
          (assign, ":result_leader", ":cur_player"),
          (assign, ":num_players", 0), #break
        (try_end),
      (try_end),
      (assign, reg0, ":result_leader"),
      ]),

  # script_multiplayer_find_bot_troop_and_group_for_spawn
  # Input: arg1 = team_no
  # Output: reg0 = troop_id, reg1 = group_id
  ("multiplayer_find_bot_troop_and_group_for_spawn",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":look_only_actives", 2),

      (call_script, "script_multiplayer_find_player_leader_for_bot", ":team_no", ":look_only_actives"),
      (assign, ":leader_player", reg0),

      (assign, ":available_troops_in_faction", 0),
      (assign, ":available_troops_to_spawn", 0),
      (team_get_faction, ":team_faction_no", ":team_no"),

      (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":troop_faction", ":troop_no"),
        (eq, ":troop_faction", ":team_faction_no"),
        (store_add, ":wanted_slot", slot_player_bot_type_1_wanted, ":available_troops_in_faction"),
        (val_add, ":available_troops_in_faction", 1),
        (try_begin),
          (this_or_next|lt, ":leader_player", 0),
          (player_slot_ge, ":leader_player", ":wanted_slot", 1),
          (val_add, ":available_troops_to_spawn", 1),
        (try_end),
      (try_end),

      (assign, ":available_troops_in_faction", 0),

      (store_random_in_range, ":random_troop_index", 0, ":available_troops_to_spawn"),
      (assign, ":end_cond", multiplayer_ai_troops_end),
      (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
        (store_troop_faction, ":troop_faction", ":troop_no"),
        (eq, ":troop_faction", ":team_faction_no"),
        (store_add, ":wanted_slot", slot_player_bot_type_1_wanted, ":available_troops_in_faction"),
        (val_add, ":available_troops_in_faction", 1),
        (this_or_next|lt, ":leader_player", 0),
        (player_slot_ge, ":leader_player", ":wanted_slot", 1),
        (val_sub, ":random_troop_index", 1),
        (lt, ":random_troop_index", 0),
        (assign, ":end_cond", 0),
        (assign, ":selected_troop", ":troop_no"),
      (try_end),
      (assign, reg0, ":selected_troop"),
      (assign, reg1, ":leader_player"),
      ]),	

  # script_multiplayer_change_leader_of_bot
  # Input: arg1 = agent_no
  # Output: none
  ("multiplayer_change_leader_of_bot",
    [
      (store_script_param, ":agent_no", 1),
      
      (agent_get_team, ":team_no", ":agent_no"),
      (call_script, "script_multiplayer_find_player_leader_for_bot", ":team_no", 1),
      (assign, ":leader_player", reg0),
      (agent_set_group, ":agent_no", ":leader_player"),
      ]),
      
  # script_multiplayer_find_spawn_point
  ("multiplayer_find_spawn_point",
  [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":examine_all_spawn_points", 2), #0-dm, 1-tdm, 2-cf, 3-hq, 4-sg
     (store_script_param, ":is_horseman", 3), #0:no, 1:yes, -1:do not care
     
     (set_fixed_point_multiplier, 100),
                   
     (assign, ":flags", 0),
     
     (try_begin),
       (eq, ":examine_all_spawn_points", 1),
       (val_or, ":flags", spf_examine_all_spawn_points),
     (try_end),
     
     (try_begin),
       (eq, ":is_horseman", 1),
       (val_or, ":flags", spf_is_horseman),
     (try_end),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
       (val_or, ":flags", spf_all_teams_are_enemy),
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
       (val_or, ":flags", spf_all_teams_are_enemy),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),       
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (val_or, ":flags", spf_team_1_spawn_far_from_entry_66), #team 1 agents will not spawn 70 meters around of entry 0
       (val_or, ":flags", spf_team_0_walkers_spawn_at_high_points),
       (val_or, ":flags", spf_team_0_spawn_near_entry_66),       
       (val_or, ":flags", spf_care_agent_to_agent_distances_less),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       (val_or, ":flags", spf_team_1_spawn_far_from_entry_0), #team 1 agents will not spawn 70 meters around of entry 0
       (val_or, ":flags", spf_team_0_spawn_far_from_entry_32), #team 0 agents will not spawn 70 meters around of entry 32
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),       
     (else_try),       
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),                     
       (assign, ":assigned_flag_count", 0),
       
       (store_sub, ":maximum_moved_flag_distance", multi_headquarters_pole_height, 50), #900 - 50 = 850
       (store_mul, ":maximum_moved_flag_distance_sq", ":maximum_moved_flag_distance", ":maximum_moved_flag_distance"),
       (val_div, ":maximum_moved_flag_distance_sq", 100), #dividing 100, because fixed point multiplier is 100 and it is included twice, look above line.
       
       (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
         (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
         (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),         
         
         (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
         (prop_instance_get_position, pos9, ":pole_id"),
         
         (try_begin),
           (eq, ":cur_flag_owner", 1),
           (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),                      
                      
           (prop_instance_get_position, pos1, ":flag_of_team_1"),
           (get_sq_distance_between_positions, ":flag_height_sq", pos9, pos1),           
           (ge, ":flag_height_sq", ":maximum_moved_flag_distance_sq"),
           
           (set_spawn_effector_scene_prop_id, ":assigned_flag_count", ":flag_of_team_1"),
           (val_add, ":assigned_flag_count", 1),
         (else_try),
           (eq, ":cur_flag_owner", 2),
           (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),
           
           (prop_instance_get_position, pos1, ":flag_of_team_2"),
           (get_sq_distance_between_positions, ":flag_height_sq", pos9, pos1),           
           (ge, ":flag_height_sq", ":maximum_moved_flag_distance_sq"),

           (set_spawn_effector_scene_prop_id, ":assigned_flag_count", ":flag_of_team_2"),
           (val_add, ":assigned_flag_count", 1),
         (try_end),
       (try_end),
       (set_spawn_effector_scene_prop_id, ":assigned_flag_count", -1),
     (try_end),     

     (multiplayer_find_spawn_point, reg0, ":team_no", ":flags"),
  ]),
    
  # script_multiplayer_find_spawn_point_2
  # Input: arg1 = team_no, arg2 = examine_all_spawn_points, arg3 = is_horseman
  # Output: reg0 = entry_point_no
  ("multiplayer_find_spawn_point_2",
   [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":examine_all_spawn_points", 2), #0-dm, 1-tdm, 2-cf, 3-hq, 4-sg
     (store_script_param, ":is_horseman", 3), #0:no, 1:yes, -1:do not care

     (assign, ":best_entry_point_score", -10000000),
     (assign, ":best_entry_point", 0),

     (assign, ":num_operations", 0),

     (assign, ":num_human_agents_div_3_plus_one", 0),
     (try_begin), #counting number of agents
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (try_for_agents, ":i_agent"),
         (agent_is_active,":i_agent"),
         (agent_is_alive, ":i_agent"),
         (agent_is_human, ":i_agent"),
         (val_add, ":num_human_agents_div_3_plus_one", 1),
       (try_end),
     (try_end),

     (assign, ":num_human_agents_plus_one", ":num_human_agents_div_3_plus_one"),

     (try_begin), 
     #  (le, ":num_human_agents_plus_one", 4),
     #  (assign, ":random_number_upper_limit", 2), #this is not typo-mistake this should be 2 too, not 1.
     #(else_try), 
       (le, ":num_human_agents_plus_one", 8),
       (assign, ":random_number_upper_limit", 2),
     (else_try), 
       (le, ":num_human_agents_plus_one", 16),
       (assign, ":random_number_upper_limit", 3),
     (else_try),
       (le, ":num_human_agents_plus_one", 24),
       (assign, ":random_number_upper_limit", 4),
     (else_try),
       (le, ":num_human_agents_plus_one", 32),
       (assign, ":random_number_upper_limit", 5),
     (else_try),
       (le, ":num_human_agents_plus_one", 40),
       (assign, ":random_number_upper_limit", 6),
     (else_try),
       (assign, ":random_number_upper_limit", 7),
     (try_end),

     (val_div, ":num_human_agents_div_3_plus_one", 3),
     (val_add, ":num_human_agents_div_3_plus_one", 1),
     (store_mul, ":negative_num_human_agents_div_3_plus_one", ":num_human_agents_div_3_plus_one", -1),

     (try_begin),
       (eq, ":examine_all_spawn_points", 1),
       (assign, ":random_number_upper_limit", 1),
     (try_end),
     
     (try_begin), #counting number of our flags and enemy flags
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       (assign, ":our_flag_count", 0),
       (assign, ":enemy_flag_count", 0),     
       (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
         (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
         (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),
         (neq, ":cur_flag_owner", 0),
         (val_sub, ":cur_flag_owner", 1),
         (try_begin),
           (eq, ":cur_flag_owner", ":team_no"),
           (val_add, ":our_flag_count", 1),
         (else_try),
           (val_add, ":enemy_flag_count", 1),
         (try_end),
       (try_end),
     (try_end),

     (assign, ":first_agent", 0),
     (try_begin), #first spawned agents will be spawned at their base points in tdm, cf and hq mods.
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       (try_begin),
         (eq, ":team_no", 0),
         (eq, "$g_multiplayer_team_1_first_spawn", 1),
         (assign, ":first_agent", 1),
         (assign, "$g_multiplayer_team_1_first_spawn", 0),
       (else_try),
         (eq, ":team_no", 1),
         (eq, "$g_multiplayer_team_2_first_spawn", 1),
         (assign, ":first_agent", 1),
         (assign, "$g_multiplayer_team_2_first_spawn", 0),
       (try_end),
     (try_end),
     
     (try_begin),
       (eq, ":first_agent", 1),
       (store_mul, ":best_entry_point", ":team_no", multi_num_valid_entry_points_div_2),
     (else_try),
       (try_for_range, ":i_entry_point", 0, multi_num_valid_entry_points),
         (assign, ":minimum_enemy_distance", 3000), 
         (assign, ":second_minimum_enemy_distance", 3000), 
              
         (assign, ":entry_point_score", 0),
         (store_random_in_range, ":random_value", 0, ":random_number_upper_limit"), #in average it is 5
         (eq, ":random_value", 0),
         (entry_point_get_position, pos9, ":i_entry_point"), #pos9 holds current entry point position
         (try_for_agents, ":i_agent"),
           (agent_is_active,":i_agent"),
           (agent_is_alive, ":i_agent"),
           (agent_is_human, ":i_agent"),
           (agent_get_team, ":agent_team", ":i_agent"),     
           (try_begin),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
             (try_begin),
               (teams_are_enemies, ":team_no", ":agent_team"),
               (assign, ":multiplier", -2),
             (else_try),
               (assign, ":multiplier", 1),
             (try_end),
           (else_try),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
             (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
             (assign, ":multiplier", -1), 
           (try_end),     
           (agent_get_position, pos1, ":i_agent"),
           (get_distance_between_positions_in_meters, ":distance", pos9, pos1),
           (val_add, ":num_operations", 1),
           (try_begin),
             (try_begin), #find closest enemy soldiers
               (lt, ":multiplier", 0),
               (try_begin),
                 (lt, ":distance", ":minimum_enemy_distance"),
                 (assign, ":second_minimum_enemy_distance", ":minimum_enemy_distance"),
                 (assign, ":minimum_enemy_distance", ":distance"),
               (else_try),
                 (lt, ":distance", ":second_minimum_enemy_distance"),
                 (assign, ":second_minimum_enemy_distance", ":distance"),
               (try_end),
             (try_end),
     
             (lt, ":distance", 100),
             (try_begin), #do not spawn over or too near to another agent (limit is 2 meters, squared 4 meters)
               (lt, ":distance", 3),
               (try_begin),
                 (this_or_next|eq, ":examine_all_spawn_points", 0),
                 (this_or_next|lt, ":multiplier", 0), #new added 20.08.08
                 (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
                 (try_begin),
                   (lt, ":distance", 1),                 
                   (assign, ":dist_point", -1000000), #never place 
                 (else_try),
                   (lt, ":distance", 2),
                   (try_begin),
                     (lt, ":multiplier", 0), 
                     (assign, ":dist_point", -20000),
                   (else_try),
                     (assign, ":dist_point", -2000), #can place, friend and distance is between 1-2 meters
                   (try_end), 
                 (else_try),
                   (try_begin),
                     (lt, ":multiplier", 0), 
                     (assign, ":dist_point", -10000), 
                   (else_try),
                     (assign, ":dist_point", -1000), #can place, friend and distance is between 2-3 meters
                   (try_end),
                 (try_end),
               (else_try),
                 #if examinining all spawn points and mod is siege only. This happens in new round start placings.
                 (try_begin),
                   (lt, ":distance", 1),                 
                   (assign, ":dist_point", -20000), #very hard to place distance is < 1 meter
                 (else_try),
                   (lt, ":distance", 2),
                   (assign, ":dist_point", -2000),
                 (else_try),       
                   (assign, ":dist_point", -1000), #can place, distance is between 2-3 meters
                 (try_end),                 
               (try_end),
     
               (val_mul, ":dist_point", ":num_human_agents_div_3_plus_one"),                 
             (else_try),
               (assign, ":dist_point", 0),
               (this_or_next|neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
               (this_or_next|lt, ":multiplier", 0),
               (eq, ":team_no", 1), #only attackers are effected by positive enemy & friend distance at siege mod, defenders only get negative score effect a bit     

               (try_begin), #in siege give no positive or negative score to > 40m distance. (6400 = 10000 - 3600(60 * 60))
                 (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
                 (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch), #new added after moving below part to above
                 (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel), #new added after moving below part to above
                 (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch), #new added after moving below part to above
                 (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_royale), #new added after moving below part to above
                 (eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),

                 (store_sub, ":dist_point", multiplayer_spawn_min_enemy_dist_limit, ":distance"), #up to 40 meters give (positive(if friend) or negative(if enemy)) points
                 (val_max, ":dist_point", 0),
                 (val_mul, ":dist_point", ":dist_point"),
               (else_try),
                 (store_mul, ":one_and_half_limit", multiplayer_spawn_min_enemy_dist_limit, 3),
                 (val_div, ":one_and_half_limit", 2),
                 (store_sub, ":dist_point", ":one_and_half_limit", ":distance"), #up to 60 meters give (positive(if friend) or negative(if enemy)) points
                 (val_mul, ":dist_point", ":dist_point"),
               (try_end),
            
               (val_mul, ":dist_point", ":multiplier"),
             (try_end),
             (val_add, ":entry_point_score", ":dist_point"),
           (try_end),
         (try_end),

         (try_begin),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
           (store_mul, ":max_enabled_agent_distance_score", 1000, ":num_human_agents_div_3_plus_one"),
           (ge, ":entry_point_score", ":max_enabled_agent_distance_score"),
           (assign, ":entry_point_score", ":max_enabled_agent_distance_score"),
         (try_end),

         (try_begin),      
           (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

           #(assign, ":minimum_enemy_dist_score", 0), #close also these with displays
           #(assign, ":second_minimum_enemy_dist_score", 0), #close also these with displays
           #(assign, reg2, ":minimum_enemy_distance"), #close also these with displays
           #(assign, reg3, ":second_minimum_enemy_distance"), #close also these with displays
          
           (try_begin), #if minimum enemy dist score is greater than 40(multiplayer_spawn_above_opt_enemy_dist_point) meters then give negative score
             (lt, ":minimum_enemy_distance", 3000), 
             (try_begin),
               (gt, ":minimum_enemy_distance", multiplayer_spawn_above_opt_enemy_dist_point),
               (val_sub, ":minimum_enemy_distance", multiplayer_spawn_above_opt_enemy_dist_point),
               (store_mul, ":minimum_enemy_dist_score", ":minimum_enemy_distance", -50),
               (val_mul, ":minimum_enemy_dist_score", ":num_human_agents_div_3_plus_one"),
               (val_add, ":entry_point_score", ":minimum_enemy_dist_score"),
             (try_end),
           (try_end),

           (try_begin), #if second minimum enemy dist score is greater than 40(multiplayer_spawn_above_opt_enemy_dist_point) meters then give negative score
             (lt, ":second_minimum_enemy_distance", 3000), #3000 x 3000
             (try_begin),
               (gt, ":second_minimum_enemy_distance", multiplayer_spawn_above_opt_enemy_dist_point),
               (val_sub, ":second_minimum_enemy_distance", multiplayer_spawn_above_opt_enemy_dist_point),
               (store_mul, ":second_minimum_enemy_dist_score", ":second_minimum_enemy_distance", -50),
               (val_mul, ":second_minimum_enemy_dist_score", ":num_human_agents_div_3_plus_one"),
               (val_add, ":entry_point_score", ":second_minimum_enemy_dist_score"),
             (try_end),
           (try_end),
           
           #(assign, reg0, ":minimum_enemy_dist_score"), #close also above assignment lines with these displays
           #(assign, reg1, ":second_minimum_enemy_dist_score"), #close also above assignment lines with these displays
           #(display_message, "@{!}minimum enemy distance : {reg2}, score : {reg0}"), #close also above assignment lines with these displays
           #(display_message, "@{!}second minimum enemy distance : {reg3}, score : {reg1}"), #close also above assignment lines with these displays
         (try_end),
 
         (try_begin), #giving positive points for "distance of entry point position to ground" while searching for entry point for defender team
           (neq, ":is_horseman", -1), #if being horseman or rider is not (not important)

           #additional score to entry points which has distance to ground value of > 0 meters
           (position_get_distance_to_terrain, ":height_to_terrain", pos9),     
           (val_max, ":height_to_terrain", 0),
           (val_min, ":height_to_terrain", 300),
           (ge, ":height_to_terrain", 40),                      
           
           (store_mul, ":height_to_terrain_score", ":height_to_terrain", ":num_human_agents_div_3_plus_one"), #it was 8
           
           (try_begin),
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
             (val_mul, ":height_to_terrain_score", 16),
           (else_try),  
             (val_mul, ":height_to_terrain_score", 4),
           (try_end),
           
           (try_begin),
             (eq, ":is_horseman", 0),
             (try_begin),
               (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege), #but only in siege mod, defender infantries will get positive points for spawning in high places.
               (eq, ":team_no", 0), 
               (val_add, ":entry_point_score", ":height_to_terrain_score"),
             (try_end),
           (else_try),
             (val_mul, ":height_to_terrain_score", 5),
             (val_sub, ":entry_point_score", ":height_to_terrain_score"),
           (try_end),
         (try_end),
    
         (try_begin), #additional random entry point score at deathmatch, teamdethmatch, capture the flag and siege
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_royale),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
           (try_begin),
             (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
             (store_random_in_range, ":random_value", 0, 400),

             (try_begin),
               (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
               (val_mul, ":random_value", 5),
             (try_end),
           (else_try),
             (eq, ":team_no", 1),
             (store_random_in_range, ":random_value", 0, 600), #siege-attacker
           (else_try),
             (store_random_in_range, ":random_value", 0, 200), #siege-defender
           (try_end),
           (val_mul, ":random_value", ":num_human_agents_div_3_plus_one"),
           (val_add, ":entry_point_score", ":random_value"),
         (try_end),

         (try_begin),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

           (try_begin),         
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
             (try_begin),
               (eq, ":team_no", 0),
               (entry_point_get_position, pos1, multi_base_point_team_1), #our base is at pos1
               (entry_point_get_position, pos2, multi_base_point_team_2), #enemy base is at pos2
             (else_try),
               (entry_point_get_position, pos1, multi_base_point_team_2), #our base is at pos2
               (entry_point_get_position, pos2, multi_base_point_team_1), #enemy base is at pos1
             (try_end),
           (else_try),
             (try_begin), #siege
               (eq, ":team_no", 0),
               (entry_point_get_position, pos1, multi_siege_flag_point), #our base is at pos1 (it was multi_initial_spawn_point_team_1 changed at v622)
               (entry_point_get_position, pos2, multi_initial_spawn_point_team_2), #enemy base is at pos2
             (else_try),
               (entry_point_get_position, pos1, multi_initial_spawn_point_team_2), #our base is at pos2
               (entry_point_get_position, pos2, multi_siege_flag_point), #enemy base is at pos1 (it was multi_initial_spawn_point_team_1 changed at v622)
             (try_end),
           (try_end),

           (try_begin),         
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
             (position_get_z, ":pos0_z", pos9),
             (position_set_z, pos1, ":pos0_z"), #make z of our base same with entry point position z
             (position_set_z, pos2, ":pos0_z"), #make z of enemy base same with entry point position z
           (try_end),
           
           (get_sq_distance_between_positions_in_meters, ":sq_dist_to_our_base", pos9, pos1),
           (get_sq_distance_between_positions_in_meters, ":sq_dist_to_enemy_base", pos9, pos2),                 
           (get_distance_between_positions_in_meters, ":dist_to_enemy_base", pos9, pos2),

           #give positive points if this entry point is near to our base.
           (assign, ":dist_to_our_base_point", 0),     
           (try_begin), #capture the flag (points for being near to base)
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),

             (get_distance_between_positions_in_meters, ":dist_to_our_base", pos9, pos1),
             (lt, ":dist_to_our_base", 100),
             (store_sub, ":dist_to_our_base_point", 100, ":dist_to_our_base"),

             (try_begin), #assign all 75-100's to 75
               (gt, ":dist_to_our_base_point", 75),
               (assign, ":dist_to_our_base_point", 75),
             (try_end),
     
             (val_mul, ":dist_to_our_base_point", 50), #0..5000 (increase is linear)
     
             (val_mul, ":dist_to_our_base_point", ":num_human_agents_div_3_plus_one"),
           (else_try), #siege (points for being near to base)
             (lt, ":sq_dist_to_our_base", 10000), #in siege give entry points score until 100m distance is reached
             (try_begin),
               (eq, ":team_no", 0),
               (try_begin),
                 (lt, ":sq_dist_to_our_base", 2500), #if distance is < 50m in siege give all highest point possible
                 (assign, ":sq_dist_to_our_base", 0),
               (else_try),
                 (val_sub, ":sq_dist_to_our_base", 2500),
                 (val_mul, ":sq_dist_to_our_base", 2),
               (try_end),
             (try_end),

             (store_sub, ":dist_to_our_base_point", 10000, ":sq_dist_to_our_base"),

             #can be (10000 - (10000 - 2500) * 2) = -5000 (for only defenders) so we are adding this loss.
             (val_add, ":dist_to_our_base_point", 5000), #so score getting from being near to base changes between 0 to 15000

             (try_begin),
               (eq, ":team_no", 0), 
             (else_try), #in siege mod for attackers being near to base entry point has 45 times less importance
               (val_div, ":dist_to_our_base_point", 45),
             (try_end),
             (val_mul, ":dist_to_our_base_point", ":num_human_agents_div_3_plus_one"),
           (try_end),

           (val_add, ":entry_point_score", ":dist_to_our_base_point"),


           #give negative points if this entry point is near to enemy base.
           (assign, ":dist_to_enemy_base_point", 0),
           (try_begin), #capture the flag
             (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),

             (lt, ":dist_to_enemy_base", 150),
             (store_sub, ":dist_to_enemy_base_point", 150, ":dist_to_enemy_base"),

             (try_begin), #assign 150 to 150 + (150 - 50) * 2 = 350, assign 100 to 100 + (100 - 50) * 2 = 200
               (gt, ":dist_to_enemy_base_point", 50),
               (store_sub, ":dist_to_enemy_base_point_minus_50", ":dist_to_enemy_base_point", 50),
               (val_mul, ":dist_to_enemy_base_point_minus_50", 2),
               (val_add, ":dist_to_enemy_base_point", ":dist_to_enemy_base_point_minus_50"),
             (try_end),
     
             (val_mul, ":dist_to_enemy_base_point", -50), #-7500(with extras 350 * 50 = -17500)..0 (increase is linear)
     
             (val_mul, ":dist_to_enemy_base_point", ":num_human_agents_div_3_plus_one"),
           (else_try), 
             (this_or_next|neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
             (eq, ":team_no", 1),

             (assign, ":dist_to_enemy_base_point", 0),
     
             (try_begin),
               (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

               (try_begin),
                 (lt, ":sq_dist_to_enemy_base", 10000),
                 (store_sub, ":dist_to_enemy_base_point", 10000, ":sq_dist_to_enemy_base"),
                 (val_div, ":dist_to_enemy_base_point", 4),
                 (val_mul, ":dist_to_enemy_base_point", ":negative_num_human_agents_div_3_plus_one"),
               (try_end),
             (else_try),     
               (val_max, ":dist_to_enemy_base", 60), #<60 meters has all most negative score

               (try_begin),
                 (eq, ":is_horseman", 1),
                 (assign, ":optimal_distance", 120),
               (else_try),
                 (assign, ":optimal_distance", 80),
               (try_end),
     
               (try_begin),     
                 (le, ":dist_to_enemy_base", ":optimal_distance"),
                 (store_sub, ":dist_to_enemy_base_point", ":optimal_distance", ":dist_to_enemy_base"),
                 (val_mul, ":dist_to_enemy_base_point", 180), #-3600 max
               (else_try),
                 (store_sub, ":dist_to_enemy_base_point", ":dist_to_enemy_base", ":optimal_distance"),
                 (val_mul, ":dist_to_enemy_base_point", 30), #-unlimited max but lower slope
               (try_end),

               (val_sub, ":dist_to_enemy_base_point", 600),
               (val_max, ":dist_to_enemy_base_point", 0),
     
               (val_mul, ":dist_to_enemy_base_point", ":negative_num_human_agents_div_3_plus_one"),
             (try_end),             
           (try_end),

           (val_add, ":entry_point_score", ":dist_to_enemy_base_point"),
         (else_try),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
     
           (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
             (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
             (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),
             (neq, ":cur_flag_owner", 0),
             (val_sub, ":cur_flag_owner", 1),

             (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
             (prop_instance_get_position, pos1, ":pole_id"), #pos1 holds pole position.

             (get_sq_distance_between_positions_in_meters, ":sq_dist_to_cur_pole", pos9, pos1),
             (lt, ":sq_dist_to_cur_pole", 6400),

             (try_begin),
               (eq, ":cur_flag_owner", ":team_no"),
               (store_sub, ":dist_to_flag_point", 6400, ":sq_dist_to_cur_pole"), #up to 80 meters give positive points if entry point is near our base
               (val_mul, ":dist_to_flag_point", 2),
               (val_div, ":dist_to_flag_point", ":our_flag_count"),     
               (val_mul, ":dist_to_flag_point", ":num_human_agents_div_3_plus_one"),
             (else_try),
               (store_sub, ":dist_to_flag_point", 6400, ":sq_dist_to_cur_pole"), #up to 80 meters give negative points if entry point is near enemy base
               (val_mul, ":dist_to_flag_point", 2),
               (val_div, ":dist_to_flag_point", ":enemy_flag_count"),     
               (val_mul, ":dist_to_flag_point", ":negative_num_human_agents_div_3_plus_one"),
             (try_end),
             (val_add, ":entry_point_score", ":dist_to_flag_point"),
           (try_end),           
         (try_end),

         #(assign, reg1, ":i_entry_point"),
         #(assign, reg2, ":entry_point_score"),
         #(display_message, "@{!}entry_no : {reg1} , entry_score : {reg2}"),

         (gt, ":entry_point_score", ":best_entry_point_score"),
         (assign, ":best_entry_point_score", ":entry_point_score"),
         (assign, ":best_entry_point", ":i_entry_point"),         
       (try_end),

       #(assign, reg0, ":best_entry_point"), 
       #(assign, reg1, ":best_entry_point_score"),
       #(assign, reg2, ":num_operations"),       
       #(assign, reg7, ":is_horseman"),
       #(display_message, "@{!},is horse:{reg7}, best entry:{reg0}, best entry score:{reg1}, num_operations:{reg2}"),
     (try_end),
     (assign, reg0, ":best_entry_point"), 
     ]),
  
  #script_multiplayer_buy_agent_equipment
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_buy_agent_equipment",
   [
     (store_script_param, ":player_no", 1),
     #moving original values to temp slots
     (try_for_range, ":i_item", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_get_slot, ":selected_item_index", ":player_no", ":i_item"),
       (store_sub, ":i_cur_selected_item", ":i_item", slot_player_selected_item_indices_begin),

       (val_add, ":i_cur_selected_item", slot_player_cur_selected_item_indices_begin),
       (player_set_slot, ":player_no", ":i_cur_selected_item", ":selected_item_index"),
     (try_end),
  
     # Assign female pants
     (try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
       (player_get_slot, ":item_id", ":player_no", ":i_item"),
       
       (try_begin), #If player has a body, change to female when needed
         (this_or_next|eq, ":item_id", "itm_sailor_pants"),
         (eq, ":item_id", "itm_french_sailor_pants"),
         
         (player_get_gender,":gender", ":player_no"),
         
         (try_begin),
           (eq,":gender",tf_female),
           
           (try_begin),
             (eq, ":item_id", "itm_sailor_pants"),
             (player_set_slot,":player_no",":i_item","itm_sailor_pants_female"),
           (else_try),
             (eq, ":item_id", "itm_french_sailor_pants"),
             (player_set_slot,":player_no",":i_item","itm_french_sailor_pants_female"),
           (try_end),
         (try_end),
       (try_end),
     (try_end),
 
     (player_get_troop_id,":troop",":player_no"),
 
     (assign,":must_kick",0),
     (try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
       (eq,":must_kick",0),
       (player_get_slot, ":item_id", ":player_no", ":i_item"),

       #finally, add the item to agent
       (assign,":im_useful_i_swear",0),#patch1115 60/9
       (try_begin),
         (eq, "$g_groupfight_mode", 0),
         (ge, ":item_id", 0), #might be -1 for horses etc.
         (store_sub, ":item_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
         (player_add_spawn_item, ":player_no", ":item_slot", ":item_id"),         
       (else_try),
         (eq, "$g_groupfight_mode", 1),#for cav or inf, make it so they spawn with empty guns and no ammo carts.
         (ge, ":item_id", 0), #might be -1 for horses etc.
         (store_sub, ":item_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
         (try_begin),
           (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
           (neq, ":item_class", multi_item_class_type_bullet),           
          # (neq, ":item_class", multi_item_class_type_pistol),   
           (neg|is_between, ":item_id", "itm_french_cav_pistol", "itm_french_mousquiton"),
           (neq, ":item_id", "itm_Russian_cavalry_stutzer_1803"),
           (assign,":im_useful_i_swear",1),
         (try_end),
         (try_begin),
           (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
           #(this_or_next|eq, ":item_class", multi_item_class_type_pistol), 
           (eq, ":item_class", multi_item_class_type_gun), 
           (item_get_slot, ":item_gf", ":item_id", slot_item_multiplayer_gf),
           (ge, ":item_gf", 1), 
           (try_begin),
             (assign, ":item_id", ":item_gf"),
           (try_end),
         (try_end),
         (eq,":im_useful_i_swear",1),
         (player_add_spawn_item, ":player_no", ":item_slot", ":item_id"), 
       (try_end),
       
       (try_begin), #If player has no uniform, kick him
         (store_sub, ":item_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
         (this_or_next|eq,":item_slot",ek_body),
         (this_or_next|eq,":item_slot",ek_head),
         (eq,":item_slot",ek_foot),
         (le, ":item_id", 0),
         
         (assign,":must_kick",1),
         
         (this_or_next|eq,":troop","trp_british_ship"),
         (this_or_next|eq,":troop","trp_french_ship"),
         (this_or_next|eq,":troop","trp_british_ship_cannon"),
         (eq,":troop","trp_french_ship_cannon"),
         
         (eq,":item_slot",ek_body),
         
         (assign,":must_kick",0),
       (try_end),
     (try_end),
     
     (try_begin),
       (eq,":must_kick",1),
      # (str_store_player_username, s2, ":player_no"),
      # (str_store_string, s4, "str_player_kicked_cheating_s2"), # patch1115 fix 20/2
            
      # (call_script, "script_multiplayer_broadcast_message"), # Broadcast kicked message 
       
       (kick_player, ":player_no"),
     (try_end),
    
     

   ]),

  #script_set_default_values_for_game_mode
  # Input: none
  # Output: none
  ("set_default_values_for_game_mode",
   [
     (try_begin),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_deathmatch),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 300),
       (assign, "$g_multiplayer_game_max_points", 300),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_team_deathmatch),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 300),
       (assign, "$g_multiplayer_game_max_points", 300),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_battle),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_capture_the_flag),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 20),
       (assign, "$g_multiplayer_respawn_period", 20),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_headquarters),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 30),
       (assign, "$g_multiplayer_respawn_period", 30),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 300),
       (assign, "$g_multiplayer_game_max_points", 300),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_siege),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_duel),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 300),
       (assign, "$g_multiplayer_game_max_points", 300),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_commander),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_king),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 10),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_royale),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 10),
       (assign, "$g_multiplayer_respawn_period", 5),
       #Max Points
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_game_max_points, 10),
       (assign, "$g_multiplayer_game_max_points", 10),
     (else_try),
       (eq,"$g_multiplayer_game_type",multiplayer_game_type_scene_making),
       #Respawn Time
       (multiplayer_send_int_to_server, multiplayer_event_admin_set_respawn_period, 5),
       (assign, "$g_multiplayer_respawn_period", 5),
     (try_end),
     ]),
  

  #script_game_get_party_prisoner_limit:
  # This script is called from the game engine when the prisoner limit is needed for a party.
  # INPUT: arg1 = party_no
  # OUTPUT: reg0 = prisoner_limit
  ("game_get_party_prisoner_limit",
    []),

  #script_game_get_item_extra_text:
  # This script is called from the game engine when an item's properties are displayed.
  # INPUT: arg1 = item_no, arg2 = extra_text_id (this can be between 0-7 (7 included)), arg3 = item_modifier
  # OUTPUT: result_string = item extra text, trigger_result = text color (0 for default)
  ("game_get_item_extra_text",
    []),

  #script_game_on_disembark:
  # This script is called from the game engine when the player reaches the shore with a ship.
  # INPUT: pos0 = disembark position
  # OUTPUT: none
  ("game_on_disembark",
   []),


  #script_game_context_menu_get_buttons:
  # This script is called from the game engine when the player clicks the right mouse button over a party on the map.
  # INPUT: arg1 = party_no
  # OUTPUT: none, fills the menu buttons
  ("game_context_menu_get_buttons",
   []),

  #script_game_event_context_menu_button_clicked:
  # This script is called from the game engine when the player clicks on a button at the right mouse menu.
  # INPUT: arg1 = party_no, arg2 = button_value
  # OUTPUT: none
  ("game_event_context_menu_button_clicked",
   []),

  #script_game_get_skill_modifier_for_troop
  # This script is called from the game engine when a skill's modifiers are needed
  # INPUT: arg1 = troop_no, arg2 = skill_no
  # OUTPUT: trigger_result = modifier_value
  ("game_get_skill_modifier_for_troop",
   []),

# Note to modders: Uncomment these if you'd like to use the following.
  
  #script_game_check_party_sees_party
  # This script is called from the game engine when a party is inside the range of another party
  # INPUT: arg1 = party_no_seer, arg2 = party_no_seen
  # OUTPUT: trigger_result = true or false (1 = true, 0 = false)
  ("game_check_party_sees_party",
   []),

 #script_game_get_party_speed_multiplier
 # This script is called from the game engine when a skill's modifiers are needed
 # INPUT: arg1 = party_no
 # OUTPUT: trigger_result = multiplier (scaled by 100, meaning that giving 100 as the trigger result does not change the party speed)
 ("game_get_party_speed_multiplier",
  []),
  
  #

  
  
  # script_find_high_ground_around_pos1
  # Input: pos1 should hold center_position_no
  #        arg1: team_no
  #        arg2: search_radius (in meters)
  # Output: pos52 contains highest ground within <search_radius> meters of team leader
  # Destroys position registers: pos10, pos11, pos15
  ("find_high_ground_around_pos1",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":search_radius", 2),
      (val_mul, ":search_radius", 100),
      (get_scene_boundaries, pos10,pos11),
      (team_get_leader, ":ai_leader", ":team_no"),
      (agent_get_position, pos1, ":ai_leader"),
      (set_fixed_point_multiplier, 100),
      (position_get_x, ":o_x", pos1),
      (position_get_y, ":o_y", pos1),
      (store_sub, ":min_x", ":o_x", ":search_radius"),
      (store_sub, ":min_y", ":o_y", ":search_radius"),
      (store_add, ":max_x", ":o_x", ":search_radius"),
      (store_add, ":max_y", ":o_y", ":search_radius"),
      (position_get_x, ":scene_min_x", pos10),
      (position_get_x, ":scene_max_x", pos11),
      (position_get_y, ":scene_min_y", pos10),
      (position_get_y, ":scene_max_y", pos11),
      #do not find positions close to borders (20 m)
      (val_add, ":scene_min_x", 2000),
      (val_sub, ":scene_max_x", 2000),
      (val_add, ":scene_min_y", 2000),
      (val_sub, ":scene_max_y", 2000),
      (val_max, ":min_x", ":scene_min_x"),
      (val_max, ":min_y", ":scene_min_y"),
      (val_min, ":max_x", ":scene_max_x"),
      (val_min, ":max_y", ":scene_max_y"),
      
      (store_div, ":min_x_meters", ":min_x", 100),
      (store_div, ":min_y_meters", ":min_y", 100),
      (store_div, ":max_x_meters", ":max_x", 100),
      (store_div, ":max_y_meters", ":max_y", 100),
      
      (assign, ":highest_pos_z", -10000),
      (copy_position, pos52, pos1),
      (init_position, pos15),
      
      (try_for_range, ":i_x", ":min_x_meters", ":max_x_meters"),
        (store_mul, ":i_x_cm", ":i_x", 100),
        (try_for_range, ":i_y", ":min_y_meters", ":max_y_meters"),
          (store_mul, ":i_y_cm", ":i_y", 100),
          (position_set_x, pos15, ":i_x_cm"),
          (position_set_y, pos15, ":i_y_cm"),
          (position_set_z, pos15, 10000),
          (position_set_z_to_ground_level, pos15),
          (position_get_z, ":cur_pos_z", pos15),
          (try_begin),
            (gt, ":cur_pos_z", ":highest_pos_z"),
            (copy_position, pos52, pos15),
            (assign, ":highest_pos_z", ":cur_pos_z"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_select_battle_tactic
  # Input: none
  # Output: none
  ("select_battle_tactic",
    [
      (assign, "$ai_team_1_battle_tactic", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_begin),
        (num_active_teams_le, 2),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (assign, "$ai_team_2", -1),
      (else_try),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (store_add, "$ai_team_2", ":player_team", 2),
      (try_end),
      (call_script, "script_select_battle_tactic_aux", "$ai_team_1", 0),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (assign, ":defense_not_an_option", 0),
        (try_begin),
          (eq, "$ai_team_1_battle_tactic", btactic_defense),
          (assign, ":defense_not_an_option", 1), #don't let two AI defend at the same time
        (try_end),
        (call_script, "script_select_battle_tactic_aux", "$ai_team_2", ":defense_not_an_option"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),

  # script_select_battle_tactic_aux
  # Input: team_no
  # Output: battle_tactic
  ("select_battle_tactic_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":defense_not_an_option", 2),
      
      (assign,":num_allied_agents",0),
      (assign,":num_allied_agents_infantry",0),
      (assign,":num_allied_agents_skirmisher",0),
      (assign,":num_allied_agents_cavalry",0),
      (assign,":num_allied_agents_light_cav",0),
      (assign,":num_enemy_agents",0),
      (assign,":num_enemy_agents_infantry",0),
      (assign,":num_enemy_agents_skirmisher",0),
      (assign,":num_enemy_agents_cavalry",0),
      (assign,":num_enemy_agents_light_cav",0),
      (try_for_range,":value",0,9), #Division
        (try_begin),
          (store_add,":slot",slot_team1_cstatus_begin,":value"),
          (neg|troop_slot_eq,"trp_ai_tactics_dummy",":slot",cstatus_dead),
          (store_add,":slot",slot_team1_base_troops_begin,":value"),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot"),
          (store_add,":slot",slot_team1_amount_of_troops,":value"),
          (troop_get_slot,":num_agents","trp_ai_tactics_dummy",":slot"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_infantry),
            (eq,":base_troop",basetroop_guard),
            (try_begin),
              (eq,":team_no",0),
              (val_add,":num_allied_agents_infantry",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_infantry",":num_agents"),
            (try_end),
          (else_try),
            (eq,":base_troop",basetroop_skirmisher),
            (try_begin),
              (eq,":team_no",0),
              (val_add,":num_allied_agents_skirmisher",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_skirmisher",":num_agents"),
            (try_end),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_hussar),
            (this_or_next|eq,":base_troop",basetroop_dragoon),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (try_begin),
              (eq,":team_no",0),
              (val_add,":num_allied_agents_cavalry",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_cavalry",":num_agents"),
            (try_end),
          (else_try),
            (eq,":base_troop",basetroop_light_cav),
            (try_begin),
              (eq,":team_no",0),
              (val_add,":num_allied_agents_light_cav",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_light_cav",":num_agents"),
            (try_end),
          (try_end),
          (try_begin),
            (eq,":team_no",0),
            (val_add,":num_allied_agents",":num_agents"),
          (else_try),
            (val_add,":num_enemy_agents",":num_agents"),
          (try_end),
        (try_end),
        (try_begin),
          (store_add,":slot",slot_team2_cstatus_begin,":value"),
          (neg|troop_slot_eq,"trp_ai_tactics_dummy",":slot",cstatus_dead),
          (store_add,":slot",slot_team2_base_troops_begin,":value"),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot"),
          (store_add,":slot",slot_team2_amount_of_troops,":value"),
          (troop_get_slot,":num_agents","trp_ai_tactics_dummy",":slot"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_infantry),
            (eq,":base_troop",basetroop_guard),
            (try_begin),
              (eq,":team_no",1),
              (val_add,":num_allied_agents_infantry",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_infantry",":num_agents"),
            (try_end),
          (else_try),
            (eq,":base_troop",basetroop_skirmisher),
            (try_begin),
              (eq,":team_no",1),
              (val_add,":num_allied_agents_skirmisher",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_skirmisher",":num_agents"),
            (try_end),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_hussar),
            (this_or_next|eq,":base_troop",basetroop_dragoon),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (try_begin),
              (eq,":team_no",1),
              (val_add,":num_allied_agents_cavalry",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_cavalry",":num_agents"),
            (try_end),
          (else_try),
            (eq,":base_troop",basetroop_light_cav),
            (try_begin),
              (eq,":team_no",1),
              (val_add,":num_allied_agents_light_cav",":num_agents"),
            (else_try),
              (val_add,":num_enemy_agents_light_cav",":num_agents"),
            (try_end),
          (try_end),
          (try_begin),
            (eq,":team_no",1),
            (val_add,":num_allied_agents",":num_agents"),
          (else_try),
            (val_add,":num_enemy_agents",":num_agents"),
          (try_end),
        (try_end),
      (try_end),
      
      (assign,":defense_favour",10),
      (assign,":attack_favour",10),
      (assign,":charge_favour",10),
      (assign,":probe_favour",10),
      (try_begin), #ALL TROOPS
        (store_add,":num_agents",":num_allied_agents",":num_enemy_agents"),
        (store_mul,":ratio",":num_allied_agents",100),
        (val_div,":ratio",":num_agents"),
        (try_begin), #Major advantage
          (gt,":ratio",75),
          (val_add,":attack_favour",30),
          (val_add,":charge_favour",20),
          (val_add,":probe_favour",10),
        (else_try), #Advantage
          (gt,":ratio",60),
          (val_add,":attack_favour",20),
          (val_add,":charge_favour",5),
          (val_add,":probe_favour",15),
        (else_try), #Even
          (gt,":ratio",40),
          (val_add,":defense_favour",15),
          (val_add,":attack_favour",15),
          (val_add,":charge_favour",3),
          (val_add,":probe_favour",15),
        (else_try), #Disadvantage
          (gt,":ratio",25),
          (val_add,":defense_favour",20),
          (val_add,":attack_favour",5),
          (val_add,":probe_favour",10),
        (else_try), #Major disadvantage     
          (val_add,":defense_favour",50),
          (val_add,":charge_favour",-30),
          (val_add,":probe_favour",10),
        (try_end),
      (try_end),
      (try_begin), #INFANTRY
        (store_add,":num_agents_infantry",":num_allied_agents_infantry",":num_enemy_agents_infantry"),
        (gt,":num_agents_infantry",0),
        (store_mul,":ratio",":num_allied_agents_infantry",100),
        (val_div,":ratio",":num_agents_infantry"),
        (try_begin), #Major advantage
          (gt,":ratio",75),
          (val_add,":defense_favour",10),
          (val_add,":attack_favour",20),
          (val_add,":probe_favour",20),
        (else_try), #Advantage
          (gt,":ratio",60),
          (val_add,":defense_favour",20),
          (val_add,":attack_favour",20),
          (val_add,":probe_favour",20),
        (else_try), #Even
          (gt,":ratio",40),
          (val_add,":defense_favour",25),
          (val_add,":attack_favour",10),
          (val_add,":probe_favour",20),
        (else_try), #Disadvantage
          (gt,":ratio",25),
          (val_add,":defense_favour",25),
          (val_add,":attack_favour",10),
          (val_add,":probe_favour",20),
        (else_try), #Major disadvantage   
          (val_add,":charge_favour",20),
          (val_add,":attack_favour",10),
          (val_add,":probe_favour",20),
        (try_end),
      (else_try), #No infantry
        (val_add,":defense_favour",-30),
        (val_add,":attack_favour",30),
        (val_add,":charge_favour",50),
        (val_add,":probe_favour",30),
      (try_end),
      (try_begin), #SKIRMISHERS
        (store_add,":num_agents_skirmisher",":num_allied_agents_skirmisher",":num_enemy_agents_skirmisher"),
        (gt,":num_agents_skirmisher",0),
        (store_mul,":ratio",":num_allied_agents_skirmisher",100),
        (val_div,":ratio",":num_agents_skirmisher"),
        (try_begin), #Major advantage
          (gt,":ratio",75),
          (val_add,":defense_favour",10),
          (val_add,":attack_favour",10),
          (val_add,":probe_favour",30),
          (val_add,":charge_favour",-30),
        (else_try), #Advantage
          (gt,":ratio",60),
          (val_add,":charge_favour",-20),
        (else_try), #Even
          (gt,":ratio",40),
        (else_try), #Disadvantage
          (gt,":ratio",25),
          (val_add,":attack_favour",10),
          (val_add,":charge_favour",10),
          (val_add,":probe_favour",10),
        (else_try), #Major disadvantage  
          (val_add,":defense_favour",-30), 
          (val_add,":attack_favour",30),
          (val_add,":charge_favour",40),
          (val_add,":probe_favour",10),
        (try_end),
      (else_try), #No skirmishers
        (val_add,":charge_favour",-10),
      (try_end),
      (try_begin), #CAVALRY
        (store_add,":num_agents_cavalry",":num_allied_agents_cavalry",":num_enemy_agents_cavalry"),
        (gt,":num_agents_cavalry",0),
        (store_mul,":ratio",":num_allied_agents_cavalry",100),
        (val_div,":ratio",":num_agents_cavalry"),
        (try_begin), #Major advantage
          (gt,":ratio",75),
          (val_add,":defense_favour",-20),
          (val_add,":attack_favour",30), 
          (val_add,":charge_favour",50),
          (val_add,":probe_favour",15),
        (else_try), #Advantage
          (gt,":ratio",60),
          (val_add,":defense_favour",-10),
          (val_add,":attack_favour",20), 
          (val_add,":charge_favour",30),
          (val_add,":probe_favour",20),
        (else_try), #Even
          (gt,":ratio",40),
          (val_add,":attack_favour",20),
          (val_add,":probe_favour",20),
        (else_try), #Disadvantage
          (gt,":ratio",25),
          (val_add,":defense_favour",25),
          (val_add,":attack_favour",-10), 
          (val_add,":charge_favour",-20),
        (else_try), #Major disadvantage  
          (val_add,":defense_favour",50),
          (val_add,":attack_favour",-40), 
          (val_add,":charge_favour",-100),
          (val_add,":probe_favour",-20),
        (try_end),
      (else_try), #No cav
        (val_add,":defense_favour",-10),
        (val_add,":attack_favour",20),
      (try_end),
      (try_begin), #LIGHT HORSE
        (store_add,":num_agents_light_cav",":num_allied_agents_light_cav",":num_enemy_agents_light_cav"),
        (gt,":num_agents_light_cav",0),
        (store_mul,":ratio",":num_allied_agents_light_cav",100),
        (val_div,":ratio",":num_agents_light_cav"),
        (try_begin), #Major advantage
          (gt,":ratio",75),
          (val_add,":attack_favour",20),
          (val_add,":charge_favour",10),
          (val_add,":probe_favour",40),
        (else_try), #Advantage
          (gt,":ratio",60),
          (val_add,":attack_favour",10),
          (val_add,":probe_favour",30),
        (else_try), #Even
          (gt,":ratio",40),
          (val_add,":defense_favour",10),
        (else_try), #Disadvantage
          (gt,":ratio",25),
          (val_add,":attack_favour",10),
          (val_add,":charge_favour",10),
          (val_add,":probe_favour",30),
        (else_try), #Major disadvantage  
          (val_add,":defense_favour",-20),
          (val_add,":attack_favour",30),
          (val_add,":charge_favour",30),
          (val_add,":probe_favour",10),
        (try_end),
      (try_end),
      (val_max,":defense_favour",0),
      (val_max,":attack_favour",0),
      (val_max,":charge_favour",0),
      (val_max,":probe_favour",0),
      (store_add,":defense_chance",":defense_favour",0),
      (store_add,":attack_chance",":attack_favour",":defense_chance"),
      (store_add,":charge_chance",":charge_favour",":attack_chance"),
      (store_add,":probe_chance",":probe_favour",":charge_chance"),
      (assign,":random_end",":probe_chance"),
      
      (store_random_in_range, ":rand", 0, ":random_end"),   
      (try_begin),
          (eq, ":defense_not_an_option", 0),
          (lt, ":rand", ":defense_chance"),
          (assign, ":battle_tactic", btactic_defense),
      (else_try),
          (lt, ":rand", ":attack_chance"),
          (assign, ":battle_tactic", btactic_attack),
      (else_try),
          (lt, ":rand", ":charge_chance"),
          (assign, ":battle_tactic", btactic_charge),
      (else_try),
          (assign, ":battle_tactic", btactic_probe),
      (try_end),
      (assign, reg0, ":battle_tactic"),
  ]),
  
  # script_battle_tactic_init
  # Input: none
  # Output: none
  ("battle_tactic_init",
    [
      (call_script, "script_battle_tactic_init_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_init_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
      (try_end),

      (try_for_agents, ":cur_agent"),
        (agent_is_active,":cur_agent"),
        (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 0), #initially nobody is running away.
      (try_end),
  ]),

  # script_battle_tactic_init_aux
  # Input: team_no, battle_tactic
  # Output: none
  ("battle_tactic_init_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      
      (try_begin),
        (eq,0,1), #Need to deal with this later
      
        #Checking what divisions we have
        (assign,":num_divisions",0),
        (assign,":num_infantry",0),
        (assign,":num_skirmishers",0),
        (assign,":num_cavalry",0),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
          (try_end),
          (neg|troop_slot_eq,"trp_ai_tactics_dummy",":slot",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (val_add,":num_divisions",1),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_infantry),
            (eq,":base_troop",basetroop_guard),
            (val_add,":num_infantry",1),
          (else_try),
            (eq,":base_troop",basetroop_skirmisher),
            (val_add,":num_skirmishers",1),
          (else_try),
            (val_add,":num_cavalry",1),
          (try_end),
        (try_end),
        
        #Deciding what we want where
        (assign,":num_centre_infantry",0),
        (assign,":num_centre_skirmishers",0),
        (assign,":num_centre_cavalry",0),
        (assign,":num_lflank_infantry",0),
        (assign,":num_lflank_skirmishers",0),
        (assign,":num_lflank_cavalry",0),
        (assign,":num_rflank_infantry",0),
        (assign,":num_rflank_skirmishers",0),
        (assign,":num_rflank_cavalry",0),
        #(assign,":num_reserve_infantry",0),
        #(assign,":num_reserve_skirmishers",0),
        #(assign,":num_reserve_cavalry",0),
        (assign,":has_left_flank",0),
        (assign,":has_right_flank",0),
        (try_begin), #Only centre
          (le,":num_divisions",3),
          (assign,":num_centre_infantry",":num_infantry"),
          (assign,":num_centre_skirmishers",":num_skirmishers"),
          (assign,":num_centre_cavalry",":num_cavalry"),
        (else_try), #One flank
          (le,":num_divisions",7),
          (store_random_in_range,":flank_to_use",0,2),
          (try_begin),
            (eq,":flank_to_use",0),
            (assign,":has_left_flank",1),
          (else_try),
            (assign,":has_right_flank",1),
          (try_end),
          #Assigning Infantry
          (try_begin),
            (le,":num_infantry",4),
            (assign,":num_centre_infantry",":num_infantry"),
          (else_try),
            (assign,":num_centre_infantry",4),
            (try_begin),
              (eq,":flank_to_use",0),
              (store_sub,":num_lflank_infantry",":num_infantry",":num_centre_infantry"),
            (else_try),
              (store_sub,":num_rflank_infantry",":num_infantry",":num_centre_infantry"),
            (try_end),
          (try_end),
          #Assigning Skirmishers
          (try_begin),
            (le,":num_skirmishers",2),
            (assign,":num_centre_skirmishers",":num_skirmishers"),
          (else_try),
            (le,":num_skirmishers",4),
            (assign,":num_centre_skirmishers",2),
            (try_begin),
              (eq,":flank_to_use",0),
              (store_sub,":num_lflank_skirmishers",":num_skirmishers",":num_centre_skirmishers"),
            (else_try),
              (store_sub,":num_rflank_skirmishers",":num_skirmishers",":num_centre_skirmishers"),
            (try_end),
          (else_try),
            (assign,":num_centre_skirmishers",4),
            (try_begin),
              (eq,":flank_to_use",0),
              (store_sub,":num_lflank_skirmishers",":num_skirmishers",":num_centre_skirmishers"),
            (else_try),
              (store_sub,":num_rflank_skirmishers",":num_skirmishers",":num_centre_skirmishers"),
            (try_end),
          (try_end),
          #Assigning Cavalry
          (try_begin),
            (le,":num_cavalry",3),
            (try_begin),
              (eq,":flank_to_use",0),
              (assign,":num_lflank_cavalry",":num_cavalry"),
            (else_try),
              (assign,":num_rflank_cavalry",":num_cavalry"),
            (try_end),
          (else_try),
            (try_begin),
              (eq,":flank_to_use",0),
              (assign,":num_lflank_cavalry",3),
            (else_try),
              (assign,":num_rflank_cavalry",3),
            (try_end),
            (store_sub,":num_centre_cavalry",":num_cavalry",3),
          (try_end),
        (else_try), #Two flanks
          (assign,":has_left_flank",1),
          (assign,":has_right_flank",1),
          #Assigning Infantry
          (try_begin),
            (le,":num_infantry",4),
            (assign,":num_centre_infantry",":num_infantry"),
          (else_try),
            (assign,":num_centre_infantry",4),
            (store_sub,":cur_num",":num_infantry",":num_centre_infantry"),
            (val_div,":cur_num",2),
            (assign,":num_lflank_infantry",":cur_num"),
            (val_add,":cur_num",":num_centre_infantry",":num_lflank_infantry"),
            (store_sub,":num_rflank_infantry",":num_infantry",":cur_num"),
          (try_end),
          #Assigning Skirmishers
          (try_begin),
            (le,":num_skirmishers",2),
            (assign,":num_centre_skirmishers",":num_skirmishers"),
          (else_try),
            (le,":num_skirmishers",4),
            (assign,":num_centre_skirmishers",2),
            (store_sub,":cur_num",":num_skirmishers",":num_centre_skirmishers"),
            (val_div,":cur_num",2),
            (assign,":num_lflank_skirmishers",":cur_num"),
            (val_add,":cur_num",":num_centre_skirmishers",":num_lflank_skirmishers"),
            (store_sub,":num_rflank_skirmishers",":num_skirmishers",":cur_num"),
          (else_try),
            (assign,":num_centre_skirmishers",4),
            (store_sub,":cur_num",":num_skirmishers",":num_centre_skirmishers"),
            (val_div,":cur_num",2),
            (assign,":num_lflank_skirmishers",":cur_num"),
            (val_add,":cur_num",":num_centre_skirmishers",":num_lflank_skirmishers"),
            (store_sub,":num_rflank_skirmishers",":num_skirmishers",":cur_num"),
          (try_end),
          #Assigning Cavalry
          (try_begin),
            (ge,":num_cavalry",7),
            (assign,":num_lflank_cavalry",3),
            (assign,":num_rflank_cavalry",3),
            (store_sub,":num_centre_cavalry",":num_cavalry",3),
          (else_try),
            (store_div,":cur_num",":num_cavalry",2),
            (assign,":num_lflank_cavalry",":cur_num"),
            (store_sub,":num_rflank_cavalry",":num_cavalry",":num_lflank_cavalry"),
          (try_end),
        (try_end),
        
        #Finding deployment positions
        (set_fixed_point_multiplier,100),
        (try_begin),
          (eq,":team_no",0),
          (call_script,"script_team_get_average_position_of_enemies",1),
        (else_try),
          (call_script,"script_team_get_average_position_of_enemies",0),
        (try_end),
        (copy_position,pos1,pos0), #This is our team position
        #Let's find a good centre position
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (copy_position, pos10, pos52), #pos10 holds centre position
        (try_begin),  #Find position for our left flank - if we have one
          (eq,":has_left_flank",1),
          (copy_position, pos1, pos10),
          (position_move_x,pos1,7000),
          (position_set_z_to_ground_level, pos1),
          (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
          (copy_position, pos11, pos52), #pos11 holds left flank position
        (try_end),
        (try_begin),  #Find position for our right flank - if we have one
          (eq,":has_right_flank",1),
          (copy_position, pos1, pos10),
          (position_move_x,pos1,-7000),
          (position_set_z_to_ground_level, pos1),
          (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
          (copy_position, pos12, pos52), #pos12 holds right flank position
        (try_end),
        
        #Deploying our troops!
        (copy_position, pos20, pos10), #pos20 holds current centre position
        (copy_position, pos21, pos11), #pos21 holds current left flank position
        (copy_position, pos22, pos12), #pos22 holds current right flank position
        (copy_position, pos30, pos10), #pos30 holds current centre position for skirmishers
        (copy_position, pos31, pos11), #pos31 holds current left flank position for skirmishers
        (copy_position, pos32, pos12), #pos32 holds current right flank position for skirmishers
        (assign,":last_centre_movement",0),
        (assign,":last_lflank_movement",0),
        (assign,":last_rflank_movement",0),
        (assign,":last_centre_movement_skirmisher",1500),
        (assign,":last_lflank_movement_skirmisher",0),
        (assign,":last_rflank_movement_skirmisher",0),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
            (store_add,":slot3",slot_team1_amount_of_troops,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
            (store_add,":slot3",slot_team2_amount_of_troops,":division"),
          (try_end),
          (neg|troop_slot_eq,"trp_ai_tactics_dummy",":slot",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (troop_get_slot,":num_agents","trp_ai_tactics_dummy",":slot3"),
          (try_begin),   #Is infantry
            (this_or_next|eq,":base_troop",basetroop_infantry),
            (eq,":base_troop",basetroop_guard),
            (try_begin),
              (gt,":num_centre_infantry",0),
              (display_message,"@Centre Inf"),
              (val_mul,":last_centre_movement",-1),
              (position_move_x,pos20,":last_centre_movement"),
              (position_set_z_to_ground_level, pos20),
              (copy_position, pos5, pos20),
              (try_begin),
                (lt,":last_centre_movement",0),
                (val_add,":last_centre_movement",-2000),
              (else_try),
                (val_add,":last_centre_movement",2000),
              (try_end),
              (val_sub,":num_centre_infantry",1),
            (else_try),
              (gt,":num_lflank_infantry",0),
              (display_message,"@Lflank Inf"),
              (val_mul,":last_lflank_movement",-1),
              (position_move_x,pos21,":last_lflank_movement"),
              (position_set_z_to_ground_level, pos21),
              (copy_position, pos5, pos21),
              (try_begin),
                (lt,":last_lflank_movement",0),
                (val_add,":last_lflank_movement",-2000),
              (else_try),
                (val_add,":last_lflank_movement",2000),
              (try_end),
              (val_sub,":num_lflank_infantry",1),
            (else_try),
              (gt,":num_rflank_infantry",0),
              (display_message,"@Rflank Inf"),
              (val_mul,":last_rflank_movement",-1),
              (position_move_x,pos22,":last_rflank_movement"),
              (position_set_z_to_ground_level, pos22),
              (copy_position, pos5, pos22),
              (try_begin),
                (lt,":last_rflank_movement",0),
                (val_add,":last_rflank_movement",-2000),
              (else_try),
                (val_add,":last_rflank_movement",2000),
              (try_end),
              (val_sub,":num_rflank_infantry",1),
            (try_end),
            (team_give_order, ":team_no", ":division", mordr_hold),
            (team_set_order_position, ":team_no", ":division", pos5),
            (team_give_order, ":team_no", ":division", mordr_advance), #advance a bit forward to make sure we're not behind a hill
          (else_try),   #Is skirmisher
            (eq,":base_troop",basetroop_skirmisher),
            (try_begin),
              (gt,":num_centre_skirmishers",0),
              (val_mul,":last_centre_movement_skirmisher",-1),
              (position_move_x,pos30,":last_centre_movement_skirmisher"),
              (position_set_z_to_ground_level, pos30),
              (copy_position, pos5, pos30),
              (try_begin),
                (lt,":last_centre_movement_skirmisher",0),
                (val_add,":last_centre_movement_skirmisher",-3000),
              (else_try),
                (val_add,":last_centre_movement_skirmisher",3000),
              (try_end),
              (val_sub,":num_centre_skirmishers",1),
            (else_try),
              (gt,":num_lflank_skirmishers",0),
              (val_mul,":last_lflank_movement_skirmisher",-1),
              (position_move_x,pos31,":last_lflank_movement_skirmisher"),
              (position_set_z_to_ground_level, pos31),
              (copy_position, pos5, pos31),
              (try_begin),
                (lt,":last_lflank_movement_skirmisher",0),
                (val_add,":last_lflank_movement_skirmisher",-3000),
              (else_try),
                (val_add,":last_lflank_movement_skirmisher",3000),
              (try_end),
              (val_sub,":num_lflank_skirmishers",1),
            (else_try),
              (gt,":num_rflank_skirmishers",0),
              (val_mul,":last_rflank_movement_skirmisher",-1),
              (position_move_x,pos32,":last_rflank_movement_skirmisher"),
              (position_set_z_to_ground_level, pos32),
              (copy_position, pos5, pos32),
              (try_begin),
                (lt,":last_rflank_movement_skirmisher",0),
                (val_add,":last_rflank_movement_skirmisher",-3000),
              (else_try),
                (val_add,":last_rflank_movement_skirmisher",3000),
              (try_end),
              (val_sub,":num_rflank_skirmishers",1),
            (try_end),
            (team_give_order, ":team_no", ":division", mordr_hold),
            (team_set_order_position, ":team_no", ":division", pos5),
            #advance skirmishers to cover line
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            #Forming skrimish line...
            (team_give_order, ":team_no", ":division", mordr_spread_out),
            (team_give_order, ":team_no", ":division", mordr_spread_out),
            (team_give_order, ":team_no", ":division", mordr_spread_out),
            (team_give_order, ":team_no", ":division", mordr_spread_out),
            (team_give_order, ":team_no", ":division", mordr_spread_out),
            (team_give_order, ":team_no", ":division", mordr_spread_out),
          (else_try),   #Is cavalry
            (val_add,":num_cavalry",1),
            (try_begin),
              (gt,":num_centre_cavalry",0),
              (display_message,"@Centre Cav"),
              (val_mul,":last_centre_movement",-1),
              (position_move_x,pos20,":last_centre_movement"),
              (position_set_z_to_ground_level, pos20),
              (copy_position, pos5, pos20),
              (try_begin),
                (lt,":last_centre_movement",0),
                (val_add,":last_centre_movement",-2000),
              (else_try),
                (val_add,":last_centre_movement",2000),
              (try_end),
              (val_sub,":num_centre_cavalry",1),
            (else_try),
              (gt,":num_lflank_cavalry",0),
              (display_message,"@Lflank Cav"),
              (val_mul,":last_lflank_movement",-1),
              (position_move_x,pos21,":last_lflank_movement"),
              (position_set_z_to_ground_level, pos21),
              (copy_position, pos5, pos21),
              (try_begin),
                (lt,":last_lflank_movement",0),
                (val_add,":last_lflank_movement",-2000),
              (else_try),
                (val_add,":last_lflank_movement",2000),
              (try_end),
              (val_sub,":num_lflank_cavalry",1),
            (else_try),
              (gt,":num_rflank_cavalry",0),
              (display_message,"@Rflank Cav"),
              (val_mul,":last_rflank_movement",-1),
              (position_move_x,pos22,":last_rflank_movement"),
              (position_set_z_to_ground_level, pos22),
              (copy_position, pos5, pos22),
              (try_begin),
                (lt,":last_rflank_movement",0),
                (val_add,":last_rflank_movement",-2000),
              (else_try),
                (val_add,":last_rflank_movement",2000),
              (try_end),
              (val_sub,":num_rflank_cavalry",1),
            (try_end),
            (team_give_order, ":team_no", ":division", mordr_hold),
            (team_set_order_position, ":team_no", ":division", pos5),
            (team_give_order, ":team_no", ":division", mordr_advance), #advance a bit forward to make sure we're not behind a hill
          (try_end),
          (store_div,":num_ranks",":num_agents",12), #Using 12 as standard number of men per rank
          (try_begin),
            (eq,":num_ranks",1),
            (team_give_order, ":team_no", ":division", mordr_form_1_row),
          (else_try),
            (eq,":num_ranks",2),
            (team_give_order, ":team_no", ":division", mordr_form_2_row),
          (else_try),
            (eq,":num_ranks",3),
            (team_give_order, ":team_no", ":division", mordr_form_3_row),
          (else_try),
            (eq,":num_ranks",4),
            (team_give_order, ":team_no", ":division", mordr_form_4_row),
          (else_try),
            (team_give_order, ":team_no", ":division", mordr_form_5_row),
          (try_end),
        (try_end),
        
      (else_try),
        (eq, ":battle_tactic", btactic_defense),
        (try_for_range,":division",0,9),
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (copy_position,pos1,pos0),
          (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
          (copy_position, pos1, pos52),
          (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
          (copy_position, pos1, pos52),
          (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
          (team_give_order, ":team_no", ":division", mordr_hold),
          (team_set_order_position, ":team_no", ":division", pos52),
          (team_give_order, ":team_no", ":division", mordr_advance), #advance a bit forward to make sure we're not behind a hill
        (try_end),
      (else_try),
        (this_or_next|eq, ":battle_tactic", btactic_attack), #we just attack here...
        (this_or_next|eq, ":battle_tactic", btactic_charge),
        (eq, ":battle_tactic", btactic_probe),
        (try_for_range,":division",0,9),
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (team_give_order, ":team_no", ":division", mordr_hold),
          (team_set_order_position, ":team_no", ":division", pos0),
          (team_give_order, ":team_no", ":division", mordr_advance),
          (team_give_order, ":team_no", ":division", mordr_advance),
          (team_give_order, ":team_no", ":division", mordr_advance),
          (team_give_order, ":team_no", ":division", mordr_advance),
          (team_give_order, ":team_no", ":division", mordr_advance), #Make some initial advancing
        (try_end),
      (try_end),
  ]),

  # script_battle_tactic_apply
  # Input: none
  # Output: none
  ("battle_tactic_apply",
    [
      (call_script, "script_battle_tactic_apply_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_apply_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),

  # script_battle_tactic_apply_aux
  # Input: team_no, battle_tactic
  # Output: battle_tactic
  ("battle_tactic_apply_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      
      (store_mission_timer_a, ":mission_time"),
      (try_for_range,":team_no2",0,2),
        (neq,":team_no2",":team_no"),
        (assign,":enemy_team",":team_no2"),
      (try_end),
      (try_begin),
        #Units play defensively and try to hold their position and fall back if under heavy attack
        (eq, ":battle_tactic", btactic_defense),
        (assign,":num_divisions_in_combat",0),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
            (store_add,":weapon_use_slot",slot_team1_unit_use_weapon,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
            (store_add,":weapon_use_slot",slot_team2_unit_use_weapon,":division"),
          (try_end),
          (troop_get_slot,":cstatus","trp_ai_tactics_dummy",":slot"),
          (neq,":cstatus",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_guard),
            (eq,":base_troop",basetroop_skirmisher),
            (assign,":base_troop",basetroop_infantry),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (assign,":base_troop",basetroop_hussar),
          (try_end),
          
          (assign,":open_fire",0),
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (copy_position,pos5,pos0),
          (assign,":dist_to_closest_enemy_div",999999),
          (assign,":end_cond",9),
          (try_for_range,":division2",0,":end_cond"),
            (call_script,"script_division_get_average_position",":enemy_team",":division2"),
            (copy_position,pos4,pos0),
            (get_distance_between_positions,":dist",pos4,pos5),
            (try_begin),
              (eq,":open_fire",0),
              (copy_position,pos6,pos5),
              (position_move_z,pos4,200),
              (position_move_z,pos6,200),
              (position_has_line_of_sight_to_position,pos4,pos6), #Can see an enemy?
              (lt,":dist",20000), #That is within a reasonable distance
              (assign,":open_fire",1), #Open fire!
            (try_end),
            (lt,":dist",":dist_to_closest_enemy_div"),
            (assign,":dist_to_closest_enemy_div",":dist"),
          (try_end),
          (try_begin),
            (eq,":open_fire",0), #We can't see any nearby enemy...
            (try_begin),
              (lt,":dist_to_closest_enemy_div",8000), #...but is there any nearby enemy divisions we can't see?
              (team_give_order, ":team_no", ":division", mordr_advance),
              (team_give_order, ":team_no", ":division", mordr_advance), #Advance a bit...
              (assign,":open_fire",1), #...and be prepared to fire
            (else_try),
              #No nearby divisions we can or can't see...
              (copy_position, pos1, pos5),
              (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no", 1), #So we check for individual enemies
              (assign, ":min_dist", reg1),
              (lt,":min_dist", 2500), #There is someone close...
              (assign,":open_fire",1), #...so we get ready to shoot him
            (try_end),
          (try_end),
          (try_begin),
            (eq,":open_fire",1), #Fire at enemy?
            (try_begin),
              (this_or_next|eq,":base_troop",basetroop_hussar), #If we either are cavalry, or
              (lt,":dist_to_closest_enemy_div",2000), #Enemy is getting very close...
              (team_give_order, ":team_no", ":division", mordr_charge), #We order a counter-charge
              #Call a few times because bots are retarded and might not get it...
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
              (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
            (else_try),
              (try_begin),
                (neq,":cstatus",cstatus_ready),
                (team_give_order, ":team_no", ":division", mordr_hold),
                (team_set_order_position, ":team_no", ":division", pos5),
                (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
              (try_end),
              (team_give_order, ":team_no", ":division", mordr_fire_at_will), #Fire at enemy :)
              #Call a few times because bots are retarded and might not get it...
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_firearms),
            (try_end),
            (val_add,":num_divisions_in_combat",1),
          (else_try),
            (eq,":open_fire",0), #No enemies to fire at anymore
            (try_begin),
              (neq,":cstatus",cstatus_ready),
              (team_give_order, ":team_no", ":division", mordr_hold),
              (team_set_order_position, ":team_no", ":division", pos5),
              (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
            (try_end),
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command), #Hold fire
          (try_end),
        (try_end),
        (try_begin), #No divisions in combat - the AI will get bored and change tactic
          (eq,":num_divisions_in_combat",0),
          (store_random_in_range,":random",0,120), #Max 2 min
          (lt,":random",":mission_time"), #The longer the game goes, the higher the chance that the AI gets bored
          (assign, ":battle_tactic", btactic_probe),
          (assign,"$g_last_tactic_change_at",":mission_time"),
        (try_end),
      (else_try),
        #Units play aggressively and try to engage the enemy and may charge
        (eq, ":battle_tactic", btactic_attack),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
          (try_end),
          (troop_get_slot,":cstatus","trp_ai_tactics_dummy",":slot"),
          (neq,":cstatus",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_guard),
            (eq,":base_troop",basetroop_skirmisher),
            (assign,":base_troop",basetroop_infantry),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (assign,":base_troop",basetroop_hussar),
          (try_end),
          
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (copy_position,pos5,pos0),
          (assign,":dist_to_closest_enemy_div",999999),
          (try_for_range,":division2",0,9),
            (call_script,"script_division_get_average_position",":enemy_team",":division2"),
            (copy_position,pos4,pos0),
            (get_distance_between_positions,":dist",pos4,pos5),
            (lt,":dist",":dist_to_closest_enemy_div"),
            (assign,":dist_to_closest_enemy_div",":dist"),
          (try_end),
          (try_begin),
            (lt,":dist_to_closest_enemy_div",2000), #Enemy very close
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_charge), #Counter charge
            #Call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (else_try),
            (lt,":dist_to_closest_enemy_div",8000), #Enemy within a fairly close distance
            (store_random_in_range,":random",0,100), #AI may charge
            (try_begin),
              (this_or_next|eq,":base_troop",basetroop_hussar), #If we are cavalry we will charge, else
              (lt,":random",20), #20% chance
              (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
              (team_give_order, ":team_no", ":division", mordr_charge), #Charge
              #Call a few times because bots are retarded and might not get it...
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
              (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
              (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
            (else_try), #Else just hold and open fire
              (try_begin),
                (neq,":cstatus",cstatus_ready),
                (team_give_order, ":team_no", ":division", mordr_hold),
                (team_set_order_position, ":team_no", ":division", pos5),
                (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
              (try_end),
              (team_give_order, ":team_no", ":division", mordr_fire_at_will),
              #Call a few times because bots are retarded and might not get it...
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
              (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_firearms),
            (try_end),
          (else_try),
            #No close enemies - advance!
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #Use melee weapons when moving - and call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (try_end),
        (try_end),
        (try_begin), # After a while, the attacking AI will charge
          (store_random_in_range,":random_time",240,600), #Will wait to between 4 and 10 min, then charge all
          (store_sub,":time_since_last_tactic_change", ":mission_time", "$g_last_tactic_change_at"),
          (ge, ":time_since_last_tactic_change", ":random_time"),
          (assign, ":battle_tactic", btactic_charge),
          (assign,"$g_last_tactic_change_at",":mission_time"),
        (try_end),
      (else_try),
        #Units play very aggressively and try to charge the enemy
        (eq, ":battle_tactic", btactic_charge),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
          (try_end),
          (troop_get_slot,":cstatus","trp_ai_tactics_dummy",":slot"),
          (neq,":cstatus",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_guard),
            (eq,":base_troop",basetroop_skirmisher),
            (assign,":base_troop",basetroop_infantry),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (assign,":base_troop",basetroop_hussar),
          (try_end),
          
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (copy_position,pos5,pos0),
          (assign,":dist_to_closest_enemy_div",999999),
          (try_for_range,":division2",0,9),
            (call_script,"script_division_get_average_position",":enemy_team",":division2"),
            (copy_position,pos4,pos0),
            (get_distance_between_positions,":dist",pos4,pos5),
            (lt,":dist",":dist_to_closest_enemy_div"),
            (assign,":dist_to_closest_enemy_div",":dist"),
          (try_end),
          (try_begin),
            (lt,":dist_to_closest_enemy_div",4000), #Enemy close
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_charge), #CHARGE!!
            #Call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (else_try),
            #No close enemies - advance!
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #Use melee weapons when moving - and call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (try_end),
        (try_end),
      (else_try),
        #Units play rather defensively and try engage the enemy while maintaining distance
        (eq, ":battle_tactic", btactic_probe),
        (try_for_range,":division",0,9),
          (try_begin),
            (eq,":team_no",0),
            (store_add,":slot",slot_team1_cstatus_begin,":division"),
            (store_add,":slot2",slot_team1_base_troops_begin,":division"),
          (else_try),
            (store_add,":slot",slot_team2_cstatus_begin,":division"),
            (store_add,":slot2",slot_team2_base_troops_begin,":division"),
          (try_end),
          (troop_get_slot,":cstatus","trp_ai_tactics_dummy",":slot"),
          (neq,":cstatus",cstatus_dead),
          (troop_get_slot,":base_troop","trp_ai_tactics_dummy",":slot2"),
          (try_begin),
            (this_or_next|eq,":base_troop",basetroop_guard),
            (eq,":base_troop",basetroop_skirmisher),
            (assign,":base_troop",basetroop_infantry),
          (else_try),
            (this_or_next|eq,":base_troop",basetroop_lancer),
            (eq,":base_troop",basetroop_heavy_cav),
            (assign,":base_troop",basetroop_hussar),
          (try_end),
          
          (call_script,"script_division_get_average_position",":team_no",":division"),
          (copy_position,pos5,pos0),
          (assign,":dist_to_closest_enemy_div",999999),
          (try_for_range,":division2",0,9),
            (call_script,"script_division_get_average_position",":enemy_team",":division2"),
            (copy_position,pos4,pos0),
            (get_distance_between_positions,":dist",pos4,pos5),
            (lt,":dist",":dist_to_closest_enemy_div"),
            (assign,":dist_to_closest_enemy_div",":dist"),
          (try_end),
          (try_begin),
            (lt,":dist_to_closest_enemy_div",2000), #Enemy very close
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_charge), #Counter charge
            #Call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (else_try),
            (neq,":base_troop",basetroop_hussar), #Don't do this if we are cavalry
            (lt,":dist_to_closest_enemy_div",15000), #Enemy within a reasonable distance
            #Hold and open fire
            (try_begin),
              (neq,":cstatus",cstatus_ready),
              (team_give_order, ":team_no", ":division", mordr_hold),
              (team_set_order_position, ":team_no", ":division", pos5),
              (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_ready),
            (try_end),
            (team_give_order, ":team_no", ":division", mordr_fire_at_will),
            #Call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
            #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
            #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
            #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
            #(team_give_order, ":team_no", ":division", wordr_use_any_weapon),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_firearms),
          (else_try),
            (eq,":base_troop",basetroop_hussar), #Only do this if we are cavalry
            (lt,":dist_to_closest_enemy_div",7000), #Enemy close
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_charge), #Charge
            #Call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (else_try),
            #No close enemies - advance!
            (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            (team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #(team_give_order, ":team_no", ":division", mordr_advance),
            #Use melee weapons when moving - and call a few times because bots are retarded and might not get it...
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            #(team_give_order, ":team_no", ":division", wordr_use_melee_weapons),
            (troop_set_slot,"trp_ai_tactics_dummy",":slot",cstatus_advancing),
            (troop_set_slot,"trp_ai_tactics_dummy",":weapon_use_slot",unit_use_melee),
          (try_end),
        (try_end),
        (try_begin), # Eventually a probing AI will decide to attack
          (store_random_in_range,":random_time",120,420), #Will wait to between 2 and 7 min, then attack
          (store_sub,":time_since_last_tactic_change", ":mission_time", "$g_last_tactic_change_at"),
          (ge, ":time_since_last_tactic_change", ":random_time"),
          (assign, ":battle_tactic", btactic_attack),
          (assign,"$g_last_tactic_change_at",":mission_time"),
        (try_end),
      (try_end),
      
      (assign, reg0, ":battle_tactic"),
  ]),
  
  # script_get_num_troops_in_division
  # Input: arg1 = division_no, arg2 = team_no
  # Output: reg0 = num_troops_in_division
  ("get_num_troops_in_division",
    [
      (store_script_param, ":division_no", 1),
      (store_script_param, ":team_no", 2),
      
      (assign,":num_troops_in_division",0),
      
      (try_for_agents,":agent_no"),
        (agent_is_active,":agent_no"),
        (agent_is_alive,":agent_no"),
        (agent_is_human,":agent_no"),
        (agent_get_team,":team_no2",":agent_no"),
        (eq,":team_no2",":team_no"),
        (agent_get_group,":division_no2",":agent_no"),
        (eq,":division_no2",":division_no"),
        (val_add,":num_troops_in_division",1),
      (try_end),
      
      (assign,reg0,":num_troops_in_division"),
  ]),

  
  # script_apply_effect_of_other_people_on_courage_scores
  # Input: none
  # Output: none
  ("apply_effect_of_other_people_on_courage_scores",
    [
      (get_player_agent_no, ":player_agent"),

      (try_for_agents, ":centered_agent_no"),
        (agent_is_active, ":centered_agent_no"),
        (agent_is_human, ":centered_agent_no"),
        (agent_is_alive, ":centered_agent_no"),
        
        # Not for player
        (neq, ":centered_agent_no", ":player_agent"),
        (agent_get_position, pos9, ":centered_agent_no"),
        
        (agent_get_team ,":is_centered_agent_ally", ":centered_agent_no"),
        (agent_get_slot, ":centered_agent_is_running_away", ":centered_agent_no", slot_agent_is_running_away),
        (agent_get_slot, ":centered_agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
        
        (try_for_agents, ":agent_no"),
          (agent_is_active, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (neq, ":centered_agent_no", ":agent_no"),      
          
          (agent_get_team ,":is_agent_ally", ":agent_no"),

          (eq, ":is_centered_agent_ally", ":is_agent_ally"), #if centered agent and other agent is at same team then continue.
          
          (agent_get_slot, ":agent_is_running_away", ":agent_no", slot_agent_is_running_away),
          
          (assign, ":agent_delta_courage_score", 0),
          (try_begin),
            (eq, ":agent_no", ":player_agent"),
            (assign, ":agent_delta_courage_score", 6),
          # (else_try),
            # (agent_get_troop_id, ":troop_id", ":agent_no"),
            # (troop_is_hero, ":troop_id"),
      
            ##Hero Agent : if near agent (hero, agent_no) is not running away his positive effect on centered agent (centered_agent_no) fighting at his side is effected by his hit points.
            # (try_begin),      
              # (eq, ":agent_is_running_away", 0), #if agent is not running away
              # (store_agent_hit_points, ":agent_hit_points", ":agent_no"),
              # (try_begin),
                # (eq, ":agent_hit_points", 100),
                # (assign, ":agent_delta_courage_score", 6),
              # (else_try),
                # (ge, ":agent_hit_points", 75),
                # (assign, ":agent_delta_courage_score", 5),
              # (else_try),
                # (ge, ":agent_hit_points", 60),
                # (assign, ":agent_delta_courage_score", 4),
              # (else_try),
                # (ge, ":agent_hit_points", 45),
                # (assign, ":agent_delta_courage_score", 3),
              # (else_try),
                # (ge, ":agent_hit_points", 30),
                # (assign, ":agent_delta_courage_score", 2),
              # (else_try),
                # (ge, ":agent_hit_points", 15),
                # (assign, ":agent_delta_courage_score", 1),
              # (try_end),
            # (else_try),
              # (assign, ":agent_delta_courage_score", 4),
            # (try_end),
          (else_try),
            #Normal Agent : if near agent (agent_no) is not running away his positive effect on centered agent (centered_agent_no) fighting at his side is effected by his hit points.
            (try_begin),      
              (eq, ":agent_is_running_away", 0), # if agent is not running away
              (store_agent_hit_points, ":agent_hit_points", ":agent_no"),
              (try_begin),
                (eq, ":agent_hit_points", 100),
                (assign, ":agent_delta_courage_score", 4),
              (else_try),
                (ge, ":agent_hit_points", 75),
                (assign, ":agent_delta_courage_score", 3),
              (else_try),
                (ge, ":agent_hit_points", 50),
                (assign, ":agent_delta_courage_score", 2),
              (else_try),
                (ge, ":agent_hit_points", 25),
                (assign, ":agent_delta_courage_score", 1),
              (try_end),
              
              (try_begin), # to make our own soldiers run away a bit easier we decrease one, because they have player_agent (+6) advantage.
                (agent_is_ally, ":agent_no"),
                (val_sub, ":agent_delta_courage_score", 1),
              (try_end),
              
            (else_try), # he is running away
              (assign, ":agent_delta_courage_score", 2),
            (try_end),
          (try_end),
      
          (try_begin),
            (eq, ":agent_is_running_away", 0),
            (try_begin), # centered agent not running away cannot take positive courage score from one another agent not running away.
              (eq, ":centered_agent_is_running_away", 0),
              (assign, ":agent_delta_courage_score", 0),
            (try_end),
          (else_try),
            (val_mul, ":agent_delta_courage_score", -1),
          (try_end),

          (neq, ":agent_delta_courage_score", 0),

          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos9, pos1),

          (try_begin), # positive.
            (ge, ":agent_delta_courage_score", 0),
            (try_begin),
              (lt, ":dist", 2000), #0-20 meter
              (val_mul, ":agent_delta_courage_score", 50),        
            (else_try),
              (lt, ":dist", 4000), #21-40 meter
              (val_mul, ":agent_delta_courage_score", 40),        
            (else_try),
              (lt, ":dist", 7000), #41-70 meter
              (val_mul, ":agent_delta_courage_score", 30),      
            (else_try),
              (lt, ":dist", 11000), #71-110 meter
              (val_mul, ":agent_delta_courage_score", 20),      
            (else_try),      
              (lt, ":dist", 16000), # 111-160 meter, assumed that eye can see agents friendly at most 160 meters far while fighting. 
                                    # this is more than below limit (108 meters) because we hear that allies come from further.
              (val_mul, ":agent_delta_courage_score", 10),      
            (try_end),
            
            
          (else_try),# negative effect of running agent on other ally agents are lower then positive effects above, to avoid starting  
                     # run away of all agents at a moment. I want to see agents running away one by one during battle, not all together.
                     # this would create better game play.
            
            (try_begin),
              (lt, ":dist", 200), #1-2 meter,
              (val_mul, ":agent_delta_courage_score", 15),       
            (else_try),
              (lt, ":dist", 400), #3-4 meter, 
              (val_mul, ":agent_delta_courage_score", 13),      
            (else_try),
              (lt, ":dist", 600), #5-6 meter
              (val_mul, ":agent_delta_courage_score", 11),        
            (else_try),
              (lt, ":dist", 800), #7-8 meter
              (val_mul, ":agent_delta_courage_score", 9),        
            (else_try),
              (lt, ":dist", 1200), #9-12 meters
              (val_mul, ":agent_delta_courage_score", 7),     
            (else_try),
              (lt, ":dist", 2400), #13-24 meters
              (val_mul, ":agent_delta_courage_score", 5),      
            (else_try),
              (lt, ":dist", 4800), #25-48 meters
              (val_mul, ":agent_delta_courage_score", 3),         
            (else_try),
              (lt, ":dist", 9600), #49-98 meters, assumed that eye can see agents running away at most 98 meters far while fighting.
              (val_mul, ":agent_delta_courage_score", 1),    
            (try_end),      
          (try_end),
          
          (val_add, ":centered_agent_courage_score", ":agent_delta_courage_score"),
        (try_end),
        
        (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":centered_agent_courage_score"),    
      (try_end),
  ]), #ozan & Vince rewritezzz ;P

  
  # script_apply_death_effect_on_courage_scores
  # Input: dead agent id, killer agent id
  # Output: none
  ("apply_death_effect_on_courage_scores",
    [
      (store_script_param, ":dead_agent_no", 1),
      (store_script_param, ":killer_agent_no", 2),
      
      (try_begin),
        (agent_is_active, ":dead_agent_no"),
        (agent_is_human, ":dead_agent_no"),
        
        (agent_get_team ,":is_dead_agent_ally", ":dead_agent_no"),

        (agent_get_position, pos9, ":dead_agent_no"),
        
        (set_fixed_point_multiplier,100),
        
        (assign, ":number_of_near_allies_to_dead_agent", 0),
        (try_for_agents, ":agent_no"),
          (agent_is_active,":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),

          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos9, pos1),

          (le, ":dist", 1300), # to count number of allies within 13 meters to dead agent.
          
          (agent_get_team ,":is_agent_ally", ":agent_no"),
          
          (eq, ":is_dead_agent_ally", ":is_agent_ally"),
          (val_add, ":number_of_near_allies_to_dead_agent", 1), # (number_of_near_allies_to_dead_agent) is counted because if there are                                           
          # many allies of dead agent around him, negative courage effect become less.
        (try_end),
                
        (try_for_agents, ":agent_no"),
          (agent_is_active,":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          
          (agent_get_team ,":is_agent_ally", ":agent_no"),
   
          (try_begin), # each agent is effected by a killed agent positively if he is rival or negatively if he is ally.
            (neq, ":is_dead_agent_ally", ":is_agent_ally"), 
            (assign, ":agent_delta_courage_score", 10),  # if killed agent is agent of rival side, add points to fear score
          (else_try),          
            (assign, ":agent_delta_courage_score", -15), # if killed agent is agent of our side, decrease points from fear score
            (val_add, ":agent_delta_courage_score", ":number_of_near_allies_to_dead_agent"), # ":number_of_near_allies_to_dead_agent" is added because if there are many
            (try_begin),                                                                     # allies of dead agent around him, negative courage effect become less.
              (gt, ":agent_delta_courage_score", -5),
              (assign, ":agent_delta_courage_score", -5),
            (try_end),

            (agent_get_slot, ":dead_agent_was_running_away_or_not", ":dead_agent_no",  slot_agent_is_running_away), #look dead agent was running away or not. 
            (try_begin),
              (eq, ":dead_agent_was_running_away_or_not", 1),      
              (val_div, ":agent_delta_courage_score", 3),  # if killed agent was running away his negative effect on ally courage scores become very less. This added because
            (try_end),                                     # running away agents are easily killed and courage scores become very in a running away group after a time, and
          (try_end),                                       # they do not stop running away althought they pass near a new powerfull ally party.                 
          (agent_get_position, pos1, ":agent_no"), 
          (get_distance_between_positions, ":dist", pos9, pos1),

          (try_begin), 
            (eq, ":killer_agent_no", ":agent_no"),
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 20),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (try_end),
          
          (try_begin),
            (lt, ":dist", 10000), # if lower do all ze checks
            (try_begin),
              (lt, ":dist", 100), #0-1 meters
              (val_mul, ":agent_delta_courage_score", 150),       
            (else_try),
              (lt, ":dist", 200), #2 meters
              (val_mul, ":agent_delta_courage_score", 120),          
            (else_try),
              (lt, ":dist", 300), #3 meter
              (val_mul, ":agent_delta_courage_score", 100),        
            (else_try),
              (lt, ":dist", 400), #4 meters
              (val_mul, ":agent_delta_courage_score", 90),         
            (else_try),
              (lt, ":dist", 600), #5-6 meters
              (val_mul, ":agent_delta_courage_score", 80),         
            (else_try),
              (lt, ":dist", 800), #7-8 meters
              (val_mul, ":agent_delta_courage_score", 70),       
            (else_try),
              (lt, ":dist", 1000), #9-10 meters
              (val_mul, ":agent_delta_courage_score", 60),        
            (else_try),
              (lt, ":dist", 1500), #11-15 meter
              (val_mul, ":agent_delta_courage_score", 50),    
            (else_try),
              (lt, ":dist", 2500), #16-25 meters
              (val_mul, ":agent_delta_courage_score", 40),         
            (else_try),
              (lt, ":dist", 4000), #26-40 meters
              (val_mul, ":agent_delta_courage_score", 30),     
            (else_try),
              (lt, ":dist", 6500), #41-65 meters
              (val_mul, ":agent_delta_courage_score", 20),       
            (else_try),
              (lt, ":dist", 10000), #61-100 meters
              (val_mul, ":agent_delta_courage_score", 10),
            (try_end),
            
            # then apply :).
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),
          (try_end),
        (try_end),
      (try_end),
      ]), #ozan & Vince rewritezzz ;P

  # script_decide_run_away_or_not
  # Input: none
  # Output: none
  ("decide_run_away_or_not",
    [
      (store_script_param, ":cur_agent", 1),
      
      (assign, ":force_retreat", 0),
      (agent_get_division, ":agent_division", ":cur_agent"),
      (try_begin),
        (lt, ":agent_division", 9), #static classes
        (agent_get_team, ":agent_team", ":cur_agent"),
        (team_get_movement_order, ":agent_movement_order", ":agent_team", ":agent_division"),
        (eq, ":agent_movement_order", mordr_retreat),
        (assign, ":force_retreat", 1),
      (try_end),

      (agent_get_slot, ":is_cur_agent_running_away", ":cur_agent", slot_agent_is_running_away),
      (try_begin),
        (eq, ":is_cur_agent_running_away", 0),
        (try_begin),
          (eq, ":force_retreat", 1),
          (agent_start_running_away, ":cur_agent"),
          (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 1),
        (else_try),
          (agent_get_slot, ":agent_courage_score", ":cur_agent",  slot_agent_courage_score),
          (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),
          (val_mul, ":agent_hit_points", 40),
          (store_sub, ":start_running_away_courage_score_limit", 3500, ":agent_hit_points"), 
          (lt, ":agent_courage_score", ":start_running_away_courage_score_limit"), #if (courage score < 3500 - (agent hit points * 40)) and (agent is not running away) then start running away, average hit points : 50, average running away limit = 1500

          # (agent_get_troop_id, ":troop_id", ":cur_agent"), #for now do not let heroes to run away from battle
          # (neg|troop_is_hero, ":troop_id"),
                                
          (agent_start_running_away, ":cur_agent"),
          (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 1),
        (try_end),
      (else_try),
        (neq, ":force_retreat", 1),
        (agent_get_slot, ":agent_courage_score", ":cur_agent",  slot_agent_courage_score),
        (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),      
        (val_mul, ":agent_hit_points", 40),
        (store_sub, ":stop_running_away_courage_score_limit", 3700, ":agent_hit_points"), 
        (ge, ":agent_courage_score", ":stop_running_away_courage_score_limit"), #if (courage score > 3700 - agent hit points) and (agent is running away) then stop running away, average hit points : 50, average running away limit = 1700
        (agent_stop_running_away, ":cur_agent"),
        (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 0),
      (try_end),      
  ]), #ozan
  
  
  # script_team_get_class_percentages
  # Input: arg1: team_no, arg2: try for team's enemies
  # Output: reg0: percentage infantry, reg1: percentage archers, reg2: percentage cavalry
  ("team_get_class_percentages",
    [
      (assign, ":num_infantry", 0),
      (assign, ":num_archers", 0),
      (assign, ":num_cavalry", 0),
      (assign, ":num_total", 0),
      (store_script_param, ":team_no", 1),
      (store_script_param, ":negate", 2),
      (try_for_agents,":cur_agent"),
        (agent_is_active,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":negate", 1),
          (teams_are_enemies, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (else_try),
          (eq, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (val_add, ":num_total", 1),
        (agent_get_class, ":agent_class", ":cur_agent"),
        (try_begin),
          (eq, ":agent_class", grc_infantry),
          (val_add,  ":num_infantry", 1),
        (else_try),
          (eq, ":agent_class", grc_archers),
          (val_add,  ":num_archers", 1),
        (else_try),
          (eq, ":agent_class", grc_cavalry),
          (val_add,  ":num_cavalry", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq,  ":num_total", 0),
        (assign,  ":num_total", 1),
      (try_end),
      (store_mul, ":perc_infantry",":num_infantry",100),
      (val_div, ":perc_infantry",":num_total"),
      (store_mul, ":perc_archers",":num_archers",100),
      (val_div, ":perc_archers",":num_total"),
      (store_mul, ":perc_cavalry",":num_cavalry",100),
      (val_div, ":perc_cavalry",":num_total"),
      (assign, reg0, ":perc_infantry"),
      (assign, reg1, ":perc_archers"),
      (assign, reg2, ":perc_cavalry"),
  ]),
  
  # script_get_closest3_distance_of_enemies_at_pos1
  # Input: arg1: team_no, pos1
  # Output: reg0: distance in cms.
  ("get_closest3_distance_of_enemies_at_pos1",
    [
      (assign, ":min_distance_1", 100000),
      (assign, ":min_distance_2", 100000),
      (assign, ":min_distance_3", 100000),
      
      (store_script_param, ":team_no", 1),
      (try_for_agents,":cur_agent"),
        (agent_is_active,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (teams_are_enemies, ":agent_team", ":team_no"),
       
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions,":cur_dist",pos2,pos1),
        (try_begin),
          (lt, ":cur_dist", ":min_distance_1"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":min_distance_1"),
          (assign, ":min_distance_1", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_2"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_3"),
          (assign, ":min_distance_3", ":cur_dist"),
        (try_end),
      (try_end),
      
      (assign, ":total_distance", 0),
      (assign, ":total_count", 0),
      (try_begin),
        (lt, ":min_distance_1", 100000),
        (val_add, ":total_distance", ":min_distance_1"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_2", 100000),
        (val_add, ":total_distance", ":min_distance_2"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_3", 100000),
        (val_add, ":total_distance", ":min_distance_3"),
        (val_add, ":total_count", 1),
      (try_end),
      (assign, ":average_distance", 100000),
      (try_begin),
        (gt, ":total_count", 0),
        (store_div, ":average_distance", ":total_distance", ":total_count"),
      (try_end),
      (assign, reg0, ":average_distance"),
      (assign, reg1, ":min_distance_1"),
      (assign, reg2, ":min_distance_2"),
      (assign, reg3, ":min_distance_3"),
  ]),

  # script_team_get_average_position_of_enemies
  # Input: arg1: team_no, 
  # Output: pos0: average position.
  ("team_get_average_position_of_enemies",
    [
      (store_script_param_1, ":team_no"),
      (init_position, pos0),
      (assign, ":num_enemies", 0),
      (assign, ":accum_x", 0),
      (assign, ":accum_y", 0),
      (assign, ":accum_z", 0),
      (try_for_agents,":enemy_agent"),
        (agent_is_active,":enemy_agent"),
        (agent_is_alive, ":enemy_agent"),
        (agent_is_human, ":enemy_agent"),
        (agent_get_team, ":enemy_team", ":enemy_agent"),
        (teams_are_enemies, ":team_no", ":enemy_team"),
      
        (agent_get_position, pos62, ":enemy_agent"),
      
        (position_get_x, ":x", pos62),
        (position_get_y, ":y", pos62),
        (position_get_z, ":z", pos62),
      
        (val_add, ":accum_x", ":x"),
        (val_add, ":accum_y", ":y"),
        (val_add, ":accum_z", ":z"),
        (val_add, ":num_enemies", 1),
      (try_end),
      
      (try_begin), #to avoid division by zeros at below division part.
        (le, ":num_enemies", 0),
        (assign, ":num_enemies", 1),
      (try_end),
      
      (store_div, ":average_x", ":accum_x", ":num_enemies"),
      (store_div, ":average_y", ":accum_y", ":num_enemies"),
      (store_div, ":average_z", ":accum_z", ":num_enemies"),

      (position_set_x, pos0, ":average_x"),
      (position_set_y, pos0, ":average_y"),
      (position_set_z, pos0, ":average_z"),
      
      (assign, reg0, ":num_enemies"),
  ]),
  

          
  # script_init_town_walkers
  # Input: none
  # Output: none
  ("init_town_walkers",
  [
    # (try_begin),
      # (eq, "$town_nighttime", 0),
      # (try_for_range, ":walker_no", 0, num_town_walkers),
        # (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
        # (party_get_slot, ":walker_troop_id", "$current_town", ":troop_slot"),
        # (gt, ":walker_troop_id", 0),
        # (store_add, ":entry_no", town_walker_entries_start, ":walker_no"),
        # (set_visitor, ":entry_no", ":walker_troop_id"),
      # (try_end),  
    # (try_end),  
  ]),



  # script_init_town_walker_agents
  # Input: none
  # Output: none
  ("init_town_walker_agents",
    [(assign, ":num_walkers", 0),
     (try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_troop", ":cur_agent"),
       (is_between, ":cur_troop", walkers_begin, walkers_end),
       (val_add, ":num_walkers", 1),
       (agent_get_position, pos1, ":cur_agent"),
       (try_for_range, ":i_e_p", 9, 40),#Entry points
         (entry_point_get_position, pos2, ":i_e_p"),
         (get_distance_between_positions, ":distance", pos1, pos2),
         (lt, ":distance", 200),
         (agent_set_slot, ":cur_agent", 0, ":i_e_p"),
       (try_end),
       (call_script, "script_set_town_walker_destination", ":cur_agent"),
     (try_end),
  ]),


  # script_tick_town_walkers
  # Input: none
  # Output: none
  ("tick_town_walkers",
    [(try_for_agents, ":cur_agent"),
       (agent_is_active,":cur_agent"),
       (agent_get_troop_id, ":cur_troop", ":cur_agent"),
       (is_between, ":cur_troop", walkers_begin, walkers_end),
       (agent_get_slot, ":target_entry_point", ":cur_agent", 0),
       (entry_point_get_position, pos1, ":target_entry_point"),
       (try_begin),
         (lt, ":target_entry_point", 32),
         (init_position, pos2),
         (position_set_y, pos2, 250),
         (position_transform_position_to_parent, pos1, pos1, pos2),
       (try_end),
       (agent_get_position, pos2, ":cur_agent"),
       (get_distance_between_positions, ":distance", pos1, pos2),
       (lt, ":distance", 400),
       (assign, ":random_no", 0),
       (try_begin),
         (lt, ":target_entry_point", 32),
         #(store_random_in_range, ":random_no", 0, 100),
         (call_script,"script_store_vince_random_in_range", 0, 100, 0),
         (assign,":random_no",reg0),
       (try_end),
       (lt, ":random_no", 20),
       (call_script, "script_set_town_walker_destination", ":cur_agent"),
     (try_end),
  ]),


  # script_set_town_walker_destination
  # Input: arg1 = agent_no
  # Output: none
  ("set_town_walker_destination",
    [
    (store_script_param_1, ":agent_no"),
     (agent_get_slot, ":cur_target_entry_point", ":agent_no", 0),
     (assign, ":try_limit", 100),
     (assign, ":target_entry_point", 0),
     (try_for_range, ":unused", 0, ":try_limit"),
       (call_script,"script_store_vince_random_in_range", 20, 37, 0),
       (neq, reg0, ":cur_target_entry_point"),
       (assign, ":target_entry_point", reg0),
       (assign, ":try_limit", 0),
     (try_end),
     (try_begin),
       (gt, ":target_entry_point", 0),
       (agent_set_slot, ":agent_no", 0, ":target_entry_point"),
       (entry_point_get_position, pos1, ":target_entry_point"),
       (try_begin),
         (lt, ":target_entry_point", 32),
         (init_position, pos2),
         (position_set_y, pos2, 250),
         (position_transform_position_to_parent, pos1, pos1, pos2),
       (try_end),
       (agent_set_scripted_destination, ":agent_no", pos1, 0),
       (agent_set_speed_limit, ":agent_no", 5),
     (try_end),
  ]),

  # script_town_init_doors
  # Input: door_state (-1 = closed, 1 = open, 0 = use $town_nighttime)
  # Output: none (required for siege mission templates)
  ("town_init_doors",
   [(store_script_param, ":door_state", 1),
    (try_begin),
      (assign, ":continue", 0),
      (try_begin),
        (eq, ":door_state", 1),
        (assign, ":continue", 1),
      (else_try),
        (eq, ":door_state", 0),
        (eq, "$town_nighttime", 0),
        (assign, ":continue", 1),
      (try_end),
      (eq, ":continue", 1),# open doors
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
    (try_end),
  ]),



  # script_store_movement_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_movement_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
    (team_get_movement_order, ":cur_order", ":team_no", ":class_no"),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (str_store_string, s1, "@Holding"),
    (else_try),
      (eq, ":cur_order", mordr_follow),
      (str_store_string, s1, "@Following"),
    (else_try),
      (eq, ":cur_order", mordr_charge),
      (str_store_string, s1, "@Charging"),
    (else_try),
      (eq, ":cur_order", mordr_advance),
      (str_store_string, s1, "@Advancing"),
    (else_try),
      (eq, ":cur_order", mordr_fall_back),
      (str_store_string, s1, "@Falling Back"),
    (else_try),
      (eq, ":cur_order", mordr_stand_closer),
      (str_store_string, s1, "@Standing Closer"),
    (else_try),
      (eq, ":cur_order", mordr_spread_out),
      (str_store_string, s1, "@Spreading Out"),
    (else_try),
      (eq, ":cur_order", mordr_stand_ground),
      (str_store_string, s1, "@Standing"),
    (else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_store_riding_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_riding_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
    (team_get_riding_order, ":cur_order", ":team_no", ":class_no"),
    (try_begin),
      (eq, ":cur_order", rordr_free),
      (str_store_string, s1, "@Free"),
    (else_try),
      (eq, ":cur_order", rordr_mount),
      (str_store_string, s1, "@Mount"),
    (else_try),
      (eq, ":cur_order", rordr_dismount),
      (str_store_string, s1, "@Dismount"),
    (else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_store_weapon_usage_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_weapon_usage_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
    (team_get_weapon_usage_order, ":cur_order", ":team_no", ":class_no"),
    (team_get_hold_fire_order, ":cur_hold_fire", ":team_no", ":class_no"),
    (try_begin),
      (eq, ":cur_order", wordr_use_any_weapon),
      (eq, ":cur_hold_fire", aordr_fire_at_will),
      (str_store_string, s1, "@Any Weapon"),
    (else_try),
      (eq, ":cur_order", wordr_use_blunt_weapons),
      (eq, ":cur_hold_fire", aordr_fire_at_will),
      (str_store_string, s1, "@Blunt Weapons"),
    (else_try),
      (eq, ":cur_order", wordr_use_any_weapon),
      (eq, ":cur_hold_fire", aordr_hold_your_fire),
      (str_store_string, s1, "str_hold_fire"),
    (else_try),
      (eq, ":cur_order", wordr_use_blunt_weapons),
      (eq, ":cur_hold_fire", aordr_hold_your_fire),
      (str_store_string, s1, "str_blunt_hold_fire"),
    (else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_team_give_order_from_order_panel
  # Input: arg1 = leader_agent_no, arg2 = class_no
  # Output: none
  ("team_give_order_from_order_panel",
   [(store_script_param_1, ":leader_agent_no"),
    (store_script_param_2, ":order"),
    (agent_get_team, ":team_no", ":leader_agent_no"),
    (set_show_messages, 0),
    (try_begin),
      (eq, "$g_formation_group0_selected", 1),
      (team_give_order, ":team_no", 0, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group1_selected", 1),
      (team_give_order, ":team_no", 1, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group2_selected", 1),
      (team_give_order, ":team_no", 2, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group3_selected", 1),
      (team_give_order, ":team_no", 3, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group4_selected", 1),
      (team_give_order, ":team_no", 4, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group5_selected", 1),
      (team_give_order, ":team_no", 5, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group6_selected", 1),
      (team_give_order, ":team_no", 6, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group7_selected", 1),
      (team_give_order, ":team_no", 7, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group8_selected", 1),
      (team_give_order, ":team_no", 8, ":order"),
    (try_end),

    (try_begin),
      (eq, ":order", mordr_hold),
      (agent_get_position, pos1, ":leader_agent_no"),
      (try_begin),
        (eq, "$g_formation_group0_selected", 1),
        (team_set_order_position, ":team_no", 0, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group1_selected", 1),
        (team_set_order_position, ":team_no", 1, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group2_selected", 1),
        (team_set_order_position, ":team_no", 2, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group3_selected", 1),
        (team_set_order_position, ":team_no", 3, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group4_selected", 1),
        (team_set_order_position, ":team_no", 4, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group5_selected", 1),
        (team_set_order_position, ":team_no", 5, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group6_selected", 1),
        (team_set_order_position, ":team_no", 6, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group7_selected", 1),
        (team_set_order_position, ":team_no", 7, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group8_selected", 1),
        (team_set_order_position, ":team_no", 8, pos1),
      (try_end),
    (try_end),
    (set_show_messages, 1),
  ]),  


  # script_update_order_panel
  # Input: arg1 = team_no
  # Output: none
  ("update_order_panel",
   [(store_script_param_1, ":team_no"),
    (set_fixed_point_multiplier, 1000),

    #ozan added
    (try_begin),
      (eq, "$group0_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_weapon_usage", s1),
    (try_end),

    #ozan added
    (assign, ":stat_position_y", 660),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group0_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but0_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but0_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but0_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group1_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but1_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but1_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but1_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group2_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but2_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but2_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but2_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group3_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but3_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but3_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but3_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group4_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but4_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but4_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but4_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group5_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but5_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but5_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but5_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group6_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but6_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but6_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but6_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group7_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but7_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but7_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but7_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group8_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but8_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but8_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but8_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
  ]),

  # script_update_agent_position_on_map
  # Input: arg1 = agent_no, pos2 = map_size_pos
  # Output: none
  ("update_agent_position_on_map",
   [(store_script_param_1, ":agent_no"),
    (agent_get_slot, ":agent_overlay", ":agent_no", slot_agent_map_overlay_id),

    (get_player_agent_no, ":player_agent"),
    (try_begin),
      (le, ":agent_overlay", 0),
      (set_fixed_point_multiplier, 1000),
      (try_begin),
        (eq, ":agent_no", ":player_agent"),
        (create_mesh_overlay, reg1, "mesh_player_dot"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg1, pos1),
      (else_try),
        (create_mesh_overlay, reg1, "mesh_white_dot"),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 200),
        (overlay_set_size, reg1, pos1),
      (try_end),
      (overlay_set_alpha, reg1, 0x88),
      (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, reg1),
      (assign, ":agent_overlay", reg1),
    (try_end),

    (try_begin),
      (neq, ":agent_no", ":player_agent"),
      (agent_get_party_id, ":agent_party", ":agent_no"),
      (try_begin),
        (eq, ":agent_party", "p_main_party"),
        (agent_get_division, ":agent_division", ":agent_no"),
        (try_begin),
          (eq, ":agent_division", 0),
          (overlay_set_color, ":agent_overlay", 0x8d5220),
        (else_try),
          (eq, ":agent_division", 1),
          (overlay_set_color, ":agent_overlay", 0x34c6e4),
        (else_try),
          (eq, ":agent_division", 2),
          (overlay_set_color, ":agent_overlay", 0x569619),
        (else_try),
          (eq, ":agent_division", 3),
          (overlay_set_color, ":agent_overlay", 0xFFE500),
        (else_try),
          (eq, ":agent_division", 4),
          (overlay_set_color, ":agent_overlay", 0x990099),
        (else_try),
          (eq, ":agent_division", 5),
          (overlay_set_color, ":agent_overlay", 0x99FE80),
        (else_try),
          (eq, ":agent_division", 6),
          (overlay_set_color, ":agent_overlay", 0x9DEFFE),
        (else_try),
          (eq, ":agent_division", 7),
          (overlay_set_color, ":agent_overlay", 0xFECB9D),
        (else_try),
          (eq, ":agent_division", 8),
          (overlay_set_color, ":agent_overlay", 0xB19C9C),
        (try_end),
      (else_try),
        (agent_is_ally, ":agent_no"),
        (overlay_set_color, ":agent_overlay", 0x5555FF),
      (else_try),
        (overlay_set_color, ":agent_overlay", 0xFF0000),
      (try_end),
    (try_end),

    (try_begin),
      (eq, ":agent_no", ":player_agent"),
      (agent_get_look_position, pos1, ":agent_no"),
      (position_get_rotation_around_z, ":rot", pos1),
      (init_position, pos10),
      (position_rotate_z, pos10, ":rot"),
      (overlay_set_mesh_rotation, ":agent_overlay", pos10),
      (call_script, "script_convert_3d_pos_to_map_pos"),
    (else_try),
      (agent_get_position, pos1, ":agent_no"),
      (call_script, "script_convert_3d_pos_to_map_pos"),
    (try_end),
    (overlay_set_position, ":agent_overlay", pos0),
  ]),

  # script_convert_3d_pos_to_map_pos
  # Input: pos1 = 3d_pos, pos2 = map_size_pos
  # Output: pos0 = map_pos
  ("convert_3d_pos_to_map_pos",
   [(set_fixed_point_multiplier, 1000),
    (position_transform_position_to_local, pos3, pos2, pos1),
    (position_get_x, ":agent_x_pos", pos3),
    (position_get_y, ":agent_y_pos", pos3),
    (val_div, ":agent_x_pos", "$g_battle_map_scale"),
    (val_div, ":agent_y_pos", "$g_battle_map_scale"),
    (set_fixed_point_multiplier, 1000),
    (store_sub, ":map_x", 980, "$g_battle_map_width"),
    (store_sub, ":map_y", 730, "$g_battle_map_height"),
    (val_add, ":agent_x_pos", ":map_x"),
    (val_add, ":agent_y_pos", ":map_y"),
    (position_set_x, pos0, ":agent_x_pos"),
    (position_set_y, pos0, ":agent_y_pos"),
  ]),

  # script_update_order_flags_on_map
  # Input: none
  # Output: none
  ("update_order_flags_on_map",
   [(set_fixed_point_multiplier, 1000),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":player_team", ":player_agent"),

    (get_scene_boundaries, pos2, pos3),

    (team_get_movement_order, ":cur_order", ":player_team", grc_infantry),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_infantry),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_infantry_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0),
    (try_end),
    (team_get_movement_order, ":cur_order", ":player_team", grc_archers),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_archers),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_archers_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0),
    (try_end),
    (team_get_movement_order, ":cur_order", ":player_team", grc_cavalry),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_cavalry),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_cavalry_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0),
    (try_end),
  ]),

  # script_update_order_panel_checked_classes
  # Input: none   
  # Output: none
  ("update_order_panel_checked_classes",
   [(get_player_agent_no, ":player_agent"),
    (agent_get_team, ":player_team", ":player_agent"),

    (try_begin),
      (eq, "$group0_has_troops", 1),
      (class_is_listening_order, ":player_team", 0),
      (overlay_set_val, "$g_presentation_obj_battle_check0", 1),
      (assign, "$g_formation_group0_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0x44),
    (else_try),
      (eq, "$group0_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
      (assign, "$g_formation_group0_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (class_is_listening_order, ":player_team", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check1", 1),
      (assign, "$g_formation_group1_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0x44),
    (else_try),
      (eq, "$group1_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
      (assign, "$g_formation_group1_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (class_is_listening_order, ":player_team", 2),
      (overlay_set_val, "$g_presentation_obj_battle_check2", 1),
      (assign, "$g_formation_group2_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0x44),
    (else_try),
      (eq, "$group2_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
      (assign, "$g_formation_group2_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (class_is_listening_order, ":player_team", 3),
      (overlay_set_val, "$g_presentation_obj_battle_check3", 1),
      (assign, "$g_formation_group3_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0x44),
    (else_try),
      (eq, "$group3_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
      (assign, "$g_formation_group3_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (class_is_listening_order, ":player_team", 4),
      (overlay_set_val, "$g_presentation_obj_battle_check4", 1),
      (assign, "$g_formation_group4_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0x44),
    (else_try),
      (eq, "$group4_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
      (assign, "$g_formation_group4_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (class_is_listening_order, ":player_team", 5),
      (overlay_set_val, "$g_presentation_obj_battle_check5", 1),
      (assign, "$g_formation_group5_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0x44),
    (else_try),
      (eq, "$group5_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
      (assign, "$g_formation_group5_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (class_is_listening_order, ":player_team", 6),
      (overlay_set_val, "$g_presentation_obj_battle_check6", 1),
      (assign, "$g_formation_group6_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0x44),
    (else_try),
      (eq, "$group6_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
      (assign, "$g_formation_group6_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (class_is_listening_order, ":player_team", 7),
      (overlay_set_val, "$g_presentation_obj_battle_check7", 1),
      (assign, "$g_formation_group7_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0x44),
    (else_try),
      (eq, "$group7_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
      (assign, "$g_formation_group7_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (class_is_listening_order, ":player_team", 8),
      (overlay_set_val, "$g_presentation_obj_battle_check8", 1),
      (assign, "$g_formation_group8_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0x44),
    (else_try),
      (eq, "$group8_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
      (assign, "$g_formation_group8_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
    (try_end),
  ]),

  # script_update_order_panel_statistics_and_map
  # Input: none
  # Output: none
  ("update_order_panel_statistics_and_map", #TODO: Call this in every battle mission template, once per second
   [(set_fixed_point_multiplier, 1000),

    (assign, ":num_us_ready_group0", 0),
    (assign, ":num_us_ready_group1", 0),
    (assign, ":num_us_ready_group2", 0),
    (assign, ":num_us_ready_group3", 0),
    (assign, ":num_us_ready_group4", 0),
    (assign, ":num_us_ready_group5", 0),
    (assign, ":num_us_ready_group6", 0),
    (assign, ":num_us_ready_group7", 0),
    (assign, ":num_us_ready_group8", 0),

    (assign, ":num_us_ready_men", 0),
    (assign, ":num_us_wounded_men", 0),
    (assign, ":num_us_routed_men", 0),
    (assign, ":num_us_dead_men", 0),
    (assign, ":num_allies_ready_men", 0),
    (assign, ":num_allies_wounded_men", 0),
    (assign, ":num_allies_routed_men", 0),
    (assign, ":num_allies_dead_men", 0),
    (assign, ":num_enemies_ready_men", 0),
    (assign, ":num_enemies_wounded_men", 0),
    (assign, ":num_enemies_routed_men", 0),
    (assign, ":num_enemies_dead_men", 0),

    (get_scene_boundaries, pos2, pos3),

    (try_for_agents,":cur_agent"),
      (agent_is_active,":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_get_division, ":agent_division", ":cur_agent"),
      (agent_get_party_id, ":agent_party", ":cur_agent"),
      (agent_get_slot, ":agent_overlay", ":cur_agent", slot_agent_map_overlay_id),
      (try_begin),
        (eq, ":agent_party", "p_main_party"),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),          
          (try_begin),
            (eq, ":agent_division", 0),
            (val_add, ":num_us_ready_group0", 1),
            (eq, "$group0_has_troops", 1), #added to solve problem. test this.
          (else_try),
            (eq, ":agent_division", 1),
            (val_add, ":num_us_ready_group1", 1),
            (eq, "$group1_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 2),
            (val_add, ":num_us_ready_group2", 1),
            (eq, "$group2_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 3),
            (val_add, ":num_us_ready_group3", 1),
            (eq, "$group3_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 4),
            (val_add, ":num_us_ready_group4", 1),
            (eq, "$group4_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 5),
            (val_add, ":num_us_ready_group5", 1),
            (eq, "$group5_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 6),
            (val_add, ":num_us_ready_group6", 1),
            (eq, "$group6_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 7),
            (val_add, ":num_us_ready_group7", 1),
            (eq, "$group7_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 8),
            (val_add, ":num_us_ready_group8", 1),
            (eq, "$group8_has_troops", 1), #added to solve problem.
          (try_end),
          (val_add, ":num_us_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_us_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_us_routed_men", 1),
        (else_try),
          (val_add, ":num_us_dead_men", 1),
        (try_end),
      (else_try),
        (agent_is_ally, ":cur_agent"),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),
          (val_add, ":num_allies_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_allies_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_allies_routed_men", 1),
        (else_try),
          (val_add, ":num_allies_dead_men", 1),
        (try_end),
      (else_try),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),
          (val_add, ":num_enemies_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_enemies_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_enemies_routed_men", 1),
        (else_try),
          (val_add, ":num_enemies_dead_men", 1),
        (try_end),
      (try_end),
    (try_end),
    
    (assign, reg1, ":num_us_ready_group0"),
    (assign, reg2, ":num_us_ready_group1"),
    (assign, reg3, ":num_us_ready_group2"),
    (assign, reg4, ":num_us_ready_group3"),
    (assign, reg5, ":num_us_ready_group4"),
    (assign, reg6, ":num_us_ready_group5"),
    (assign, reg7, ":num_us_ready_group6"),
    (assign, reg8, ":num_us_ready_group7"),
    (assign, reg9, ":num_us_ready_group8"),
    (assign, reg10, ":num_us_ready_men"),
    (assign, reg11, ":num_us_wounded_men"),
    (assign, reg12, ":num_us_routed_men"),
    (assign, reg13, ":num_us_dead_men"),
    (assign, reg14, ":num_allies_ready_men"),
    (assign, reg15, ":num_allies_wounded_men"),
    (assign, reg16, ":num_allies_routed_men"),
    (assign, reg17, ":num_allies_dead_men"),
    (assign, reg18, ":num_enemies_ready_men"),
    (assign, reg19, ":num_enemies_wounded_men"),
    (assign, reg20, ":num_enemies_routed_men"),
    (assign, reg21, ":num_enemies_dead_men"),

    (try_begin),
      (eq, "$group0_has_troops", 1),
      (str_store_class_name, s1, 0),
      (overlay_set_text, "$g_presentation_obj_battle_name0", "str_s1_reg1"),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (str_store_class_name, s1, 1),
      (overlay_set_text, "$g_presentation_obj_battle_name1", "str_s1_reg2"),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (str_store_class_name, s1, 2),
      (overlay_set_text, "$g_presentation_obj_battle_name2", "str_s1_reg3"),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (str_store_class_name, s1, 3),
      (overlay_set_text, "$g_presentation_obj_battle_name3", "str_s1_reg4"),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (str_store_class_name, s1, 4),
      (overlay_set_text, "$g_presentation_obj_battle_name4", "str_s1_reg5"),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (str_store_class_name, s1, 5),
      (overlay_set_text, "$g_presentation_obj_battle_name5", "str_s1_reg6"),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (str_store_class_name, s1, 6),
      (overlay_set_text, "$g_presentation_obj_battle_name6", "str_s1_reg7"),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (str_store_class_name, s1, 7),
      (overlay_set_text, "$g_presentation_obj_battle_name7", "str_s1_reg8"),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (str_store_class_name, s1, 8),
      (overlay_set_text, "$g_presentation_obj_battle_name8", "str_s1_reg9"),
    (try_end),
    
    (overlay_set_text, "$g_battle_us_ready", "@{!}{reg10}"),
    (overlay_set_text, "$g_battle_us_wounded", "@{!}{reg11}"),
    (overlay_set_text, "$g_battle_us_routed", "@{!}{reg12}"),
    (overlay_set_text, "$g_battle_us_dead", "str_reg13"),
    (overlay_set_text, "$g_battle_allies_ready", "str_reg14"),
    (overlay_set_text, "$g_battle_allies_wounded", "str_reg15"),
    (overlay_set_text, "$g_battle_allies_routed", "str_reg16"),
    (overlay_set_text, "$g_battle_allies_dead", "str_reg17"),
    (overlay_set_text, "$g_battle_enemies_ready", "str_reg18"),
    (overlay_set_text, "$g_battle_enemies_wounded", "str_reg19"),
    (overlay_set_text, "$g_battle_enemies_routed", "str_reg20"),
    (overlay_set_text, "$g_battle_enemies_dead", "str_reg21"),

    (assign, ":stat_position_x", 675),
    (assign, ":stat_position_y", 280),
    (val_add, ":stat_position_x", 70),
    (val_add, ":stat_position_y", 60),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_us_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_dead", pos1),
    (val_add, ":stat_position_x", -210),
    (val_add, ":stat_position_y", -30),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_allies_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_dead", pos1),
    (val_add, ":stat_position_x", -210),
    (val_add, ":stat_position_y", -30),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_enemies_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_dead", pos1),

    (call_script, "script_update_order_flags_on_map"),
  ]),

  #script_agent_troop_get_banner_mesh_sp
  # INPUT: agent_no, troop_no
  # OUTPUT: banner_mesh
  ("agent_troop_get_banner_mesh_sp",
  [
    (store_script_param, ":agent_no", 1),
    (store_script_param, ":troop_no", 2),
    
	  #(assign, ":banner_troop", -1),
    (assign, ":banner_mesh", "mesh_banners_default_b"),
    
    (try_begin),
     (lt, ":agent_no", 0),
     (try_begin),
       (ge, ":troop_no", 0),
       
       (this_or_next|eq, ":troop_no", "trp_player"),
       (is_between, ":troop_no", companions_begin, companions_end),
       #(assign, ":banner_troop", "trp_player"),
     (else_try),
       (assign, ":banner_mesh", "mesh_banners_default_a"),
     (try_end),
   (else_try),
     (eq, "$g_is_quick_battle", 1),
     (agent_get_team, ":agent_team", ":agent_no"),
     (try_begin),
       (eq, ":agent_team", 0),
       (assign, ":banner_mesh", "$g_quick_battle_team_0_banner"),
     (else_try),
       (assign, ":banner_mesh", "$g_quick_battle_team_1_banner"),
     (try_end),
   (else_try),
     (agent_get_troop_id, ":troop_id", ":agent_no"),
     (eq, ":troop_no", "trp_player"),
     #(assign, ":banner_troop", ":troop_id"),
   (else_try),
     (agent_get_party_id, ":agent_party", ":agent_no"),
     (try_begin),
       (lt, ":agent_party", 0),
       (is_between, ":troop_id", companions_begin, companions_end),
       (main_party_has_troop, ":troop_id"),
       (assign, ":agent_party", "p_main_party"),
     (try_end),
     (ge, ":agent_party", 0),
     (party_get_template_id, ":party_template", ":agent_party"),
     (try_begin),
       (eq, ":party_template", "pt_enemy"),
       (assign, ":banner_mesh", "mesh_banners_default_c"),
     (else_try),
       (eq, ":agent_party", "p_main_party"),
       (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
       (gt, ":num_stacks", 0),
       (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
       (eq, ":leader_troop_id", "trp_player"),
       #(assign, ":banner_troop", ":leader_troop_id"),
     (try_end),
   (try_end),
   (assign, reg0, ":banner_mesh"),
   # (try_begin),
     # (ge, ":banner_troop", 0),
     # (try_begin),
       # (neg|troop_slot_ge, ":banner_troop", slot_troop_banner_scene_prop, 1),
       # (assign, ":banner_mesh", "mesh_banners_default_b"),
     # (else_try), 
       # (troop_get_slot, ":banner_spr", ":banner_troop", slot_troop_banner_scene_prop),
       # (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
       # (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
       # (val_sub, ":banner_spr", banner_scene_props_begin),
       # (store_add, ":banner_mesh", ":banner_spr", arms_meshes_begin),
     # (try_end),
   # (try_end),
  ]),
  
 
  #script_agent_troop_get_banner_mesh
  # INPUT: agent_no, troop_no
  # OUTPUT: banner_mesh
  ("agent_troop_get_banner_mesh",
    [
      (store_script_param, ":agent_no", 1),
      (store_script_param, ":troop_no", 2),
      
       (assign, ":banner_mesh", "mesh_banners_default_b"),
       (try_begin),
         (game_in_multiplayer_mode),
         (agent_is_active,":agent_no"),
         (agent_get_group, ":agent_group", ":agent_no"),
         (try_begin),
           (neg|player_is_active, ":agent_group"),
           (agent_get_player_id, ":agent_group", ":agent_no"),
         (try_end),
         (try_begin),
           #if player banners are not allowed, use the default banner mesh
           (eq, "$g_multiplayer_allow_player_banners", 1),
           (player_is_active, ":agent_group"),
           (player_get_banner_id, ":player_banner", ":agent_group"),
           (ge, ":player_banner", 0),
           (lt, ":player_banner", 93), #patch1115 fix 19/1
           (store_add, ":banner_mesh", ":player_banner", arms_meshes_begin),
           (assign, ":already_used", 0),
           (try_for_range, ":cur_faction", factions_begin, factions_end), #wrong client data check
             (faction_slot_eq, ":cur_faction", slot_faction_banner, ":banner_mesh"),
             (assign, ":already_used", 1),
           (try_end),
           (eq, ":already_used", 0), #otherwise use the default banner mesh
         (else_try),
           (agent_get_team, ":agent_team", ":agent_no"),
           (team_get_faction, ":team_faction_no", ":agent_team"),

           (try_begin),
             (agent_is_human, ":agent_no"),
             (faction_get_slot, ":banner_mesh", ":team_faction_no", slot_faction_banner),
           (else_try),
             (agent_get_rider, ":rider_agent_no", ":agent_no"),
             #(agent_get_position, pos1, ":agent_no"),
             #(position_get_x, ":pos_x", pos1),
             #(position_get_y, ":pos_y", pos1),
             #(assign, reg0, ":pos_x"),
             #(assign, reg1, ":pos_y"),
             #(assign, reg2, ":agent_no"),
             #(display_message, "@{!}agent_no:{reg2}, pos_x:{reg0} , posy:{reg1}"),
             (try_begin),
               (agent_is_active, ":rider_agent_no"),
               (agent_get_team, ":rider_agent_team", ":rider_agent_no"),
               (team_get_faction, ":rider_team_faction_no", ":rider_agent_team"),
               (faction_get_slot, ":banner_mesh", ":rider_team_faction_no", slot_faction_banner),
             (else_try),
               (assign, ":banner_mesh", "mesh_banners_default_c"),
             (try_end),                   
           (try_end),             
         (try_end),
         (assign, reg0, ":banner_mesh"),
       (else_try),
         # Else run SP code shit.
         (call_script, "script_agent_troop_get_banner_mesh_sp", ":agent_no", ":troop_no"),
       (try_end),
     ]),


  
  #script_troop_agent_set_banner
  # INPUT: agent_no
  # OUTPUT: none
  ("troop_agent_set_banner",
    [
       (store_script_param, ":tableau_no",1),
       (store_script_param, ":agent_no", 2),
       (store_script_param, ":troop_no", 3),
       (call_script, "script_agent_troop_get_banner_mesh", ":agent_no", ":troop_no"),
       (cur_agent_set_banner_tableau_material, ":tableau_no", reg0),
     ]),


  #script_add_troop_to_cur_tableau
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),
       #(assign, ":banner_mesh", -1),
       # (troop_get_slot, ":banner_spr", ":troop_no", slot_troop_banner_scene_prop),
       # (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
       # (try_begin),
         # (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
         # (val_sub, ":banner_spr", banner_scene_props_begin),
         # (store_add, ":banner_mesh", ":banner_spr", banner_meshes_begin),
       # (try_end),

       (cur_tableau_clear_override_items),
       
#       (cur_tableau_set_override_flags, af_override_fullhelm),
       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":eye_height", 162),
       (store_mul, ":camera_distance", ":troop_no", 87323),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 139),
       (store_mul, ":camera_yaw", ":troop_no", 124337),
       (val_mod, ":camera_yaw", 50),
       (val_add, ":camera_yaw", -25),
       (store_mul, ":camera_pitch", ":troop_no", 98123),
       (val_mod, ":camera_pitch", 20),
       (val_add, ":camera_pitch", -14),
       (assign, ":animation", "anim_stand_man"),
       
##       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
##       (try_begin),
##         (gt, ":horse_item", 0),
##         (assign, ":eye_height", 210),
##         (cur_tableau_add_horse, ":horse_item", pos2, anim_horse_stand, 0),
##         (assign, ":animation", anim_ride_0),
##         (position_set_z, pos5, 125),
##         (try_begin),
##           (is_between, ":camera_yaw", -10, 10), #make sure horse head doesn't obstruct face.
##           (val_min, ":camera_pitch", -5),
##         (try_end),
##       (try_end),
       (position_set_z, pos5, ":eye_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       # (try_begin),
         # (ge, ":banner_mesh", 0),

         # (init_position, pos1),
         # (position_set_z, pos1, -1500),
         # (position_set_x, pos1, 265),
         # (position_set_y, pos1, 400),
         # (position_transform_position_to_parent, pos3, pos5, pos1),
         # (cur_tableau_add_mesh, ":banner_mesh", pos3, 400, 0),
       # (try_end),
       (cur_tableau_add_troop, ":troop_no", pos2, ":animation" , 0),

       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_character
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_character",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       (cur_tableau_set_override_flags, af_override_fullhelm),
##       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 4, 8, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 150),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 360),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_inventory
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_inventory",
    [
       (store_script_param, ":troop_no",1),
       (store_mod, ":side", ":troop_no", 4), #side flag is inside troop_no value
       (val_div, ":troop_no", 4), #removing the flag bit
       (val_mul, ":side", 90), #to degrees

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       
       (init_position, pos2),
       (position_rotate_z, pos2, ":side"),
       (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 380),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_profile
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_profile",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       
       (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 380),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (profile_get_banner_id, ":profile_banner"),
       (try_begin),
         (ge, ":profile_banner", 0),
         (lt, ":profile_banner", 93),#patch1115 fix 19/1
         (init_position, pos2),
         (val_add, ":profile_banner", banner_meshes_begin),
         (position_set_x, pos2, -175),
         (position_set_y, pos2, -300),
         (position_set_z, pos2, 180),
         (position_rotate_x, pos2, 90),
         (position_rotate_y, pos2, -15),
         (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
       (try_end),

       (init_position, pos2),
       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  
  #script_add_troop_to_cur_tableau_for_party
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_party",
    [
       (store_script_param, ":troop_no",1),
       (store_mod, ":hide_weapons", ":troop_no", 2), #hide_weapons flag is inside troop_no value
       (val_div, ":troop_no", 2), #removing the flag bit

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       (try_begin),
         (eq, ":hide_weapons", 1),
         (cur_tableau_set_override_flags, af_override_fullhelm|af_override_head|af_override_weapons),
       (try_end),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 450),
       (assign, ":camera_yaw", 15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
       (try_begin),
         (gt, ":horse_item", 0),
         (eq, ":hide_weapons", 0),
         (cur_tableau_add_horse, ":horse_item", pos2, "anim_horse_stand", 0),
         (assign, ":animation", "anim_ride_0"),
         (assign, ":camera_yaw", 23),
         (assign, ":cam_height", 150),
         (assign, ":camera_distance", 550),
       (try_end),
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),  



  # script_get_culture_with_party_faction_for_music
  # Input: arg1 = party_no
  # Output: reg0 = culture
  ("get_culture_with_party_faction_for_music",
    [
      (store_script_param, ":party_no", 1),
      (store_faction_of_party, ":faction_no", ":party_no"),
      (try_begin),
        (this_or_next|eq, ":faction_no", "fac_player_faction"),
        (eq, ":faction_no", "fac_player_supporters_faction"),
        (assign, ":faction_no", "$players_kingdom"),
      (try_end),
   
      (call_script, "script_get_culture_with_faction_for_music", ":faction_no"),
     ]),

  # script_get_culture_with_faction_for_music
  # Input: arg1 = party_no
  # Output: reg0 = culture
  ("get_culture_with_faction_for_music",
    [
      (store_script_param, ":faction_no", 1),
      (try_begin),
        (eq, ":faction_no", "fac_britain"),
        (assign, ":result", mtf_culture_1),
      (else_try),
        (eq, ":faction_no", "fac_france"),
        (assign, ":result", mtf_culture_2),
      (else_try),
        (eq, ":faction_no", "fac_prussia"),
        (assign, ":result", mtf_culture_3),
      (else_try),
        (eq, ":faction_no", "fac_russia"),
        (assign, ":result", mtf_culture_4),
      (else_try),
        (eq, ":faction_no", "fac_austria"),
        (assign, ":result", mtf_culture_5),
      (else_try),
        (eq, ":faction_no", "fac_rhine"),
        (assign, ":result", mtf_culture_6),
      (else_try),
        (eq, ":faction_no", "fac_outlaws"),
        (assign, ":result", mtf_culture_6),
      (else_try), 
        (assign, ":result", 0), #no culture, including player with no bindings to another kingdom
      (try_end),
      (assign, reg0, ":result"),
     ]),

  # script_music_set_situation_with_culture
  # Input: arg1 = music_situation
  # Output: none
  ("music_set_situation_with_culture",
    [
      (store_script_param, ":situation", 1),
      (assign, ":culture", 0), #no culture
      (try_begin),
        (this_or_next|eq, ":situation", mtf_sit_town),
        (this_or_next|eq, ":situation", mtf_sit_day),
        (this_or_next|eq, ":situation", mtf_sit_night),
        (this_or_next|eq, ":situation", mtf_sit_town_infiltrate),
        (eq, ":situation", mtf_sit_encounter_hostile),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (this_or_next|eq, ":situation", mtf_sit_ambushed),
        (eq, ":situation", mtf_sit_fight),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_multiplayer_fight),
        (call_script, "script_get_culture_with_faction_for_music", "$g_multiplayer_team_1_faction"),
        (val_or, ":culture", reg0),
        (call_script, "script_get_culture_with_faction_for_music", "$g_multiplayer_team_2_faction"),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_travel),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_victorious),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_killed),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
      (try_end),
      (try_begin),
        (this_or_next|eq, ":situation", mtf_sit_town),
        (eq, ":situation", mtf_sit_day),
        (try_begin),
          (is_currently_night),
          (assign, ":situation", mtf_sit_night),
        (try_end),
      (try_end),
      (music_set_situation, ":situation"),
      (music_set_culture, ":culture"),
     ]),

  
  # script_combat_music_set_situation_with_culture
  # Input: none
  # Output: none
  ("combat_music_set_situation_with_culture",
    [
      (assign, ":situation", mtf_sit_fight),
      (assign, ":num_allies", 0),
      (assign, ":num_enemies", 0),
      (try_for_agents, ":agent_no"),
        (agent_is_active,":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
        (store_character_level, ":troop_level", ":agent_troop_id"),
        (val_add,  ":troop_level", 10),
        (val_mul, ":troop_level", ":troop_level"),
        (try_begin),
          (agent_is_ally, ":agent_no"),
          (val_add, ":num_allies", ":troop_level"),
        (else_try),
          (val_add, ":num_enemies", ":troop_level"),
        (try_end),
      (try_end),
      (val_mul, ":num_allies", 4), #play ambushed music if we are 2 times outnumbered.
      (val_div, ":num_allies", 3),
      (try_begin),
        (lt, ":num_allies", ":num_enemies"),
        (assign, ":situation", mtf_sit_ambushed),
      (try_end),
      (call_script, "script_music_set_situation_with_culture", ":situation"),
     ]),



  
  # script_custom_battle_end
  # Input: none
  # Output: none
  ("custom_battle_end",
    [
      (assign, "$g_custom_battle_team1_death_count", 0),
      (assign, "$g_custom_battle_team2_death_count", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_for_agents, ":cur_agent"),
        (agent_is_active, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (neg|agent_is_alive, ":cur_agent"),
        (agent_get_team, ":cur_team", ":cur_agent"),
        (try_begin),
          (eq, ":cur_team", ":player_team"),
          (val_add, "$g_custom_battle_team1_death_count", 1),
        (else_try),
          (val_add, "$g_custom_battle_team2_death_count", 1),
        (try_end),
      (try_end),
      ]),  





  # script_iterate_pointer_arrow
  # Input: none
  # Output: none
  ("iterate_pointer_arrow",
    [
      (store_mission_timer_a_msec, ":cur_time"),
      (try_begin),
        (assign, ":up_down", ":cur_time"),
        (assign, ":turn_around", ":cur_time"),
        (val_mod, ":up_down", 1080),
        (val_div, ":up_down", 3),
        (scene_prop_get_instance, ":prop_instance", "spr_pointer_arrow", 0),
        (prop_instance_get_position, pos0, ":prop_instance"),
        (position_set_z_to_ground_level, pos0),
        (position_move_z, pos0, "$g_pointer_arrow_height_adder", 1),
        (set_fixed_point_multiplier, 100),
        (val_mul, ":up_down", 100),
        (store_sin, ":up_down_sin", ":up_down"),
        (position_move_z, pos0, ":up_down_sin", 1),
        (position_move_z, pos0, 100, 1),
        (val_mod, ":turn_around", 2880),
        (val_div, ":turn_around", 8),
        (init_position, pos1),
        (position_rotate_z, pos1, ":turn_around"),
        (position_copy_rotation, pos0, pos1),
        (prop_instance_set_position, ":prop_instance", pos0),
      (try_end),
     ]),
  
  # Vincenzo begin  
  
  # script_multiplayer_broadcast_message
  # Input: arg1 = message
  # Output: none
  ("multiplayer_broadcast_message",
   [
     (try_begin),
       (neg|str_is_empty,s4),
       (try_begin),
         (multiplayer_is_server),
         
         (try_for_players, ":player_no", "$g_ignore_server"),
           (player_is_active, ":player_no"),
           (multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
         (try_end),
         
         (server_add_message_to_log, "@[SERVER]: {s4}"),
       (else_try),
         (neg|game_in_multiplayer_mode),
         (display_message, s4),
       (try_end),
     (try_end),
   ]),

  # script_store_bool_s9
  # Input: arg1 = 1 or 0 int
  # Output: assigned string s9
  ("store_bool_s9",
   [
     (store_script_param, ":bool", 1),
     
     (try_begin),
       (eq, ":bool", 1),
       (str_store_string, s9, "str_true"),
     (else_try),
       (eq, ":bool", 0),
       (str_store_string, s9, "str_false"),
     (try_end),
   ]),


#modders_props:custom_strings
  # script_multiplayer_server_update_custom_strings
  # Input: arg1 = player_id
  # Sends server side custom strings defined in module_troops.py to clients
  ("multiplayer_server_update_custom_strings", 
  [
    (store_script_param, ":player_id", 1),
    (try_begin),
      (gt, "$g_number_of_custom_strings", 0),
      (multiplayer_is_dedicated_server),
      (ge, ":player_id", 0),
      
        (store_add, ":end_at", "trp_custom_string_1", "$g_number_of_custom_strings"),
        # Iterate through all troops which hold custom strings and send strings to player
        (try_for_range, ":cur_num", "trp_custom_string_1", ":end_at"),
         (lt, ":cur_num", "trp_custom_strings_end"),
          (str_store_troop_name, s23, ":cur_num"),
          (multiplayer_send_3_int_to_player, ":player_id", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, ":cur_num", 0), #message 1: troop id for which string will be set in next message
          (multiplayer_send_string_to_player, ":player_id", multiplayer_event_return_custom_string, s23), #message 2: set string
        (try_end),

    (try_end),
  ]),


  # script_multiplayer_server_update_conquest_flag_strings
  # Input: arg1 = player_id
  # Output: none
  # Sends conquest flag names to clients. Flags are selected at script_conquest_get_flag_name.
  # Flag names are stored as plural strings
  ("multiplayer_server_update_conquest_flag_strings", [
    (store_script_param, ":player_id", 1),
    
    (try_begin),
      (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
      
      (try_for_range, ":flag_id", 0, "$g_number_of_flags"),
        (call_script, "script_conquest_get_flag_name", ":flag_id"), # returns s0
        
        (store_add, ":troop_id", "trp_custom_string_1", ":flag_id"),
        #Has to be 1 to 39, because 40 is used by the custom_order_menu
        (lt, ":troop_id", "trp_custom_string_40"),
          
        (multiplayer_send_3_int_to_player, ":player_id", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, ":troop_id", 1),
        (multiplayer_send_string_to_player, ":player_id", multiplayer_event_return_custom_string, s0),
      (try_end),
    (try_end),
  ]),
  
  # script_multiplayer_server_spawn_ships
  # Input: none
  # Output: none
  # ("multiplayer_server_spawn_ships",
  # [
    # (assign, reg0, 0), # Script ok?
    # (multiplayer_is_server),
    # (try_begin),
      # (scene_prop_get_num_instances, ":end_cond", "spr_ship_b"),
      # (try_for_range,":cur_instance",0,":end_cond"),
        # (scene_prop_get_instance, ":boat_instance", "spr_ship_b", ":cur_instance"),
        # (prop_instance_get_variation_id, ":variation_2", ":boat_instance"),
        # (is_between,":variation_2",125,127), # is our ship :p
        ##(scene_prop_set_slot,":boat_instance", scene_prop_slot_in_use, 1),
        # (scene_prop_set_hit_points, ":boat_instance", 10000),
        # (prop_instance_get_position, pos1, ":boat_instance"),
        
        # (copy_position, pos2, pos1),
        # (assign, ":init_x_vel", 200),
        # (assign, ":init_y_vel", 0),
        # (assign, ":init_z_vel", 50),
        # (position_move_x, pos2, ":init_x_vel"),
        # (position_move_z, pos2, ":init_z_vel"),
        # (set_spawn_position, pos2),
        # (spawn_scene_prop, "spr_mm_steer"),
        # (assign, ":steer_instance", reg0),
        # (scene_prop_set_slot,":steer_instance", scene_prop_slot_x_value, ":init_x_vel"),
        # (scene_prop_set_slot,":steer_instance", scene_prop_slot_y_value, ":init_y_vel"),
        # (scene_prop_set_slot,":steer_instance", scene_prop_slot_z_value, ":init_z_vel"),
        # (scene_prop_set_slot,":boat_instance", scene_prop_slot_boat_steer, ":steer_instance"),
        
        # (try_begin),
          # (eq, ":variation_2", 125), # Team 1
          # (assign, "$g_team_1_boat", ":boat_instance"),
          # (scene_prop_set_team, ":boat_instance", 1),
          
        # (else_try),
          # (eq, ":variation_2", 126), # Team 2
          # (assign, "$g_team_2_boat", ":boat_instance"),
          # (scene_prop_set_team, ":boat_instance", 2),
        # (try_end),
        
      # (try_end),
      
    
      # (assign, ":entry_point", 125), # team 1 shipspawn.
      # (neg|entry_point_is_auto_generated,":entry_point"),
      # (entry_point_get_position, pos11, ":entry_point"),
      # (set_spawn_position, pos11),
      # (spawn_scene_prop, "spr_ship_b"),
      # (assign, ":boat_team1_instance_id", reg0),
      # (position_set_z, pos11, 0),
      # (position_rotate_z, pos11, 90),
      # (prop_instance_animate_to_position, ":boat_team1_instance_id", pos11, 0),
      # (scene_prop_set_slot,":boat_team1_instance_id", scene_prop_slot_in_use, 1),
      
      ##(assign, ":entry_point", multi_initial_spawn_point_team_1), # team 1 spawn
      ##(neg|entry_point_is_auto_generated,":entry_point"),
      ##(entry_point_get_position, pos11, ":entry_point"),
      # (copy_position, pos61, pos11),
      # (position_set_z, pos61, 200),
      # (position_move_x, pos61, -100),
      # (entry_point_set_position, multi_initial_spawn_point_team_1, pos61),
      
      # (assign, ":entry_point", 126), # team 2 shipspawn.
      # (neg|entry_point_is_auto_generated,":entry_point"),
      # (entry_point_get_position, pos12, ":entry_point"),
      # (set_spawn_position, pos12),
      # (spawn_scene_prop, "spr_ship_b"),
      # (assign, ":boat_team2_instance_id", reg0),
      # (position_set_z, pos12, 0),
      # (position_rotate_z, pos12, 90),
      # (prop_instance_animate_to_position, ":boat_team2_instance_id", pos12, 0),
      # (scene_prop_set_slot,":boat_team2_instance_id", scene_prop_slot_in_use, 1),
      
      ##(assign, ":entry_point", multi_initial_spawn_point_team_2), # team 2 spawn
      ##(neg|entry_point_is_auto_generated,":entry_point"),
      # (copy_position, pos62, pos12),
      # (position_set_z, pos62, 200),
      # (position_move_x, pos62, -100),
      # (entry_point_set_position, multi_initial_spawn_point_team_2, pos62),
      
      # (assign, reg0, 1), # Script ok?
    # (try_end), 
  # ]),
  
  
  # script_multiplayer_server_slay_player
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_slay_player",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":dont_affect_score", 2),
     (assign, reg0, 0),
     
     ################################################
     # (try_for_agents, ":cur_agent"),
       # (agent_is_alive, ":cur_agent"),
       # (agent_get_slot, ":test", ":cur_agent", 50),
       # (try_begin),
         # (eq, ":test", 99),
         # (call_script, "script_multiplayer_server_play_sound_at_agent", "snd_reload_pistol", ":cur_agent"),
       # (else_try),
         # (call_script, "script_multiplayer_server_play_sound_at_agent", "snd_test_music", ":cur_agent"),
         # (agent_set_slot,":cur_agent", 50, 99),
       # (try_end),
     # (try_end),
     
     #(eq, 1, 0),
     # (try_begin),
       # (player_get_agent_id, ":player_agent_id", ":player_no"),
       # (gt, ":player_agent_id", 0),
       # (agent_is_alive, ":player_agent_id"),
       # (agent_equip_item,":player_agent_id","itm_bagpipe"), 
       
       
       #(agent_get_position, pos1, ":player_agent_id"), #pos1 holds agent's position.
       
       
      # (position_move_y, pos1, 200),       
       # (set_spawn_position, pos1),
       
       # (spawn_scene_prop, "spr_drum_dummy1"),
       # (assign, ":drum_instance_id", reg0),
       # (assign,":num_players",multiplayer_player_loops_end),
        # (call_script, "script_set_attached_scene_prop", ":player_agent_id", ":drum_instance_id"),
        # (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
          # (player_is_active, ":player_no"),
          # (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":player_agent_id", ":drum_instance_id"),
        # (try_end),
       
       # (agent_set_animation, ":player_agent_id", "anim_drum"),
       
     # (try_end),
     
     
      # (eq, 1, 0),
     
  #   (try_begin),
  #   (try_begin),
     
    # (set_fixed_point_multiplier, 1000),
     
     
           # angle = degrees*Math.PI/180;
           # (assign,":y_rot",45),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",90),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",135),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",180),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",225),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",270),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",325),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
           
           # (assign,":y_rot",360),
           # (assign, reg0, ":y_rot"),
           # (val_mul,":y_rot",1000),
           # (store_mul,":cannon_angle",":y_rot",3142), # pi = 3.14159pluswhateverthatgoesbeyondourfixedpoint
           # (assign, reg1, ":cannon_angle"),
           # (val_div,":cannon_angle",180),
           # (assign, reg2, ":cannon_angle"),
           # (store_sin, ":sin_of_angle", ":y_rot"),
           # (assign, reg4, ":sin_of_angle"),
           # (store_cos, ":cos_of_angle", ":y_rot"),
           # (assign, reg3, ":cos_of_angle"),
           
           
           # (str_store_string, s4, "@y_rot: {reg0}    y_rot*pi: {reg1}     (y_rot*pi)/180: {reg2}     cos_of_angle: {reg3}     sin_of_angle: {reg4}"),
           # (call_script, "script_multiplayer_broadcast_message"),
           
          # (store_mul,":init_x_vel",":cos_of_angle",":init_vel"),
          # (assign, reg6, ":init_x_vel"),
          # (val_div,":init_x_vel",10),
           #(val_add,":init_x_vel",":rand_x_vel"),
           # z += speed * Math.Sin(angle);
           #(store_sin, ":sin_of_angle", ":cannon_angle"),
           #(assign, reg7, ":sin_of_angle"),
           #(store_mul,":init_z_vel",":sin_of_angle",":init_vel"),
           #(assign, reg8, ":init_z_vel"),
           #(val_div,":init_z_vel",10),
           #(val_add,":init_z_vel",":rand_z_vel"),
           
           # (try_begin),
             # (is_between,":y_rot",1,181),
           #  (val_mul,":init_z_vel",-1),
           # (try_end),
           
           # (assign, reg0, ":init_x_vel"),
           # (assign, reg1, ":init_z_vel"),
           # (str_store_string, s4, "@init_x_vel: {reg0}     init_z_vel: {reg1}     y_rot: {reg2}     y_rot*pi: {reg3}     y_rot*pi/180: {reg4}     cos_of_angle: {reg5}     init_x_vel: {reg6}     sin_of_angle: {reg7}     init_z_vel: {reg8}"),
           # (call_script, "script_multiplayer_broadcast_message"),
     
     
    # (set_fixed_point_multiplier,100),
     
       # (gt, ":player_no", 0),
       # (player_is_active, ":player_no"),
       # (player_get_agent_id, ":player_agent_id", ":player_no"),
       # (gt, ":player_agent_id", 0),
       # (agent_is_alive, ":player_agent_id"),
       # (agent_get_position, pos1, ":player_agent_id"), #pos1 holds agent's position.
       
       # (position_move_y, pos1, 100),       
      ##(position_rotate_z, pos1, 90),
       # (set_spawn_position, pos1),
       
       # (spawn_item,"itm_flag_france_84e",0,60), # remove after 1 minutes
       # (spawn_item,"itm_britain_colour_33rd_king",0,60), # remove after 1 minutes
       
       # (spawn_scene_prop, "spr_mm_ship"),
       # (assign, ":boat_instance_id", reg0),
       # (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_in_use, 1),
       
       # (set_fixed_point_multiplier,100),
       
       # (position_move_y, pos1, -430),
       # (position_move_z, pos1, 30),
       
       # (set_spawn_position, pos1),
       # (spawn_scene_prop, "spr_mm_ship_control_button"),
       # (assign, ":boat_steer_instance_id", reg0),
       
       # (scene_prop_set_slot,":boat_steer_instance_id", scene_prop_slot_parent_prop,":boat_instance_id"),
       # (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_child_prop1,":boat_steer_instance_id"),
       # (scene_prop_set_slot,":boat_steer_instance_id", scene_prop_slot_y_value,-430),
       # (scene_prop_set_slot,":boat_steer_instance_id", scene_prop_slot_z_value,30),
       # (scene_prop_set_slot,":boat_steer_instance_id", scene_prop_slot_is_active,1),
       # (scene_prop_set_slot,":boat_steer_instance_id", scene_prop_slot_in_use, 1),
       
       # (position_move_y, pos1, -300),
       
       # (spawn_scene_prop, "spr_mm_ship_rudder_control"),
       # (assign, ":boat_rudder_instance_id", reg0),
       # (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_parent_prop,":boat_instance_id"),
       # (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_child_prop2,":boat_rudder_instance_id"),
       # (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_y_value,-604),
       # (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_is_active,1),
       # (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_in_use, 1),
       
       #(assign, "$g_ships_enabled", 1),
    # (try_end),

     #   (assign, reg0, 1),
    #    (eq, 1, 0),
       
 
       
       # (copy_position, pos2, pos1),

       
       # (position_move_z, pos1, 200),
       # (position_move_x, pos1, 200),
       # (set_spawn_position, pos1),
       # (spawn_agent,"trp_boat_dummy"),
       # (assign, ":boat_agent_id", reg0),
       
       # (agent_set_animation, ":boat_agent_id", "anim_kneeling"),
       
      ## (position_move_x, pos2, 20000),
      ## (prop_instance_animate_to_position, ":boat_instance_id", pos2, 6000),
       
      ## (agent_set_team, ":boat_agent_id", 2),
       
       # (position_move_x, pos1, 500),
       # (set_spawn_position, pos1),
       # (spawn_scene_prop, "spr_mm_cannon"),
       # (assign, ":cannon_instance_id", reg0),
       
       # (assign,":num_players",multiplayer_player_loops_end),
       # (call_script, "script_set_attached_scene_prop", ":boat_agent_id", ":cannon_instance_id"),
       # (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
         # (player_is_active, ":player_no"),
         # (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":boat_agent_id", ":cannon_instance_id"),
       # (try_end),
       # (assign, reg0, 1),
      #(try_end),

     
      #(eq, 1, 0),
     
     # (try_for_agents, ":cur_agent"),
       # (agent_is_alive, ":cur_agent"),
       # (agent_is_non_player, ":cur_agent"),
       # (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
       
       # (set_spawn_position, pos1),
       # (spawn_scene_prop, "spr_mm_cannon"),
       # (assign, ":cannon_instance_id", reg0),
       
       # (agent_set_attached_scene_prop, ":cur_agent", ":cannon_instance_id"),
       # (agent_set_attached_scene_prop_x, ":cur_agent", 20),
       # (agent_set_attached_scene_prop_z, ":cur_agent", 50),
     # (try_end),
     
     # (assign, reg0, 1), # script is ok.
     
     # (eq, 1, 0),
     ################################################
     
     
     (try_begin),
       (multiplayer_is_server),
       
       (player_is_active, ":player_no"),
       
       (player_get_agent_id, ":player_agent_id", ":player_no"),
       (agent_is_active,":player_agent_id"),
       (agent_is_alive, ":player_agent_id"),
            
       (agent_get_position, pos1, ":player_agent_id"), #pos1 holds agent's position.
       (particle_system_burst, "psys_map_village_fire_smoke", pos1, 100), # Burn the fuck.
       
       (try_begin),
         (agent_slot_eq, ":player_agent_id", slot_agent_god_mode, 1),#patch1115 54/4 start
         (agent_set_no_death_knock_down_only, ":player_agent_id", 0),
         (agent_set_slot, ":player_agent_id", slot_agent_god_mode, 0),       
       (try_end), #patch1115 54/4 end
       
       (call_script, "script_cf_common_kill_player_by_script",":player_agent_id",":player_no",":dont_affect_score"),
        
       (assign, reg0, 1), # script is ok.
     (try_end),
 #    (try_end),
   ]),

  
  #script_multiplayer_server_revive_player  #patch1115 46/11 start
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_revive_player",
  [
  (store_script_param, ":player_no", 1),
  (assign, reg0, 0),
  
  (try_begin),
     (multiplayer_is_server),
       
     (player_is_active, ":player_no"),
     
     (player_get_agent_id, ":player_agent_id", ":player_no"),
     (assign, ":is_dead", 0),
     (try_begin),
       (agent_is_active,":player_agent_id"),
       (neg|agent_is_alive, ":player_agent_id"),
       (assign, ":is_dead", 1),
     (else_try),
       (neg|agent_is_active,":player_agent_id"),
       (assign, ":is_dead", 1),
     (try_end),
     
     (eq, ":is_dead", 1),
     
     (player_get_team_no, ":player_team", ":player_no"),
     (lt, ":player_team", multi_team_spectator),
          
     (player_get_troop_id, ":player_troop", ":player_no"),
     (ge, ":player_troop", 0), # even have a troop selected?
     
     (try_begin),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
       (is_between, ":player_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),             
       # get the officer troop for myself
       (troop_get_slot,":troop_officer",":player_troop",slot_troop_officer_troop),
       (player_set_troop_id, ":troop_officer", ":player_no"),
     (try_end),
     
     (assign, ":have_entrypoint", 0),
     (try_begin),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_king),
       (try_begin),
         (eq, ":player_team", 0),
         (assign, ":entry_no", multi_initial_spawn_point_team_1),
         (assign, ":have_entrypoint", 1),
       (else_try),
         (eq, ":player_team", 1),
         (assign, ":entry_no", multi_initial_spawn_point_team_2),
         (assign, ":have_entrypoint", 1),
       (try_end),
     (else_try),
       (try_begin),
         (eq, ":player_team", 0),
         (assign, ":entry_no", 22),
         (assign, ":have_entrypoint", 1),
       (else_try),
         (eq, ":player_team", 1),
         (assign, ":entry_no", 44),
         (assign, ":have_entrypoint", 1),
       (try_end),
     (try_end),
     
     (eq, ":have_entrypoint", 1),
     
     (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
     (player_spawn_new_agent, ":player_no", ":entry_no"),
     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_king),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
       (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),
       (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
       (try_begin),
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (player_slot_eq, ":player_no", slot_player_spawned_at_siege_round, 0),
         (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 1),
       (try_end),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),#lets spawn the bots with him, if he hasnt spawned yet
       (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),
       (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
       
       (player_get_slot,":selected_bot_type",":player_no",slot_player_bot_type_wanted),
       (call_script,"script_scale_num_bots_after_troop_type",":selected_bot_type","$g_squad_size_limit"),
       (assign,":num_bots",reg0),
       (store_current_scene, ":cur_scene"),
       (modify_visitors_at_site, ":cur_scene"),
       (add_visitors_to_current_scene, ":entry_no", ":selected_bot_type", ":num_bots", ":player_team", ":player_no"),\
       
            #find proper specialist bot types for troop types  #patch1115 43/10 start
             (assign, ":bot_type_musician", -1),
             (assign, ":bot_type_drummer", -1),
             (assign, ":bot_type_flag", -1),


             (try_begin),
               (store_sub, ":try_for_specialist", ":player_troop", 1),
               (try_begin),
                 (troop_slot_eq,":try_for_specialist",slot_troop_rank,mm_rank_sergeant),
                 (assign, ":bot_type_flag", ":try_for_specialist"),
               (try_end),
               (store_add, ":try_for_specialist", ":player_troop", 1),
               (try_begin),
                 (troop_slot_eq,":try_for_specialist",slot_troop_rank,mm_rank_musician),
                 (assign, ":bot_type_musician", ":try_for_specialist"),
                 (store_add, ":try_for_specialist", ":try_for_specialist", 1),
                 (try_begin),
                   (troop_slot_eq,":try_for_specialist",slot_troop_rank,mm_rank_musician),
                   (assign, ":bot_type_drummer", ":try_for_specialist"),
                 (try_end),
               (try_end),
             (try_end),

              #fifer:
             (try_begin),
              (gt, ":bot_type_musician", 0),
              (add_visitors_to_current_scene, ":entry_no", ":bot_type_musician", 1, ":player_team", ":player_no"),
              #(player_set_slot, ":player_no", slot_player_musician_spawned, ":bot_type_musician"),
             (try_end),
             #drummer:
             (try_begin),
              (gt, ":bot_type_drummer", 0),
              (add_visitors_to_current_scene, ":entry_no", ":bot_type_drummer", 1, ":player_team", ":player_no"),
              #(player_set_slot, ":player_no", slot_player_drummer_spawned, ":bot_type_drummer"),
             (try_end),
             #flag:
             (try_begin),
              (gt, ":bot_type_flag", 0),
              (add_visitors_to_current_scene, ":entry_no", ":bot_type_flag", 1, ":player_team", ":player_no"),
              #(player_set_slot, ":player_no", slot_player_flag_spawned, ":bot_type_flag"),
             (try_end),  #patch1115 43/10 end           
             #To ensure any balancing bots becomes the same squad even if player changes bot type before balancing kicks in
             (player_set_slot,":player_no",slot_player_bot_type_spawned,":selected_bot_type"),
     (else_try),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (player_slot_eq, ":player_no", slot_player_first_spawn, 1),
       (player_set_slot, ":player_no", slot_player_first_spawn, 0),
     (try_end),
     
     # we actually spawned him.
     (assign, reg0, 1),
   (try_end),
  
  ]),  #patch1115 46/11 end
  
    # script_multiplayer_server_god_mode  #patch1115 54/5 start
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_god_mode",
  [
      (store_script_param, ":player_no1", 1),
      (store_script_param, ":player_no", 2),
      
      
      (assign, reg0, 0),
      (assign, reg60, 0),
      (try_begin),
       (player_is_active, ":player_no"),
       (player_is_active, ":player_no1"),
        
        (player_get_agent_id, ":player_agent_no", ":player_no1"),
        (agent_is_active,":player_agent_no"),
        (agent_is_alive, ":player_agent_no"),
        (try_begin),
          (agent_get_slot, ":player_god_mode", ":player_agent_no", slot_agent_god_mode),
          (try_begin),
            (eq, ":player_god_mode", 0),
            (agent_set_no_death_knock_down_only, ":player_agent_no", 1),
            (agent_set_slot, ":player_agent_no", slot_agent_god_mode, 1),
            (agent_set_speed_modifier,":player_agent_no", 350),
            (agent_set_slot,":player_agent_no",slot_agent_base_speed_mod,350),
            #(agent_set_horse_speed_factor, ":player_agent_no", 100),
            (assign, reg0, 1),
            (assign, reg60, 1),
          (else_try),
            (eq, ":player_god_mode", 1),
            (agent_set_no_death_knock_down_only, ":player_agent_no", 0),
            (agent_set_slot, ":player_agent_no", slot_agent_god_mode, 0),
            (agent_set_speed_modifier,":player_agent_no", 100),
            (agent_set_slot,":player_agent_no",slot_agent_base_speed_mod,100),
            #(agent_set_horse_speed_factor, ":player_agent_no", 100),
            (assign, reg0, 1),
            #(assign, reg60, 0),
          (try_end),          
        (try_end),
      (try_end),#patch1115 54/5 end
      ]),     
      
  # script_multiplayer_server_freeze_player
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_freeze_player",
   [
     (store_script_param, ":player_no", 1),
     (assign, reg0, 0),
     
     (try_begin),
       (multiplayer_is_server),
       
       (player_is_active, ":player_no"),
       
       (player_get_agent_id, ":player_agent_id", ":player_no"),
       (agent_is_active, ":player_agent_id"),
       (agent_is_alive, ":player_agent_id"),

       (agent_get_animation,":cur_anim",":player_agent_id",0),

       (try_begin),
         (eq, ":cur_anim", "anim_freeze_player"),
         (agent_set_animation,":player_agent_id","anim_kneeling_end"),
         (agent_set_horse_speed_factor, ":player_agent_id", 100),
       (else_try),
         (agent_set_animation,":player_agent_id","anim_freeze_player"),
         (agent_set_horse_speed_factor, ":player_agent_id", 1),
       (try_end),

       (assign, reg0, 1), # script is ok.
     (try_end),
   ]),
   
   
  # script_multiplayer_server_swap_player
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_swap_player",
   [
     (store_script_param, ":player_no", 1),
     
     (assign, reg0, 0),
     (try_begin),
       (multiplayer_is_server),
       
       (player_is_active, ":player_no"),
       
       (try_begin),
         #if player is living add +1 to his kill count because he will get -1 because of team change while living.
         (player_get_agent_id, ":player_agent_id", ":player_no"),
         (agent_is_active,":player_agent_id"),
         (agent_is_alive, ":player_agent_id"),
         
         (try_begin),
          (neq, "$g_competitive_score_mode", 1), #G:comp_score if ON then don't compensate

          (player_get_kill_count, ":player_kill_count", ":player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
          (val_add, ":player_kill_count", 1),
          (player_set_kill_count, ":player_no", ":player_kill_count"),

          (player_get_death_count, ":player_death_count", ":player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
          (val_sub, ":player_death_count", 1),
          (player_set_death_count, ":player_no", ":player_death_count"),

         (try_end),

         (player_get_score, ":player_score", ":player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
         (val_add, ":player_score", 1),
         (player_set_score, ":player_no", ":player_score"),
         
         (call_script,"script_multiplayer_server_send_player_score_kill_death", ":player_no", ":player_score", ":player_kill_count", ":player_death_count"),
       (try_end),
      
       # swap him
       (player_get_team_no, ":player_team", ":player_no"),
       (is_between, ":player_team", 0, 2),
         
       (try_begin),
         (eq, ":player_team", 0),
         (assign, ":player_team", 1),
       (else_try),
         (eq, ":player_team", 1),
         (assign, ":player_team", 0),
       (try_end),     
      
       (player_set_troop_id, ":player_no", -1),
       (player_set_team_no, ":player_no", ":player_team"),
       (multiplayer_send_message_to_player, ":player_no", multiplayer_event_force_start_team_selection),
       
       (assign, reg0, 1), # script is ok.
     (try_end),
   ]),
     

  # script_multiplayer_server_swap_teams
  # Input: none
  # Output: none
  ("multiplayer_server_swap_teams",
   [
     (try_begin),
       (multiplayer_is_server),
       (try_for_players, ":cur_player", "$g_ignore_server"),
         (player_is_active, ":cur_player"),
       
         (call_script, "script_multiplayer_server_swap_player", ":cur_player"),
       (try_end),
     (try_end),
   ]),
  
  # script_multiplayer_server_spec_player
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_spec_player",
   [
     (store_script_param, ":player_no", 1),
     (assign, reg0, 0),
     
     (try_begin),
       (multiplayer_is_server),
       
       (player_is_active, ":player_no"),
       
       (try_begin),
         #if player is living add +1 to his kill count because he will get -1 because of team change while living.
         (player_get_agent_id, ":player_agent_id", ":player_no"),
         (agent_is_active,":player_agent_id"),
         (agent_is_alive, ":player_agent_id"),

         (player_get_kill_count, ":player_kill_count", ":player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
         (val_add, ":player_kill_count", 1),
         (player_set_kill_count, ":player_no", ":player_kill_count"),

         (player_get_death_count, ":player_death_count", ":player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
         (val_sub, ":player_death_count", 1),
         (player_set_death_count, ":player_no", ":player_death_count"),

         (player_get_score, ":player_score", ":player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
         (val_add, ":player_score", 1),
         (player_set_score, ":player_no", ":player_score"),
         
         (call_script,"script_multiplayer_server_send_player_score_kill_death", ":player_no", ":player_score", ":player_kill_count", ":player_death_count"),
       (try_end),
      
       # swap him
       (player_get_team_no, ":player_team", ":player_no"),
       (neq, ":player_team", multi_team_spectator),
       (assign, ":player_team", multi_team_spectator),
	   
       (player_set_troop_id, ":player_no", -1),
       (player_set_team_no, ":player_no", ":player_team"),
       
       (assign, reg0, 1), # script is ok.
     (try_end),
    ]),
  
   
  # script_multiplayer_server_play_sound_at_agent
  # Input: arg1 = sound_id
  # Input: arg2 = agent_id
  # Output: none
  ("multiplayer_server_play_sound_at_agent",
   [
    (store_script_param, ":sound_id", 1),
    (store_script_param, ":agent_id", 2),
    
    (try_begin),
      (this_or_next|eq, ":sound_id", -1),
      (is_between,":sound_id","snd_click","snd_sounds_end"), # valid sound
      (agent_is_active,":agent_id"),

      (try_begin),
        (multiplayer_is_server),
        
        (try_begin),
          (eq, ":sound_id", -1), # Stop sound
          
          (try_for_players, ":cur_player", "$g_ignore_server"),
            (player_is_active,":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_agent_stop_sound, ":agent_id"),
          (try_end),
          (agent_stop_sound,":agent_id"),
        (else_try),
          (agent_play_sound,":agent_id",":sound_id"),
        (try_end),
      (else_try),
        (neg|game_in_multiplayer_mode),
        (try_begin),
          (eq,":sound_id",-1),
          (agent_stop_sound,":agent_id"),
        (else_try),
          (agent_play_sound,":agent_id",":sound_id"),
        (try_end),
      (try_end),
    (try_end),
   ]),
   
  # script_multiplayer_server_construct_prop
  # Input: arg1 = user_agent
  # Input: arg2 = prop_id
  # Output: reg0 = is_ok
  ("multiplayer_server_construct_prop",
  [
    (store_script_param_1, ":user_agent"),
    (store_script_param_2, ":prop_kind_id"),
    
    (assign,":is_ok",0),
    (assign, ":screw_the_flu", 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":user_agent"),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      (store_mission_timer_a_msec, ":current_time"),
			(agent_get_slot, ":last_build_at", ":user_agent", slot_agent_last_build_at),
			(store_sub, ":elapsed_time", ":current_time", ":last_build_at"),
			(try_begin),
				(ge, ":elapsed_time", 500), # must wait 1s to place next object
				(assign, ":screw_the_flu", 1),
			(try_end),   #patch1115 6/1 end
	    #(store_mission_timer_a, ":current_time"),  #patch1115 fix 6/1 
			#(store_mission_timer_a_msec, ":current_time"),
      #(agent_get_slot, ":last_build_at", ":user_agent", slot_agent_last_build_at),
      #(store_sub, ":elapsed_time", ":current_time", ":last_build_at"),
      #(try_begin),
       # (ge, ":elapsed_time", 500), # must wait 1s to place next object
       # (assign, ":is_ok", 1),
      #  (assign, ":screw_the_flu", 1),
      #(try_end),   #patch1115 6/1 end
      
     # (eq, ":is_ok", 1),
      
      #(agent_set_slot, ":user_agent", slot_agent_last_build_at, ":current_time"),
      
      (assign,":on_ship",0),
      (try_for_range,":ship_type", "spr_mm_ship", "spr_door_destructible"),
        (try_for_prop_instances, ":instance_id", ":ship_type", somt_object),
          (prop_instance_get_variation_id,":usable_boat",":instance_id"),
          (eq,":usable_boat",1),
          
          (scene_prop_has_agent_on_it, ":instance_id", ":user_agent"),
          
          (assign,":on_ship",1),
        (try_end),
      (try_end),
      
      (eq,":on_ship",0),
      
      (set_fixed_point_multiplier, 100),
      
      (agent_get_team, ":player_team", ":user_agent"),
      (val_add,":player_team",1), # add one for slot problems
      
      (assign,":rotate_90",0),
      (assign,":rotate_180",0),
      (assign,":ground_offset",0),
      (assign,":only_spawn_on_terrain",0),
      (assign,":is_plank",0),
      (try_begin),
        (eq,":prop_kind_id","spr_mm_stakes_construct"),
        (assign,":rotate_90",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stakes2_construct"),
        (assign,":rotate_90",1),
      (else_try),
        (eq,":prop_kind_id","spr_earthwork1_destructible"),
        (assign,":ground_offset",-100),
        (assign,":only_spawn_on_terrain",1),
      (else_try),
        (eq,":prop_kind_id","spr_plank_destructible2"),#patch1115 55/5
        (assign,":rotate_90",1),
        (assign,":is_plank",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_fence1d"),
        (assign,":rotate_180",1),
      (try_end),

      (agent_get_position, pos49, ":user_agent"),
      (assign, ":instance_no",-1),
      (try_begin),
        (eq,":is_plank",0),
        (try_begin),
          (position_move_y, pos49, 110),
          (position_move_z, pos49, 90),
          (position_set_z_to_ground_level,pos49),
          
          (try_begin),
            (eq,":only_spawn_on_terrain",1),
            (position_get_distance_to_terrain,":distance",pos49),
            (gt,":distance",1),
            (assign,":is_ok",0),
          (else_try),
            (assign,":is_ok",1),
          (try_end),
          
          (eq,":is_ok",1),
          
          (try_begin),
            (eq,":rotate_90",1),
            (position_rotate_z, pos49, 90),
          (else_try),
            (eq,":rotate_180",1),
            (position_rotate_z, pos49, 180),
          (try_end),
          
          (init_position,pos37),
          (position_copy_origin,pos37,pos49),
          
          (position_set_z_to_ground_level,pos37),
          (call_script,"script_get_angle_of_ground_at_pos",0, ":prop_kind_id"),
          (assign,":x_rot",reg0),
          (assign,":y_rot",reg1),
          (try_begin), # if not too steep angle.
            (is_between,":x_rot",-45,46),
            (is_between,":y_rot",-45,46),
            (assign,":is_ok",1),
						(eq, ":screw_the_flu", 1),
						(agent_set_slot, ":user_agent", slot_agent_last_build_at, ":current_time"),
            # Pos49 is where we move this shit.
            (call_script, "script_find_or_create_scene_prop_instance", ":prop_kind_id", 0, 1, 0), # Auto rotate to ground
            (assign, ":instance_no", reg0),
            
            (try_begin),
              (neq,":ground_offset",0),
              
              (scene_prop_set_slot, ":instance_no", scene_prop_slot_ground_offset, ":ground_offset"),
              (prop_instance_get_position,pos49,":instance_no"),
              (position_move_z,pos49,":ground_offset"),
              (try_begin),
                (prop_instance_is_animating, ":animating", ":instance_no"),
                (eq,":animating",1),
                (prop_instance_stop_animating, ":instance_no"),
              (try_end),
              (prop_instance_set_position,":instance_no",pos49),
            (try_end),
          (else_try), # too steep angle.
            (assign,":is_ok",0),
          (try_end),
        (try_end),
        
      (else_try),# is plank.
        (position_set_z_to_ground_level,pos49),  #patch1115 fix 12/1
        (call_script,"script_get_prop_kind_size_and_shift",":prop_kind_id"),		
        (eq,reg0,1), # is_ok :)
        (assign,":wall_length",reg3),
        (assign,":is_ok",1),
        
        (copy_position,pos37,pos49),
        (try_begin),
          (eq,":rotate_90",1),
          (position_rotate_z, pos49, 90),
        (try_end),
        
        
        (call_script,"script_get_hightest_pos_and_angle_from_pos",":wall_length",0,1),
        (assign,":is_ok",reg0),

        (eq,":is_ok",1),
				(eq, ":screw_the_flu", 1),
			  (agent_set_slot, ":user_agent", slot_agent_last_build_at, ":current_time"),
        (copy_position,pos49,pos37),
        
        (try_begin),
          (eq,":rotate_90",1),
          (position_rotate_z, pos49, 90),
        (try_end),
        
        (store_div,":move",":wall_length",2),
        (position_move_x,pos49,":move"),
        
        # (assign,":wall_height",reg1),
        # (assign,":wall_width",reg2),
        #
        # (assign,":move_height_to_center",reg4),
        # (assign,":move_width_to_center",reg5),
        # (assign,":move_length_to_center",reg6),
        # (assign,":rotate_z_90",reg7), 
      
        # Pos49 is where we move this shit.
        (call_script, "script_find_or_create_scene_prop_instance", ":prop_kind_id", 0, 0, 0), # dont auto rotate to position.
        (assign, ":instance_no", reg0),
      (try_end),
      
      (eq,":is_ok",1),
      
      (try_begin),
        (prop_instance_is_valid,":instance_no"), #patch1115 18/9
        (scene_prop_set_slot, ":instance_no", scene_prop_slot_owner_team, ":player_team"),
        
        # init the new prop slots.
       # (call_script,"script_multiplayer_server_initialise_destructable_prop_slots",":instance_no",":prop_kind_id"),
      (try_end),
      
      # Set other item wielded..
      (try_begin),
        (eq,":prop_kind_id","spr_earthwork1_destructible"),
        (agent_has_item_equipped,":user_agent","itm_shovel"),
        (agent_set_wielded_item,":user_agent","itm_shovel"),     
      (else_try),
        (agent_get_wielded_item,":wielded_item",":user_agent",0), # Sapper...
        (is_between,":wielded_item","itm_construction_hammer","itm_shovel"), #Hammer
      (else_try),
        (assign,":end_cond","itm_items_end"),
        (try_for_range,":cur_item","itm_french_cav_pistol",":end_cond"),
          (agent_has_item_equipped,":user_agent",":cur_item"),
          (agent_set_wielded_item,":user_agent",":cur_item"),               
          (assign,":end_cond",0),
        (try_end),
      (try_end),
    (try_end),
    
    (assign,reg0,":is_ok"),
    (assign,reg1,":screw_the_flu"),
  ]),
  
  # script_multiplayer_server_initialise_destructable_prop_slots
  # Input: arg1 = agent arg2 = bomb_type
  # Output: none
  ("multiplayer_server_initialise_destructable_prop_slots",
  [
    (store_script_param_1, ":prop_instance_id"),
    (store_script_param_2, ":prop_kind_id"),
    
    (try_begin),
      (call_script,"script_get_prop_kind_size_and_shift",":prop_kind_id"),
      (eq,reg0,1), # is_ok :)
      (assign,":wall_height",reg1),
      (assign,":wall_width",reg2),
      (assign,":wall_length",reg3),
      (assign,":move_height_to_center",reg4),
      (assign,":move_width_to_center",reg5),
      (assign,":move_length_to_center",reg6),
      (assign,":rotate_z_90",reg7),
      (assign,":wall_height_offset",reg8),
      (assign,":wall_width_offset",reg9),
      (assign,":wall_length_offset",reg10),
      (assign,":inverse_width_movement",reg11),
      
      (call_script,"script_get_destruction_properties_of_object",":prop_kind_id"),
      (assign,":smoke_type",reg0),
      (assign,":smoke_type2",reg1),
      (assign,":particles_type",reg2),
      (assign,":smoke_strength",reg3),
      (assign,":sound_id",reg4),
      (assign,":pile_prop_begin",reg5),
      (assign,":pile_prop_end",reg6),
      
      (try_begin), # set size sluts.
        (call_script,"script_get_prop_scaled_size",":prop_instance_id"
          ,":wall_height", ":wall_width", ":wall_length"
          ,":wall_height_offset",":wall_width_offset",":wall_length_offset"),
        (eq,reg1,1), # is ok :)
        (assign,":cur_wall_height",reg2),
        (assign,":cur_wall_width",reg3),
        (assign,":cur_wall_length",reg4),
        (assign,":cur_max_wall_length",reg5),
        (assign,":cur_wall_height_offset",reg6),
        (assign,":cur_wall_width_offset",reg7),
        (assign,":cur_wall_length_offset",reg8),
        
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_height,":cur_wall_height"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_width,":cur_wall_width"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_length,":cur_wall_length"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_height_to_center,":move_height_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_width_to_center,":move_width_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_length_to_center,":move_length_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_rotate_z_90,":rotate_z_90"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_height_offset,":cur_wall_height_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_width_offset,":cur_wall_width_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_length_offset,":cur_wall_length_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_inverse_width_movement,":inverse_width_movement"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_max_length,":cur_max_wall_length"),
      (try_end),
      
      (try_begin), # store the hit effect properties.
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_smoke_type,":smoke_type"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_smoke_type2,":smoke_type2"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_particles_type,":particles_type"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_smoke_strength,":smoke_strength"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_sound_id,":sound_id"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_pile_prop_begin,":pile_prop_begin"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_pile_prop_end,":pile_prop_end"),
      (try_end),
      
      # predefine the future replacement props.
      (assign,":next_kind",":prop_kind_id"),
      (try_for_range,":cur_index",0,10), # 10 loops
        (try_begin),
          (gt,":next_kind",-1),
          (call_script,"script_get_next_destruction_stage_prop_kind",":next_kind"),
          (assign,":next_kind",reg1),
        (try_end),
        #(gt,":next_kind",-1),
        
        (store_add,":slot_index",":cur_index",scene_prop_slot_destruct_next_stage_1),
        (scene_prop_set_slot,":prop_instance_id",":slot_index",":next_kind"),
      (try_end),
    (try_end),
  
  ]),
  
  
  
  # script_multiplayer_server_place_bomb
  # Input: arg1 = agent arg2 = bomb_type
  # Output: none
  ("multiplayer_server_place_bomb",
  [
    (store_script_param_1, ":user_agent"),
    (store_script_param_2, ":bomb_type"),
    # construct_item_bomb_brit   = 1
    # construct_item_bomb_fren   = 2
    # construct_item_bomb_prus   = 3
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (set_fixed_point_multiplier, 100),
      
      (agent_is_active,":user_agent"),
      (agent_get_player_id, ":player_id", ":user_agent"),
      (player_is_active,":player_id"),
      (player_get_team_no, ":player_team", ":player_id"),
      
      (assign, ":bomb_prop", -1),
      (try_begin),
        (eq, ":bomb_type", construct_item_bomb_brit),
        (assign, ":bomb_prop", "spr_mm_brit_barrel_explosive"),
      (else_try),
        (eq, ":bomb_type", construct_item_bomb_fren),
        (assign, ":bomb_prop", "spr_mm_french_barrel_explosive"),
      (else_try),
        (eq, ":bomb_type", construct_item_bomb_prus),
        (assign, ":bomb_prop", "spr_mm_prus_barrel_explosive"),
      (try_end),
      
      (gt, ":bomb_prop", -1),
      
      (agent_get_position, pos1, ":user_agent"),
      (position_move_y, pos1, 100),
      #(position_rotate_z, pos1, 90),
      (set_spawn_position, pos1),
      
      (spawn_scene_prop, ":bomb_prop"),
      (assign, ":instance_no", reg0),
      (scene_prop_set_slot, ":instance_no", scene_prop_slot_in_use, 1),
      (scene_prop_set_slot, ":instance_no", scene_prop_slot_owner_team, ":player_team"),
      (scene_prop_set_slot, ":instance_no", scene_prop_slot_time_left, 10),
    (try_end),
  ]),
  
  # Vincenzo begin
  
  # script_multiplayer_server_hq_search_entrypoints_with_distance
  # Input: arg1 = flag
  # Input: arg2 = currentslot
  # Output: reg0 = number of added spawns
  ("multiplayer_server_hq_search_entrypoints_with_distance",
   [
     (store_script_param, ":current_slot", 1),
     (store_script_param, ":search_dist", 2),
     (assign, ":entry_point_count", 0),
     
     (set_fixed_point_multiplier, 100),
     
     (try_for_range, ":entry_point", 0, 64),
       (neg|entry_point_is_auto_generated,":entry_point"),
       (entry_point_get_position, pos1, ":entry_point"),
       (get_distance_between_positions,":dist",pos9,pos1),
       (lt,":dist",":search_dist"),
       (troop_set_slot, "trp_entrypoints_dummy", ":current_slot", ":entry_point"), # Store the entrypoint number in slot.
       (val_add,":current_slot",1),
       (val_add,":entry_point_count",1),
     (try_end),
     
     (assign, reg5, ":current_slot"),
     (assign, reg6, ":entry_point_count"),
   ]),
  
  # script_multiplayer_server_hq_get_entrypoints_for_flag
  # Input: arg1 = flag
  # Input: arg2 = currentslot
  # Input: pos62 = pos to search from if applicable
  # Output: reg0 = number of added spawns
  ("multiplayer_server_hq_get_entrypoints_for_flag",
   [
     (store_script_param, ":flag_id", 1),
     (store_script_param, ":current_slot", 2),
     (assign, ":old_slot", ":current_slot"),
     (assign, ":entry_point_count", 0),

     (try_begin),
       (multiplayer_is_server),
       
       (set_fixed_point_multiplier, 100),
       
       (try_begin),
         (gt,":flag_id",-1),
         (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_id"), 
         (prop_instance_get_position, pos9, ":pole_id"),
       (else_try),
         (copy_position,pos9,pos62),
       (try_end),
       
       (try_begin),
         (call_script, "script_multiplayer_server_hq_search_entrypoints_with_distance",":current_slot",2000), # 20 meters around flag 
         (assign, ":current_slot", reg5),
         (assign, ":entry_point_count", reg6),
         
         (le, ":entry_point_count", 1), # Not enough entry points found, search further.
         (assign, ":current_slot", ":old_slot"),
         (call_script, "script_multiplayer_server_hq_search_entrypoints_with_distance",":current_slot",4000), # 40 meters around flag 
         (assign, ":current_slot", reg5),
         (assign, ":entry_point_count", reg6),
         
         (le, ":entry_point_count", 2), # Still not enough?
         (assign, ":current_slot", ":old_slot"),
         (call_script, "script_multiplayer_server_hq_search_entrypoints_with_distance",":current_slot",8000), # 80 meters around flag..
         (assign, ":current_slot", reg5),
         (assign, ":entry_point_count", reg6),
       (try_end),
       
       # Get the entry points per flags stored.
       (try_begin),
         (gt,":flag_id",-1),
         (store_mul,":current_flag_slot",":flag_id",50), # each 50 slots containt entry points for a flag.
         
         #(store_sub,":real_count",":current_slot",":old_slot"),
         
         (troop_set_slot, "trp_entrypoints_per_flag_dummy", ":current_flag_slot", ":entry_point_count"), # save the count in slot 0
         (val_add,":current_flag_slot",1),
        
         (try_for_range, ":cur_slot", ":old_slot", ":current_slot"),
           (troop_get_slot, ":cur_entry", "trp_entrypoints_dummy", ":cur_slot"),
          
           (troop_set_slot,"trp_entrypoints_per_flag_dummy",":current_flag_slot",":cur_entry"),
           (val_add,":current_flag_slot",1),
         (try_end),
       (try_end),
    (try_end),
    
    (assign, reg0, ":current_slot"),
    (assign, reg1, ":entry_point_count"),
   ]),   
   
  # script_multiplayer_generate_weather
  ("multiplayer_generate_weather",
   [
     (store_current_scene,":current_scene"),
     
     # Default vals
     (assign,":time_of_day",15),
     (assign, ":rain_type", 0), # 0 = nothing 1 = rain 2 = snow
     (assign, ":rain_amount", 0), # 0-250
     (assign,"$g_scene_water_level",-40),
     (assign, ":cloud_amount", 30), # 0-100
     (assign, "$g_fog_distance", -1), # meters where fog ends visibility
     (assign, ":thunder_type", 0), # 0 = none 1 = thunder only 2 = thunder and lighting
     (assign, ":thunder_strength", 0), # 0-100
     (assign, ":flora_wind_strength", 14), # 0-100
     (assign, ":water_wind_strength", 14), # 0-100
     #(assign, "$g_fog_color", 0xFF736252),
     #(assign, "$g_fog_color", 0x0000FF),
     (assign, "$g_fog_colour", 0xBFBFBF),
     #(assign, "$g_fog_colour", 0xFF736252),

     
     # What to do with each scene?
     (try_begin),
       (this_or_next|eq,":current_scene","scn_random_multi_plain_medium_rain"),
       (this_or_next|eq,":current_scene","scn_random_multi_plain_large_rain"),
       (this_or_next|eq,":current_scene","scn_random_multi_forest_medium_rain"),
       (eq,":current_scene","scn_random_multi_forest_large_rain"),
       (assign, ":rain_type", 1),
       (assign,":rain_amount",200),
       (assign,":cloud_amount",100),
       (assign,"$g_scene_water_level",0),
     (else_try),
       (this_or_next|eq,":current_scene","scn_random_multi_snow_medium_snow"),
       (this_or_next|eq,":current_scene","scn_random_multi_snow_large_snow"),
       (this_or_next|eq,":current_scene","scn_random_multi_snow_forest_medium_snow"),
       (eq,":current_scene","scn_random_multi_snow_forest_large_snow"),
       (assign, ":rain_type", 2),
       (assign,":rain_amount",100),
       (assign,":cloud_amount",100),
       (assign, "$g_fog_distance", 200),
     (else_try),
       (this_or_next|eq,":current_scene","scn_random_multi_desert_medium"),
       (this_or_next|eq,":current_scene","scn_random_multi_desert_large"),
       (this_or_next|eq,":current_scene","scn_random_multi_desert_forest_medium"),
       (eq,":current_scene","scn_random_multi_desert_forest_large"),
       (assign,":cloud_amount",0),
     (try_end),
     
      # set weather by scene props.
     
      # time_of_day
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_time", somt_object),
        (prop_instance_get_variation_id, ":time_of_day", ":instance_id"),
      (try_end),
      
      # rain_type, rain_amount
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_rain", somt_object),
        (prop_instance_get_variation_id, ":rain_type", ":instance_id"),
        (prop_instance_get_variation_id_2, ":rain_amount", ":instance_id"),
        (val_mul,":rain_amount",10),
      (try_end),
     
      # cloud_amount
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_clouds", somt_object),
        (prop_instance_get_variation_id, ":cloud_amount", ":instance_id"),
      (try_end),
      
      # fog_distance
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_fog", somt_object),
        (prop_instance_get_variation_id, "$g_fog_distance", ":instance_id"),
        (val_mul,"$g_fog_distance",10),
      (try_end),
     
      # thunder_type, thunder_strength
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_thunder", somt_object),
        (prop_instance_get_variation_id, ":thunder_type", ":instance_id"),
        (prop_instance_get_variation_id_2, ":thunder_strength", ":instance_id"),
        
        (eq,":thunder_type",2),
        (eq,"$g_fog_distance",-1),
        (assign, "$g_fog_distance", 900),
      (try_end),
      
      # mm_weather_wind
      (try_for_prop_instances, ":instance_id", "spr_mm_weather_wind", somt_object),
        (prop_instance_get_variation_id, ":flora_wind_strength", ":instance_id"),
        (prop_instance_get_variation_id_2, ":water_wind_strength", ":instance_id"),
      (try_end),
      
     # snowy ground.
     (scene_prop_get_num_instances, ":snowy_ground_prop_count", "spr_mm_snowy_ground"),
     (try_begin),
       (this_or_next|gt,":snowy_ground_prop_count",0),
       (this_or_next|eq,":rain_type",2), # snowing.
       
       (this_or_next|eq,":current_scene","scn_mp_european_city_winter"),
       (is_between,":current_scene","scn_random_multi_snow_medium","scn_random_multi_desert_medium"),
       
       (assign,"$g_scene_has_snowy_ground",1),
     (else_try),
       (assign,"$g_scene_has_snowy_ground",0),
     (try_end),
     
     # assigning fog colour according to time of day
     (try_begin),
       (this_or_next|is_between,":time_of_day",6,9),  #morning
       (is_between,":time_of_day",17,21),             #evening
       (assign,"$g_fog_colour",0xEDE3D6),
     (else_try),
       (is_between,":time_of_day",9,17),              #day
       (assign,"$g_fog_colour",0xFBFBFB),
     (else_try),
       (this_or_next|is_between,":time_of_day",0,6),  #night
       (is_between,":time_of_day",21,24),
       (scene_set_day_time, 1),
       (assign,"$g_fog_colour",0xBFBFBF),
     (try_end),
     
     # change fog color with props.
     (try_begin),
       (scene_prop_get_num_instances, ":color_red_prop_count", "spr_mm_weather_fog_color_red"),
       (scene_prop_get_num_instances, ":color_green_prop_count", "spr_mm_weather_fog_color_green"),
       (scene_prop_get_num_instances, ":color_blue_prop_count", "spr_mm_weather_fog_color_blue"),
       (gt,":color_red_prop_count",0),
       (gt,":color_green_prop_count",0),
       (gt,":color_blue_prop_count",0),
       
       #get red value
       (assign,":red_value"),
       (try_for_prop_instances, ":instance_id", "spr_mm_weather_fog_color_red", somt_object),
         (prop_instance_get_variation_id, ":color_red1", ":instance_id"),
         (prop_instance_get_variation_id_2, ":color_red2", ":instance_id"),
         (store_add,":red_value",":color_red1",":color_red2"),
       (try_end),
       
       #get green value
       (assign,":green_value"),
       (try_for_prop_instances, ":instance_id", "spr_mm_weather_fog_color_green", somt_object),
         (prop_instance_get_variation_id, ":color_green1", ":instance_id"),
         (prop_instance_get_variation_id_2, ":color_green2", ":instance_id"),
         (store_add,":green_value",":color_green1",":color_green2"),
       (try_end),
       
       #get blue value
       (assign,":blue_value"),
       (try_for_prop_instances, ":instance_id", "spr_mm_weather_fog_color_blue", somt_object),
         (prop_instance_get_variation_id, ":color_blue1", ":instance_id"),
         (prop_instance_get_variation_id_2, ":color_blue2", ":instance_id"),
         (store_add,":blue_value",":color_blue1",":color_blue2"),
       (try_end),
       
       (assign,":result_value",":red_value"),
       (val_lshift,":result_value",8), # shift 8 bits to make room for green value
       (val_add,":result_value",":green_value"),
       (val_lshift,":result_value",8), # shift 8 bits to make room for blue value
       (val_add,":result_value",":blue_value"),
       
       (assign,"$g_fog_colour",":result_value"),
     (try_end),
     
     (scene_set_day_time,":time_of_day"),
     (try_begin),
       (gt,":rain_type",0),
       (set_rain, ":rain_type", ":rain_amount"),
       (assign,"$g_rain_type",":rain_type"),
       (assign,"$g_rain_amount",":rain_amount"),
     (else_try),
       (assign,"$g_rain_type",0),
       (assign,"$g_rain_amount",0),
     (try_end),
     (set_global_cloud_amount, ":cloud_amount"),
     #(set_global_haze_amount, "$g_fog_distance"),
    # (try_begin),
      # (gt, "$g_fog_distance", 0),
       (set_fog_distance, "$g_fog_distance", "$g_fog_colour"),  
   #  (try_end),     
     (assign,"$g_thunder_type",":thunder_type"),
     (try_begin),
       (gt, ":thunder_type", 0),
       (assign,"$g_thunder_strength",":thunder_strength"),  
     (try_end),
     
     
     (set_fixed_point_multiplier,100),
     (set_shader_param_float, "@vFloraWindStrength", ":flora_wind_strength"),
     (set_shader_param_float, "@vWaterWindStrength", ":water_wind_strength"),
     
     # (assign,reg0,":time_of_day"),
     # (display_message,"@Time of day: {reg0}"),
     # (assign,reg0,":rain_type"),
     # (display_message,"@Rain type: {reg0}"),
     # (assign,reg0,":rain_amount"),
     # (display_message,"@Rain amount: {reg0}"),
     # (assign,reg0,":cloud_amount"),
     # (display_message,"@Cloud amount: {reg0}"),
     # (assign,reg0,"$g_fog_distance"),
     # (display_message,"@Fog distance: {reg0}"),
     # (assign,reg0,":thunder_type"),
     # (display_message,"@Thunder type: {reg0}"),
     # (assign,reg0,":thunder_strength"),
     # (display_message,"@Thunder strength: {reg0}"),
   ]),   
   
   
  # script_move_object_type_to_origional_position
  # Input: arg1 = scene_prop_no
  # Output: 
  ("move_object_type_to_origional_position",
   [
     (store_script_param, ":scene_prop_no", 1),
     
     (try_begin),
       (this_or_next|multiplayer_is_server),
       (neg|game_in_multiplayer_mode),
       
       (gt,":scene_prop_no",-1),
       
       (try_for_prop_instances, ":cur_instance_id", ":scene_prop_no"),
         (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
         (prop_instance_get_position, pos22, ":cur_instance_id"),
         (get_distance_between_positions,":dist",pos21,pos22),
         (gt,":dist",0),
         (copy_position,pos57,pos21),
         (call_script, "script_prop_instance_animate_to_position_with_childs", ":cur_instance_id", 0,0,0),
       (try_end),
     (try_end),
   ]),  
  
  # script_multiplayer_server_play_sound_at_position
  # Input: arg1 = sound_id
  # Input: pos56 = position
  # Output: reg0 = ok?
  ("multiplayer_server_play_sound_at_position",
   [
     (store_script_param, ":sound_id", 1),
     
     (assign,reg0,0),
     (try_begin),
       (this_or_next|multiplayer_is_server),
       (neg|game_in_multiplayer_mode),
       
       (is_between,":sound_id","snd_click","snd_sounds_end"), # valid sound
       
       (try_begin),
         (neg|multiplayer_is_dedicated_server),
         (play_sound_at_position, ":sound_id", pos56),
       (try_end),
       
       (try_begin),
         (game_in_multiplayer_mode),
         
         (set_fixed_point_multiplier, 100),
         (position_get_x,":xvalue", pos56),
         (position_get_y,":yvalue", pos56),
         (position_get_z,":zvalue", pos56),
         
         # sound id is max 477, so no problem.
         # max pos in y and x is 1250 meters soo 125000 cm, that can fit in 17 bits (130943) its only positive
         # max pos in z is ?? it can be neg. 14 bits left,.. tight :D 
         
         #pack soundid with posx
         #z with posy
         # add 2500 to the z to support up to -25.00 meters to + 138.83 meters.
         (val_add,":zvalue",2500),
         
         #define max value for the scales...
         (val_clamp,":xvalue",0,130943),
         (val_clamp,":yvalue",0,130943),
         (val_clamp,":zvalue",0,16383),
        
         # pack the shit.
         (assign,":sendvar1",":sound_id"),
         (val_lshift, ":sendvar1", 17), 
         (val_add,":sendvar1",":xvalue"),
         (assign,":sendvar2",":zvalue"),
         (val_lshift, ":sendvar2", 17), 
         (val_add,":sendvar2",":yvalue"),
         
         (try_for_players, ":cur_player", 1),
           (player_is_active,":cur_player"),
           
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_sound_at_pos,":sendvar1",":sendvar2"),
         (try_end),
       (try_end),
       (assign,reg0,1),
     (try_end),
   ]), 
  
  # script_multiplayer_server_scale_prop_instance
  # Input: arg1 = prop_instance
  #        arg2 = x_scale
  #        arg3 = y_scale
  #        arg4 = z_scale
  ("multiplayer_server_scale_prop_instance",
   [
     (store_script_param, ":prop_instance", 1),
     (store_script_param, ":x_scale", 2),
     (store_script_param, ":y_scale", 3),
     (store_script_param, ":z_scale", 4),
    
     (try_begin),
       (this_or_next|multiplayer_is_server),
       (neg|game_in_multiplayer_mode),
       
	     (prop_instance_is_valid, ":prop_instance"),
       # at least 1 above 0?
       (this_or_next|gt,":x_scale",0),
       (this_or_next|gt,":y_scale",0),
       (gt,":z_scale",0),
	   
       (scene_prop_get_slot,":cur_x_scale",":prop_instance",scene_prop_slot_x_scale),
       (scene_prop_get_slot,":cur_y_scale",":prop_instance",scene_prop_slot_y_scale),
       (scene_prop_get_slot,":cur_z_scale",":prop_instance",scene_prop_slot_z_scale),
       
       (this_or_next|neq,":cur_x_scale",":x_scale"),
       (this_or_next|neq,":cur_y_scale",":y_scale"),
       (neq,":cur_z_scale",":z_scale"),
       
       (set_fixed_point_multiplier,1000),
       (prop_instance_set_scale, ":prop_instance", ":x_scale", ":y_scale", ":z_scale"),
       (set_fixed_point_multiplier,100),
       (scene_prop_set_slot,":prop_instance",scene_prop_slot_x_scale,":x_scale"),
       (scene_prop_set_slot,":prop_instance",scene_prop_slot_y_scale,":y_scale"),
       (scene_prop_set_slot,":prop_instance",scene_prop_slot_z_scale,":z_scale"),
       (scene_prop_set_slot,":prop_instance",scene_prop_slot_is_scaled,1),
       
       (try_begin),
         (game_in_multiplayer_mode),
         
         # add 5000 to the values to support up to -5times scale and + 60 or 27 whatever.
         (val_add,":x_scale",5000),
         (val_add,":y_scale",5000),
         (val_add,":z_scale",5000),
         
         #define max value for the scales...
         (val_clamp,":x_scale",0,65535),
         (val_clamp,":y_scale",0,65535),
         (val_clamp,":z_scale",0,32767),
        
         # pack the shit.
         (assign,":sendvar1",":prop_instance"),
         (val_lshift, ":sendvar1", 16), 
         (val_add,":sendvar1",":x_scale"),
         (assign,":sendvar2",":z_scale"),
         (val_lshift, ":sendvar2", 16), 
         (val_add,":sendvar2",":y_scale"),
         
         # and send it off.
         (try_for_players, ":cur_player", 1),
           (player_is_active,":cur_player"),
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_scale_object,":sendvar1",":sendvar2"),
         (try_end),
       (try_end),
     (try_end),
   ]),
  
  # script_multiplayer_server_check_if_can_use_button
  # Input: arg1 = agent_id
  # Input: arg2 = prop_instance_id
  # Output: reg0 = 1 if it is,
  ("multiplayer_server_check_if_can_use_button",
   [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":instance_id", 2),
    
    
    (assign,":is_ok",0),
    (assign,":error_message",-1),
    (try_begin),
      (agent_is_active,":agent_id"), # we have a agent.
      (prop_instance_is_valid, ":instance_id"),
      
      #(agent_get_player_id, ":player_id", ":agent_id"),
      #(gt, ":player_id", -1), # we have a player.
      #(player_get_troop_id, ":player_troop", ":player_id"),
      (agent_get_troop_id, ":agent_troop", ":agent_id"),
      (troop_get_slot,":player_troop_class",":agent_troop",slot_troop_class),

      (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
      (is_between, ":scene_prop_id", mm_button_types_begin, mm_button_types_end),
      
      (assign, ":ok_parent", 1),
      (assign, ":cannon_instance", 0),
      (try_begin),
        (is_between, ":scene_prop_id", mm_cannon_button_types_begin, mm_cannon_button_types_end),
        
        (assign, ":ok_parent", 0),
        
        (call_script,"script_cannon_child_find_cannon_instance",":instance_id"),
        (assign,":cannon_instance",reg0),
        
        #(gt,":cannon_instance",-1),
        (prop_instance_is_valid,":cannon_instance"), #patch1115 fix 18/10
        (assign, ":ok_parent", 1),
        
        (prop_instance_get_scene_prop_kind, ":cannon_kind", ":cannon_instance"),
        (try_begin),
          (is_between,":cannon_kind","spr_mm_cannon_12pdr_wood","spr_mm_cannon_rocket_wood"),
          (assign, reg50, 0),
          (lua_push_int, ":agent_id"),
          (lua_call, "@isVip", 1),
          (this_or_next|eq, reg50, 1),
          (neq, ":player_troop_class", multi_troop_class_mm_artillery),
          (assign,":error_message", "str_cannot_use_cannon"),
        (else_try),
          (eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
          (assign, reg50, 0),
          (lua_push_int, ":agent_id"),
          (lua_call, "@isVip", 1),
          (this_or_next|eq, reg50, 1),
          (neq, ":player_troop_class", multi_troop_class_mm_rocket),
          (this_or_next|eq, reg50, 1),
          (neq, ":agent_troop", "trp_player"),
          (assign,":error_message", "str_cannot_use_rocket"),
        (try_end),
      (try_end),
      (eq, ":ok_parent", 1),
      
      (try_begin),
        (this_or_next|is_between,"spr_mm_cannon_12pdr_limber","spr_mm_pickup_rocket_button"),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_round_button"),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_shell_button"),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_canister_button"),
        (eq, ":scene_prop_id", "spr_mm_bomb_button"),
        
        (assign, reg50, 0),
        (lua_push_int, ":agent_id"),
        (lua_call, "@isVip", 1),
        (this_or_next|eq, reg50, 1),
        (neq, ":player_troop_class", multi_troop_class_mm_artillery),
        (assign,":error_message", "str_cannot_use_cannon"),
      (else_try),
        (eq, ":scene_prop_id", "spr_mm_pickup_rocket_button"),
        
        (assign, reg50, 0),
        (lua_push_int, ":agent_id"),
        (lua_call, "@isVip", 1),
        (this_or_next|eq, reg50, 1),
        (neq, ":player_troop_class", multi_troop_class_mm_rocket),
        (this_or_next|eq, reg50, 1),
        (neq, ":agent_troop", "trp_player"),
        (assign,":error_message", "str_cannot_use_rocket"),
      (try_end),
      
      (eq,":error_message", -1), # break now already!
      
      (try_begin),
        (eq, ":scene_prop_id", "spr_mm_limber_button"),
        (try_begin),
          (prop_instance_get_position, pos4, ":instance_id"), # button pos
          
          (assign,":found_limber",0),
          (try_for_prop_instances, ":cur_instance_id", "spr_mm_limber_wood", somt_temporary_object),
            (eq,":found_limber",0),
           
            (prop_instance_get_position, pos5, ":cur_instance_id"),
            (position_move_y,pos5,-220),
            (get_distance_between_positions, ":distance_cannon_agent", pos4, pos5),
            (le, ":distance_cannon_agent", 200),
            
            (scene_prop_get_slot,":found_cannon_instance",":cur_instance_id",scene_prop_slot_child_prop2),
            (try_begin),
              #(gt,":found_cannon_instance",-1), #patch1115 fix 5/7
              (prop_instance_is_valid,":found_cannon_instance"), #patch1115 18/22
              (assign,":error_message", "str_horse_already_has_cannon"),
            (else_try),
              (assign,":error_message",-1),
            (try_end),
            
            (assign,":found_limber",1),
          (try_end),
          
          (eq,":found_limber",0),
          (assign,":error_message", "str_need_to_have_a_horse"),
        (try_end),
      (else_try),
        (is_between,":scene_prop_id","spr_mm_load_cartridge_button","spr_mm_reload_button"), 
        (try_begin),
          (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_has_ball, 1),
          (assign,":error_message", "str_cannon_already_has_ball"),
        (else_try),
          (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
          (try_begin),
            (neq, ":wielded_item", "itm_cannon_cartridge_round"),
            (neq, ":wielded_item", "itm_cannon_cartridge_shell"),
            (neq, ":wielded_item", "itm_cannon_cartridge_canister"),
            (neq, ":wielded_item", "itm_cannon_cartridge_bomb"),
            (neq, ":wielded_item", "itm_rockets"),
            (try_begin),
              (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_round"),
              (agent_set_wielded_item,":agent_id","itm_cannon_cartridge_round"),
              (assign,":wielded_item","itm_cannon_cartridge_round"),
            (else_try),
              (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_shell"),
              (agent_set_wielded_item,":agent_id","itm_cannon_cartridge_shell"),
              (assign,":wielded_item","itm_cannon_cartridge_shell"),
            (else_try),
              (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_canister"),
              (agent_set_wielded_item,":agent_id","itm_cannon_cartridge_canister"),
              (assign,":wielded_item","itm_cannon_cartridge_canister"),
            (else_try),
              (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_bomb"),
              (agent_set_wielded_item,":agent_id","itm_cannon_cartridge_bomb"),
              (assign,":wielded_item","itm_cannon_cartridge_bomb"),
            (else_try),
              (agent_has_item_equipped,":agent_id","itm_rockets"),
              (agent_set_wielded_item,":agent_id","itm_rockets"),
              (assign,":wielded_item","itm_rockets"),
            (else_try),
              (assign,":error_message", "str_need_to_have_a_ball"),
            (try_end),
          (try_end),
          (eq,":error_message",-1), # we have no error getting a cartridge :)
          
          (assign,":ok_combination",1),
          (try_begin),
            (eq, ":wielded_item", "itm_cannon_cartridge_round"),
            
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
            (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
            
            (assign,":ok_combination",0),
          (else_try),
            (eq, ":wielded_item", "itm_cannon_cartridge_shell"),
            
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_12pdr_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_naval_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_carronade_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
            (eq,":cannon_kind","spr_mm_cannon_swievel_wood"),
            
            (assign,":ok_combination",0),
          (else_try),
            (eq, ":wielded_item", "itm_cannon_cartridge_canister"),
            
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
            (eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
            
            (assign,":ok_combination",0),
          (else_try),
            (eq, ":wielded_item", "itm_cannon_cartridge_bomb"),
            
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_12pdr_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_fort_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_naval_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_carronade_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
            (eq,":cannon_kind","spr_mm_cannon_swievel_wood"),
            
            (assign,":ok_combination",0),
          (else_try),
            (eq, ":wielded_item", "itm_rockets"),
            
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_12pdr_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_fort_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_naval_wood"),
            (this_or_next|eq,":cannon_kind","spr_mm_cannon_carronade_wood"),
            (eq,":cannon_kind","spr_mm_cannon_swievel_wood"),
            
            (assign,":ok_combination",0),
          (try_end),

          (eq,":ok_combination",0),
          
          (assign,":error_message", "str_cannon_cannot_load_type"),
        (try_end),
      (else_try),
        (eq, ":scene_prop_id", "spr_mm_reload_button"),
        (try_begin),
          (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_is_loaded, 1),
          (assign,":error_message", "str_cannon_already_loaded"),
        (else_try),
          (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
          (neq, ":wielded_item", "itm_ramrod"),
          (try_begin),
            (agent_has_item_equipped,":agent_id","itm_ramrod"),
            (agent_set_wielded_item,":agent_id","itm_ramrod"),
          (else_try),
            (assign,":error_message", "str_need_to_have_a_ramrod"),
          (try_end),
        (try_end),
      (else_try),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_round_button"),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_shell_button"),
        (this_or_next|eq, ":scene_prop_id", "spr_mm_canister_button"),
        (eq, ":scene_prop_id", "spr_mm_bomb_button"),
        
        (assign,":empty_slot_found",0),
        (try_for_range,":equipment_slot",ek_item_0,ek_head),
          (eq,":empty_slot_found",0),
          (agent_get_item_slot, ":item_id", ":agent_id", ":equipment_slot"),
          
          (try_begin), # If we have no "Empty" slots, check the items for ammo count if applicable.
            (eq,":item_id",-1),
            (assign,":empty_slot_found",1),
          (else_try),
            (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
            (this_or_next|eq,":item_class",multi_item_class_type_bullet),
            (eq,":item_class",multi_item_class_type_misc),
            
            (agent_get_ammo_for_slot, ":ammo_count", ":agent_id", ":equipment_slot"),
            (eq,":ammo_count",0),
            (val_add,":equipment_slot",1),
            #(agent_unequip_item, ":agent_id", ":item_id", ":equipment_slot"),
            (assign,":empty_slot_found",1),
          (try_end),
        (try_end),
          
        (eq,":empty_slot_found",0),
        (assign,":error_message", "str_cannot_carry_more_cannon_ammo"),
      (else_try),
        (eq, ":scene_prop_id", "spr_mm_aim_button"),
        (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
        (neq, ":wielded_item", "itm_cannon_lighter"),
        (try_begin),
          (agent_has_item_equipped,":agent_id","itm_cannon_lighter"),
          (agent_set_wielded_item,":agent_id","itm_cannon_lighter"),
        (else_try),
          # dont need lighter in commander battle.
          (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
          (game_in_multiplayer_mode),
          (assign,":error_message", "str_need_to_have_a_lighter"),
        (else_try),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),#hotfix
					(try_begin),
						(agent_has_item_equipped,":agent_id","itm_spyglass"),
						(agent_set_wielded_item,":agent_id","itm_spyglass"),	
					(else_try),
						(agent_set_wielded_item,":agent_id",-1),  
					(try_end),
        (try_end),
      (try_end),

      (eq,":error_message", -1),
      (assign, ":is_ok", 1),
    (try_end),
    
    (try_begin),
      (neq,":error_message", -1), # we have a error
      (try_begin),
        (game_in_multiplayer_mode),
        (agent_get_player_id, ":player_id", ":agent_id"),
        (player_is_active,":player_id"), # we have a player.
        (multiplayer_send_2_int_to_player, ":player_id", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, ":error_message"),
      (else_try),
        (str_store_string,s4,":error_message"),
        (display_message,s4),
      (try_end),
    (try_end),
    
    (assign, reg0, ":is_ok"),
  ]), 
  
  # script_find_or_create_scene_prop_instance
  # Input: arg1 = prop_kind_id
  # Input: arg2 = always_spawn_new
  # Input: arg3 = align_to_ground
  # input: arg4 = non_default_scale
  # input: arg5 = scale_x
  # input: arg6 = scale_y
  # input: arg7 = scale_z
  # Input: pos49 = pos of prop.
  # Output: reg0 = prop_instance_id
  ("find_or_create_scene_prop_instance",
   [
    (store_script_param, ":prop_kind_id", 1),
    (store_script_param, ":always_spawn_new", 2),
    (store_script_param, ":align_to_ground", 3),
    (store_script_param, ":non_default_scale", 4),
     
    (assign,":instance_id",-1),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (try_begin),
        (eq,":align_to_ground",1),
        (init_position,pos37),
        (position_copy_origin,pos37,pos49),
        (position_get_rotation_around_z,":z_rot",pos49),
        
        (position_set_z_to_ground_level,pos37),
        (call_script,"script_get_angle_of_ground_at_pos", 0, ":prop_kind_id"),
        (assign,":x_rot",reg0),
        (assign,":y_rot",reg1),
        (position_rotate_y,pos37,":y_rot"),
        (position_rotate_x,pos37,":x_rot"),
        (position_rotate_z,pos37,":z_rot"),
        
        (copy_position,pos49,pos37),
      (try_end),
      
      (assign,":spawn_new",1),
      (try_begin),
        (neq,":always_spawn_new",1),
        
        (assign,":keep_looping",1),
        (try_for_prop_instances, ":loop_instance_id", ":prop_kind_id", somt_temporary_object),
          (eq,":keep_looping",1),
          (scene_prop_slot_eq,":loop_instance_id",scene_prop_slot_is_spawned,1),
          (scene_prop_slot_eq,":loop_instance_id",scene_prop_slot_in_use,0),
          
          (assign,":instance_id",":loop_instance_id"),
          
          # First set position then animate, needed for bumping agent problems if moved from the side.
          (try_begin),
            (prop_instance_is_animating, ":animating", ":instance_id"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":instance_id"),
          (try_end),
          (prop_instance_set_position,":instance_id",pos49),
          
          # Scale found prop to default (will be auto ignored if prop already correct size.)
          (try_begin),
            (eq,":non_default_scale",0),
            (call_script, "script_multiplayer_server_scale_prop_instance", ":instance_id",1000,1000,1000),
          (else_try),
            (store_script_param, ":scale_x", 5),
            (store_script_param, ":scale_y", 6),
            (store_script_param, ":scale_z", 7),
            (call_script, "script_multiplayer_server_scale_prop_instance", ":instance_id",":scale_x",":scale_y",":scale_z"),
          (try_end),
          
          (assign,":spawn_new",0),
          (assign,":keep_looping",0),
        (try_end),
      (try_end),
      
      (try_begin),
        (eq,":spawn_new",1),
        (set_spawn_position,pos49),
        (spawn_scene_prop,":prop_kind_id"),
        (assign,":instance_id",reg0),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_is_spawned,1),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_x_scale,1000),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_y_scale,1000),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_z_scale,1000),
        
        (neq,":non_default_scale",0),
        
        (store_script_param, ":scale_x", 5),
        (store_script_param, ":scale_y", 6),
        (store_script_param, ":scale_z", 7),
        (call_script, "script_multiplayer_server_scale_prop_instance", ":instance_id",":scale_x",":scale_y",":scale_z"),
      (try_end),
      
      #(gt,":instance_id",-1),
      (prop_instance_is_valid,":instance_id"), #patch1115 18/11
      # Init the slots.
      (call_script,"script_reset_prop_slots",":instance_id"),
      
      (scene_prop_set_slot,":instance_id",scene_prop_slot_in_use,1),
      
      (store_mission_timer_a,":cur_time"),
      (scene_prop_set_slot,":instance_id",scene_prop_slot_spawned_at,":cur_time"),
      
      # Set prop healths
      (try_begin),
        (this_or_next|is_between, ":prop_kind_id", mm_destructible_props_begin, mm_destructible_props_end),
        (this_or_next|is_between,":prop_kind_id","spr_mm_window1_poor","spr_mm_window1d_poor"),
        (this_or_next|is_between,":prop_kind_id","spr_mm_window3_poor","spr_mm_window3d_poor"),
        (is_between,":prop_kind_id","spr_mm_palisadedd","spr_crate_explosive"), # a construction object
        
        (call_script,"script_get_default_health_for_prop_kind",":prop_kind_id"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        
        (gt,":max_health",0),
        
        (scene_prop_get_hit_points, ":cur_hit_points", ":instance_id"),
        (scene_prop_get_slot,":cur_health",":instance_id",scene_prop_slot_health),
        
        (this_or_next|neq,":cur_hit_points",":health"),  # this prop needs some health updates :3
        (neq,":cur_health",":health"),  
        
        (scene_prop_set_slot,":instance_id",scene_prop_slot_health,":health"),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_max_health,":max_health"),
        (prop_instance_enable_physics, ":instance_id", 1), # this is needed to reset the colision mesh on the prop if it is destroyed.
        (scene_prop_set_hit_points, ":instance_id", ":max_health"),
        (scene_prop_set_cur_hit_points, ":instance_id", ":health"),
        
        # On prop spawn set the health for clients
        (try_begin),
          (game_in_multiplayer_mode),
          
          #store destroyed yes no in a bit.
          (assign,":packed_value",":instance_id"),
          (val_lshift,":packed_value",1),
          
          (try_for_players, ":player_no", 1),
            (player_is_active, ":player_no"),
            (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_destructible_prop_spawn_or_destroy, ":packed_value"),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
    
    (assign, reg0, ":instance_id"),
   ]),
   
  # script_clean_up_prop_instance
  # Input: arg1 = prop_instance_id
  # Output: reg0 = 1 means ok.
  ("clean_up_prop_instance",
   [
    (store_script_param, ":prop_instance_id", 1),
    
    (assign, reg0, 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid,":prop_instance_id"),
      
      (set_fixed_point_multiplier, 100),
      
      (try_begin),
        (prop_instance_get_position,pos27,":prop_instance_id"),
        (position_get_rotation_around_z,":z_rot",pos27),
        (init_position,pos29),
        (position_copy_origin,pos29,pos27),
        (position_rotate_z,pos29,":z_rot"),
        
        (position_set_z,pos29,-3000),
        
        (get_distance_between_positions,":dist",pos27,pos29),
        (gt,":dist",0),
        
        (try_begin),
          (prop_instance_is_animating, ":animating", ":prop_instance_id"),
          (eq,":animating",1),
          (prop_instance_stop_animating, ":prop_instance_id"),
        (try_end),
        (prop_instance_set_position,":prop_instance_id",pos29),
      (try_end),
      
      (call_script,"script_multiplayer_handle_prop_effect",":prop_instance_id",prop_effect_type_stop_all, 0, prop_effect_handle_stop),
      
      
      (call_script,"script_reset_prop_slots",":prop_instance_id"),
      
      (assign, reg0, 1),
    (try_end),
   ]),
  
  # script_clean_up_prop_instance_with_childs
  # Input: arg1 = prop_instance_id
  # Output: reg0 = 1 means ok.
  ("clean_up_prop_instance_with_childs",
   [
    (store_script_param, ":prop_instance_id", 1),
    
    (assign, reg0, 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid,":prop_instance_id"),
      
      (try_for_range,":cur_slot",scene_prop_slot_child_prop1,scene_prop_slots_end),
        (scene_prop_get_slot,":cur_child",":prop_instance_id",":cur_slot"),
        #(gt,":cur_child",-1), # has Child.   #patch1115 fix 5/8
        (prop_instance_is_valid,":cur_child"), #patch1115 fix 18/12
        
        (call_script, "script_clean_up_prop_child_with_childs", ":cur_child"),
      (try_end),
      
      (call_script, "script_clean_up_prop_instance", ":prop_instance_id"),
      (assign, reg0, 1),
    (try_end),
   ]),
   
  # script_clean_up_prop_child_with_childs
  # Input: arg1 = prop_instance_id
  # Output: reg0 = 1 means ok.
  ("clean_up_prop_child_with_childs",
   [
    (store_script_param, ":prop_instance_id", 1),
    
    (assign, reg0, 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid,":prop_instance_id"),
      
      (try_for_range,":cur_slot",scene_prop_slot_child_prop1,scene_prop_slots_end),
        (scene_prop_get_slot,":cur_child",":prop_instance_id",":cur_slot"),
        #(gt,":cur_child",-1), # has Child. #PATCH1115 fix 5/9
        (prop_instance_is_valid,":cur_child"), #patch1115 fix 18/13
        (call_script, "script_clean_up_prop_instance", ":cur_child"),
      (try_end),
      
      (call_script, "script_clean_up_prop_instance", ":prop_instance_id"),
      (assign, reg0, 1),
    (try_end),
   ]),
   
  # script_prop_instance_animate_to_position_with_childs
  # Input: arg1 = prop_instance_id
  # Input: arg2 = duration in ms
  # Input: arg3 = ignore_prop_instance
  # Input: arg4 = ignore_prop_instance2
  # Input: pos57 = position to animate to.
  # Output: 
  ("prop_instance_animate_to_position_with_childs",
   [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":duration", 2),
    (store_script_param, ":ignored_prop_instance", 3),
    (store_script_param, ":ignored_prop_instance2", 4),
    
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      
      (set_fixed_point_multiplier, 100),
      
      (try_begin),
        (neq,":prop_instance_id",":ignored_prop_instance"),
        (neq,":prop_instance_id",":ignored_prop_instance2"),
        (neg|scene_prop_slot_eq,":prop_instance_id",scene_prop_slot_ignore_inherit_movement,1),
        
        # get current pos and compare with new.
        # (prop_instance_get_position,pos44,":prop_instance_id"),
        # (assign,":move_prop",0),
        # (try_begin),
          # (get_distance_between_positions,":dist",pos44,pos57),
          # (gt,":dist",0),
          # (assign,":move_prop",1),
        # (else_try), # else check at least if rotations are difirent.
          # (position_get_rotation_around_x,":cur_x_rot",pos44),
          # (position_get_rotation_around_y,":cur_y_rot",pos44),
          # (position_get_rotation_around_z,":cur_z_rot",pos44),
          # (position_get_rotation_around_x,":new_x_rot",pos57),
          # (position_get_rotation_around_y,":new_y_rot",pos57),
          # (position_get_rotation_around_z,":new_z_rot",pos57),
          
          # (this_or_next|neq,":cur_z_rot",":new_z_rot"),
          # (this_or_next|neq,":cur_x_rot",":new_x_rot"),
          # (neq,":cur_y_rot",":new_y_rot"),
          # (assign,":move_prop",1),
        # (try_end),
        
        # (eq,":move_prop",1),
        
        (try_begin),
          (eq,":duration",0),
          (try_begin),
            (prop_instance_is_animating, ":animating", ":prop_instance_id"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":prop_instance_id"),
          (try_end),
          (prop_instance_set_position,":prop_instance_id", pos57),
        (else_try),
          (prop_instance_animate_to_position, ":prop_instance_id", pos57, ":duration"),
        (try_end),
      (try_end),
     # (val_mul, ":duration", 105), 
    #  (val_div, ":duration", 100), # value * 105 / 100 = 5% slower speed.
    
      (try_for_range,":cur_slot",scene_prop_slot_child_prop1,scene_prop_slots_end),
        (scene_prop_get_slot,":cur_child",":prop_instance_id",":cur_slot"),
        #(gt,":cur_child",-1), # has Child. #patch1115 fix 5/10
        (prop_instance_is_valid,":cur_child"), #patch1115 fix 18/27
        #(neq,":cur_child",":ignored_prop_instance"), # not ignored.
        #(neq,":cur_child",":ignored_prop_instance2"), # not ignored.
        (scene_prop_slot_eq,":cur_child",scene_prop_slot_is_active,1),
        
        (copy_position,pos58,pos57),
        (scene_prop_get_slot,":x_value",":cur_child",scene_prop_slot_x_value),
        (scene_prop_get_slot,":y_value",":cur_child",scene_prop_slot_y_value),
        (scene_prop_get_slot,":z_value",":cur_child",scene_prop_slot_z_value),
        (scene_prop_get_slot,":x_rot_value",":cur_child",scene_prop_slot_x_rot),
        (scene_prop_get_slot,":y_rot_value",":cur_child",scene_prop_slot_y_rot),
        (scene_prop_get_slot,":z_rot_value",":cur_child",scene_prop_slot_z_rot),
        (scene_prop_get_slot,":float_ground",":cur_child",scene_prop_slot_float_ground),
        (try_begin),
          (eq,":float_ground",1),
          (init_position,pos58),
          (position_get_rotation_around_z,":parent_z_rot",pos57),
          (position_copy_origin,pos58,pos57),
          (position_rotate_z,pos58,":parent_z_rot"),
          
          (position_move_x, pos58,":x_value"),
          (position_move_y, pos58,":y_value"),
          
          (position_set_z_to_ground_level,pos58),
          
          # (position_move_z, pos58, -40),
          # (position_set_z_to_ground_level,pos58),
        (else_try),
          (position_move_x, pos58,":x_value"),
          (position_move_y, pos58,":y_value"),
          (position_move_z, pos58,":z_value"),
        (try_end),
        
        #(position_move_z, pos58,":z_value"),
        (position_rotate_x,pos58,":x_rot_value"),
        (position_rotate_y,pos58,":y_rot_value"),
        (position_rotate_z,pos58,":z_rot_value"),
        
        (call_script, "script_prop_child_animate_to_position_with_childs", ":cur_child", ":duration",":ignored_prop_instance",":ignored_prop_instance2"),
      (try_end),
    (try_end),
   ]),
  
  # script_prop_child_animate_to_position_with_childs
  # Input: arg1 = prop_instance_id
  # Input: arg2 = duration in ms
  # Input: pos58 = position to animate to.
  # Output: 
  ("prop_child_animate_to_position_with_childs",
   [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":duration", 2),
    (store_script_param, ":ignored_prop_instance", 3),
    (store_script_param, ":ignored_prop_instance2", 4),
    
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      
      (set_fixed_point_multiplier, 100),
      
      (try_begin),
        (neq,":prop_instance_id",":ignored_prop_instance"),
        (neq,":prop_instance_id",":ignored_prop_instance2"),
        (neg|scene_prop_slot_eq,":prop_instance_id",scene_prop_slot_ignore_inherit_movement,1),
        
        # get current pos and compare with new.
        # (prop_instance_get_position,pos45,":prop_instance_id"),
        # (assign,":move_prop",0),
        # (try_begin),
          # (get_distance_between_positions,":dist",pos44,pos58),
          # (gt,":dist",0),
          # (assign,":move_prop",1),
        # (else_try), # else check at least if rotations are difirent.
          # (position_get_rotation_around_x,":cur_x_rot",pos45),
          # (position_get_rotation_around_y,":cur_y_rot",pos45),
          # (position_get_rotation_around_z,":cur_z_rot",pos45),
          # (position_get_rotation_around_x,":new_x_rot",pos58),
          # (position_get_rotation_around_y,":new_y_rot",pos58),
          # (position_get_rotation_around_z,":new_z_rot",pos58),
          
          # (this_or_next|neq,":cur_z_rot",":new_z_rot"),
          # (this_or_next|neq,":cur_x_rot",":new_x_rot"),
          # (neq,":cur_y_rot",":new_y_rot"),
          # (assign,":move_prop",1),
        # (try_end),
        
        # (eq,":move_prop",1),
        
        (try_begin),
          (eq,":duration",0),
          (try_begin),
            (prop_instance_is_animating, ":animating", ":prop_instance_id"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":prop_instance_id"),
          (try_end),
          (prop_instance_set_position,":prop_instance_id", pos58),
        (else_try),
          (prop_instance_animate_to_position, ":prop_instance_id", pos58, ":duration"),
        (try_end),
      (try_end),
      
     # (val_mul, ":duration", 105), 
    #  (val_div, ":duration", 100), # value * 105 / 100 = 5% slower speed.
      (neg|scene_prop_slot_eq,":prop_instance_id",scene_prop_slot_ignore_inherit_movement,1),
      (try_for_range,":cur_slot",scene_prop_slot_child_prop1,scene_prop_slots_end),
        (scene_prop_get_slot,":cur_child",":prop_instance_id",":cur_slot"),
        #(gt,":cur_child",-1), # Child has Child. #patch1115 fix 5/11
        (prop_instance_is_valid,":cur_child"), #patch1115 fix 18/30
        (neq,":cur_child",":ignored_prop_instance"), # not ignored.
        (neq,":cur_child",":ignored_prop_instance2"), # not ignored.
        (neg|scene_prop_slot_eq,":cur_child",scene_prop_slot_ignore_inherit_movement,1),
        (scene_prop_slot_eq,":cur_child",scene_prop_slot_is_active,1),
        
        (copy_position,pos59,pos58),
        (scene_prop_get_slot,":x_value",":cur_child",scene_prop_slot_x_value),
        (scene_prop_get_slot,":y_value",":cur_child",scene_prop_slot_y_value),
        (scene_prop_get_slot,":z_value",":cur_child",scene_prop_slot_z_value),
        (scene_prop_get_slot,":x_rot_value",":cur_child",scene_prop_slot_x_rot),
        (scene_prop_get_slot,":y_rot_value",":cur_child",scene_prop_slot_y_rot),
        (scene_prop_get_slot,":z_rot_value",":cur_child",scene_prop_slot_z_rot),
        (scene_prop_get_slot,":float_ground",":cur_child",scene_prop_slot_float_ground),
        (try_begin),
          (eq,":float_ground",1),
          (init_position,pos59),
          (position_get_rotation_around_z,":parent_z_rot",pos58),
          (position_copy_origin,pos59,pos58),
          (position_rotate_z,pos59,":parent_z_rot"),
          
          (position_move_x, pos59,":x_value"),
          (position_move_y, pos59,":y_value"),
          
          (position_set_z_to_ground_level,pos59),
          
          # (position_move_z, pos59, -40),
          # (position_set_z_to_ground_level,pos59),
        (else_try),
          (position_move_x, pos59,":x_value"),
          (position_move_y, pos59,":y_value"),
          (position_move_z, pos59,":z_value"),
        (try_end),
        
        (position_rotate_x,pos59,":x_rot_value"),
        (position_rotate_y,pos59,":y_rot_value"),
        (position_rotate_z,pos59,":z_rot_value"),
        
        # get current pos and compare with new.
        # (prop_instance_get_position,pos45,":cur_child"),
        # (assign,":move_prop",0),
        # (try_begin),
          # (get_distance_between_positions,":dist",pos44,pos59),
          # (gt,":dist",0),
          # (assign,":move_prop",1),
        # (else_try), # else check at least if rotations are difirent.
          # (position_get_rotation_around_x,":cur_x_rot",pos45),
          # (position_get_rotation_around_y,":cur_y_rot",pos45),
          # (position_get_rotation_around_z,":cur_z_rot",pos45),
          # (position_get_rotation_around_x,":new_x_rot",pos59),
          # (position_get_rotation_around_y,":new_y_rot",pos59),
          # (position_get_rotation_around_z,":new_z_rot",pos59),
          
          # (this_or_next|neq,":cur_z_rot",":new_z_rot"),
          # (this_or_next|neq,":cur_x_rot",":new_x_rot"),
          # (neq,":cur_y_rot",":new_y_rot"),
          # (assign,":move_prop",1),
        # (try_end),
        
        # (eq,":move_prop",1),
        
        (try_begin),
          (eq,":duration",0),
          (prop_instance_set_position,":cur_child", pos59),
        (try_end),
        (prop_instance_animate_to_position, ":cur_child", pos59, ":duration"),
      (try_end),
    (try_end),
   ]),
  
  # script_prop_instance_find_first_child_of_type
  # Input: arg1 = prop_instance_id
  # Input: arg2 = prop_kind_id
  # Output: reg0 = prop_instance_id
  ("prop_instance_find_first_child_of_type",
   [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":prop_kind_id", 2),
    
    (assign, reg0, -1),
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (assign, ":end_cond", scene_prop_slots_end),
      (try_for_range,":cur_slot",scene_prop_slot_child_prop1,":end_cond"),
        (scene_prop_get_slot,":cur_child",":prop_instance_id",":cur_slot"),
        (prop_instance_is_valid,":cur_child"),
        #(gt,":cur_child",0), # has Child.
        
        (prop_instance_get_scene_prop_kind, ":child_kind", ":cur_child"),
        (eq, ":child_kind", ":prop_kind_id"),
        (assign, reg0, ":cur_child"), 
        (assign, ":end_cond", 0),
      (try_end),
    (try_end),
   ]),
  
  # script_multiplayer_mm_refresh_artillery_availability
  # Input: 
  # Output: 
  ("multiplayer_mm_refresh_artillery_availability",
   [
    (try_begin),
      (assign,"$g_artillery_available_on_map",0),
      # 0 = None available
      # 1 = Any available
      # 2 = Only cannons
      # 3 = Only rockets
      
      (assign,"$g_spawn_with_artillery",0),
      # 0 = No spawn
      # 1 = Spawn for all
      # 2 = Spawn with cannons only
      # 3 = Spawn with rockets only
      

      (store_current_scene,":cur_scene"),
      (try_begin),
        (this_or_next|is_between,":cur_scene", "scn_random_multi_plain_medium", "scn_mp_custom_map_1"),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
        
        (assign,"$g_artillery_available_on_map",1),
        (assign,"$g_spawn_with_artillery",1),
      (try_end),
      
      (assign,":cannons_available",0),
      (assign,":rockets_available",0),
      (try_for_prop_instances, ":cur_instance_id", "spr_mm_spawn_with_cannon", somt_object),# try for range to get the last prop. (because of stupid mappers)
        (prop_instance_get_variation_id, ":spawn_type", ":cur_instance_id"),
        (try_begin),
          (eq,":spawn_type",0),
          (assign,"$g_spawn_with_artillery",1),
          (assign,"$g_artillery_available_on_map",1),
        (else_try),
          (eq,":spawn_type",1),
          (assign,"$g_spawn_with_artillery",2),
          (assign,"$g_artillery_available_on_map",2),
          (assign,":cannons_available",1),
        (else_try),
          (eq,":spawn_type",2),
          (assign,"$g_spawn_with_artillery",3),
          (assign,"$g_artillery_available_on_map",3),
          (assign,":rockets_available",1),
        (try_end),
      (try_end),
      
      (try_begin),
        (neq,"$g_artillery_available_on_map",1), # not everything available yet then check some more.
        
        (try_begin),
          (eq,":cannons_available",0),
          (assign,":end_cond","spr_mm_cannon_rocket"),
          (try_for_range,":cannon_type","spr_mm_cannon_12pdr",":end_cond"),
            (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":cannon_type"),   
            
            (gt,":num_instances_of_scene_prop",0),
            
            (assign,":cannons_available",1),
            (assign,":end_cond",0),
          (try_end),
        (try_end),
        
        (try_begin),
          (eq,":rockets_available",0),
          (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_mm_cannon_rocket"),  
          
          (gt,":num_instances_of_scene_prop",0),
            
          (assign,":rockets_available",1),
        (try_end),
        
        (try_begin),
          (eq,":cannons_available",1),
          (eq,":rockets_available",1),
           
          (assign,"$g_artillery_available_on_map",1),
        (else_try),
          (eq,":cannons_available",1),
          (assign,"$g_artillery_available_on_map",2),
        (else_try),
          (eq,":rockets_available",1),
          (assign,"$g_artillery_available_on_map",2),
        (else_try),
          (assign,"$g_artillery_available_on_map",0),
        (try_end),
        
      (try_end),
      
    (try_end),
   ]),
  
  # script_multiplayer_mm_before_mission_start_common
  # Input: 
  # Output: 
  ("multiplayer_mm_before_mission_start_common",
   [
    (try_begin),
      (server_set_add_to_game_servers_list, 1),
      (server_set_anti_cheat,0),
      #(server_set_max_num_players,multiplayer_player_loops_end),
      
      (assign,"$g_last_voice_command_at",0),
      (assign,"$g_hq_last_spawn_wave",0),
      (assign,"$g_scene_min_x",0),
      (assign,"$g_scene_max_x",0),
      (assign,"$g_scene_min_y",0),
      (assign,"$g_scene_max_y",0),
      (assign,"$g_current_selected_flag",-1),
      (assign,"$g_team_at_time_of_select",-1),
      (assign,"$g_last_refresh_at",0),
      (assign,"$g_should_do_refresh",0),
      (assign,"$g_cur_control_prop_kind", 0),
      (assign,"$g_cur_control_prop_instance", 0),  (try_begin),(eq,"$g_cur_control_prop_instance","$g_cur_control_prop_instance"),(try_end), # remove warning
      (assign,"$g_currently_controlling_object", 0),
      (assign,"$g_thunder_state", 0),
      (assign,"$g_scene_has_snowy_ground",0),
      
      (assign,"$g_used_piano_type",-1),
      
      (assign,"$g_artillery_available_on_map",0),
      (assign,"$g_spawn_with_artillery",0),
      (assign,"$g_started_playing_music_at",0),
 
      (call_script, "script_multiplayer_generate_weather"),

      
      #(assign,"$g_last_steer_command_at",0),
      #(assign,"$g_team_score_is_changed",0),
      
      # Assign pos55 our position for the invisible stuff.
      # (init_position,pos55),
      # (position_set_x,pos55,3000), 
      # (position_set_y,pos55,3000), 
      # (position_set_z,pos55,-3000),
      #(position_set_z_to_ground_level, pos55),
      #(position_move_z,pos55,-3000),
      
      # (try_begin),
        # (multiplayer_is_server),
        # (server_get_max_num_players, multiplayer_player_loops_end),
        # (val_add,multiplayer_player_loops_end,1),
      # (try_end),
      
   #   (this_or_next|multiplayer_is_server),
    #  (neg|game_in_multiplayer_mode),
    (try_end),
   ]),
  
  # script_multiplayer_mm_reset_stuff_after_round_before_clear
  # Input: 
  # Output: 
  ("multiplayer_mm_reset_stuff_after_round_before_clear",
   [
    (try_begin),
   
      (try_begin), # clients
        (neg|multiplayer_is_dedicated_server),
        
        # Stop all sounds like voice commands, music etc.
        (try_for_agents, ":cur_agent"),
          (agent_is_active,":cur_agent"),
          (agent_stop_sound, ":cur_agent"),
        (try_end),
      (try_end),
      
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (multiplayer_get_my_player, ":player_no"),
        (player_is_active,":player_no"),
        (store_mission_timer_a, ":player_last_team_select_time"),         
        (player_set_slot, ":player_no", slot_player_last_team_select_time, ":player_last_team_select_time"),
      (try_end),
     
      # Server only
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      # stop agent controlling cannons.
      (try_for_range,":cannon_type",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
        (try_for_prop_instances, ":cur_instance_id", ":cannon_type", somt_temporary_object),
          (scene_prop_get_slot,":cur_control_agent",":cur_instance_id",scene_prop_slot_controller_agent),
          (agent_is_active,":cur_control_agent"),          
          
          (call_script,"script_stop_agent_controlling_cannon",":cur_instance_id",":cur_control_agent"),
        (try_end),
      (try_end),
    (try_end),
   ]),
  
  # script_multiplayer_mm_reset_stuff_after_round
  # Input: 
  # Output: 
  ("multiplayer_mm_reset_stuff_after_round",
   [
    (try_begin),
      
      # both server and clients
      (assign,"$g_team_1_build_points","$g_team_1_max_build_points"),
      (assign,"$g_team_2_build_points","$g_team_2_max_build_points"),
      (assign,"$g_beaconed_player_team_1",-1),
      (assign,"$g_beaconed_player_team_2",-1),
      (assign,"$g_beaconed_player_admin",-1),
    

      
      (try_for_range,":prop_type", "spr_door_destructible", "spr_mm_barrier_20m"),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_set_slot, ":cur_instance_id", scene_prop_open_or_close_slot, 0),
        (try_end),
      (try_end),      
      
      
      # move back construction objects placed by mapper after round end.
      (try_for_range,":prop_type", "spr_mm_palisadedd", "spr_crate_explosive"),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0),
          
          #(call_script,"script_reset_prop_slots",":cur_instance_id"), # reset the slots for this construction object.
          
          (try_begin),
            (this_or_next|multiplayer_is_server),
            (neg|game_in_multiplayer_mode),
            
            (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
            (prop_instance_get_position,pos22,":cur_instance_id"),
            (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
            (gt,":distance",0),
            (try_begin),
              (prop_instance_is_animating, ":animating", ":cur_instance_id"),
              (eq,":animating",1),
              (prop_instance_stop_animating, ":cur_instance_id"),
            (try_end),
            (prop_instance_set_position,":cur_instance_id",pos21),
          (try_end),
          
          (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
          (assign,":max_health",reg1),
          (assign,":health",reg2),
          
          (gt,":max_health",0),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
          (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
          (prop_instance_enable_physics, ":cur_instance_id", 1),
        (try_end),
      (try_end),
      
      #Destroy props
      (try_for_range,":prop_type", mm_destructible_props_begin, mm_destroyed_props_end),
        (scene_prop_get_num_instances, ":num_instances", ":prop_type"),
        (gt,":num_instances",0),
        (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        
        (try_for_range,":prop_no",0,":num_instances"),
          (scene_prop_get_instance,":cur_instance_id",":prop_type",":prop_no"),
        #(try_for_prop_instances, ":cur_instance_id", ":prop_type"),
          #(assign,":cur_instance_id",":cur_instance_id"),
          (try_begin), # Reset wall health.
           # (is_between, ":prop_type", mm_destructible_props_begin, mm_destructible_props_end),
            
            (gt,":max_health",0),
            (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
            (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
            (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
            (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
            (prop_instance_enable_physics, ":cur_instance_id", 1),
          (try_end),
          
          (try_begin),
            (this_or_next|multiplayer_is_server),
            (neg|game_in_multiplayer_mode),
            (try_begin),
              (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1),
              (try_begin),
                (scene_prop_slot_eq, ":cur_instance_id", scene_prop_slot_in_use, 1),
                (call_script, "script_clean_up_prop_instance_with_childs", ":cur_instance_id"),
              (try_end),
            (else_try),
              (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
              (prop_instance_get_position,pos22,":cur_instance_id"),
              (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P

              (assign,":rot_change",0),
              (try_begin),
                (this_or_next|is_between, ":prop_type", "spr_door_destructible", "spr_mm_barrier_20m"),
                (eq,":prop_type","spr_mm_dummy"), #patch1115 fix 40/1
                
                (position_get_rotation_around_x,":x_rot1",pos21),
                (position_get_rotation_around_x,":x_rot2",pos22),
                (position_get_rotation_around_y,":y_rot1",pos21),
                (position_get_rotation_around_y,":y_rot2",pos22),
                (position_get_rotation_around_z,":z_rot1",pos21),
                (position_get_rotation_around_z,":z_rot2",pos22),
                
                (this_or_next|neq,":x_rot1",":x_rot2"),
                (this_or_next|neq,":y_rot1",":y_rot2"),
                (neq,":z_rot1",":z_rot2"),
                
                (assign,":rot_change",1),
              (try_end),
              
              (this_or_next|eq,":rot_change",1),
              (gt,":distance",0),
              
              (try_begin),
                (prop_instance_is_animating, ":animating", ":cur_instance_id"),
                (eq,":animating",1),
                (prop_instance_stop_animating, ":cur_instance_id"),
              (try_end),
              (prop_instance_set_position,":cur_instance_id",pos21),

              
              (this_or_next|is_between,":prop_type","spr_mm_new_wall_1_1","spr_mm_woodenwall1"),
              (this_or_next|is_between,":prop_type","spr_mm_house_wall_2","spr_mm_house_wall_41d"),
              (this_or_next|eq,":prop_type","spr_mm_woodenwall3"),
              (eq,":prop_type","spr_mm_woodenwallsnowy3"),
              
              (call_script,"script_attach_window_to_wall",":cur_instance_id"),
            (try_end),
          (try_end),
        (try_end),
      (try_end),

      
      # reset gourds
      (try_for_range,":gourd_type", "spr_gourd", "spr_gourd_spike"),
        (try_for_prop_instances, ":cur_instance_id", ":gourd_type", somt_object),
          (scene_prop_set_hit_points, ":cur_instance_id", 1),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", 1),
          (prop_instance_enable_physics, ":cur_instance_id", 1),
          
          (this_or_next|multiplayer_is_server),
          (neg|game_in_multiplayer_mode),
          
          (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
          (prop_instance_get_position,pos22,":cur_instance_id"),
          (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
          (gt,":distance",0),
          (prop_instance_set_position,":cur_instance_id",pos21),
        (try_end),
      (try_end),
      
      (rebuild_shadow_map),
      # Server only
      
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      
      (try_for_players, ":cur_player", "$g_ignore_server"), #patch1115 fix 43/3 start
        (player_is_active, ":cur_player"),
			
		    (player_set_slot, ":cur_player", slot_player_musician_spawned, 0),
		    (player_set_slot, ":cur_player", slot_player_drummer_spawned, 0),
		    (player_set_slot, ":cur_player", slot_player_flag_spawned, 0),
        (player_set_slot, ":cur_player", slot_player_formation_change, 0),
        (player_set_slot, ":cur_player", slot_player_formation_change_2, 0),
        (player_set_slot, ":cur_player", slot_player_bot_order, 0),
        
        (player_set_slot, ":cur_player", slot_player_death_pos_x, 0),
        (player_set_slot, ":cur_player", slot_player_death_pos_y, 0),
		    (player_set_slot, ":cur_player", slot_player_death_pos_z, 0),
	    (try_end), #patch1115 fix 43/3 end
      
      (call_script,"script_multiplayer_server_send_build_points"),#patch1115 fix 30/1
      
      # reset ze treasure
      (try_for_prop_instances, ":cur_instance_id", "spr_ze_treasure", somt_object),
        (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_just_fired,0),
      (try_end),
      
      
      #remove any cannonballs
      (try_for_range,":cannonball_type", "spr_mm_cannonball_code_only_6pd", "spr_mm_cannon_12pdr_wood"),
        (try_for_prop_instances, ":cur_instance_id", ":cannonball_type", somt_temporary_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_in_use, 1),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1), # only if its a code thing and not added by mapper.
          
          (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
        (try_end),
      (try_end),
      
      # Place earth dig works back
      (try_for_range,":earth_type", "spr_mm_tunnel_wall", "spr_ambience_sound_global_wind_snow"),
        (try_for_prop_instances, ":cur_instance_id", ":earth_type"),
          (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
          (prop_instance_get_position,pos22,":cur_instance_id"),
          (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
          (gt,":distance",0),
          (try_begin),
            (prop_instance_is_animating, ":animating", ":cur_instance_id"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":cur_instance_id"),
          (try_end),
          (prop_instance_set_position,":cur_instance_id",pos21),
        (try_end),
      (try_end),
      
      # Clean up limbers of horses.
      (try_for_prop_instances, ":cur_instance_id", "spr_mm_limber_wood", somt_temporary_object),
        (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1),
        (scene_prop_slot_eq, ":cur_instance_id", scene_prop_slot_in_use, 1),
        (call_script, "script_clean_up_prop_instance_with_childs", ":cur_instance_id"),
      (try_end),
      
      # royale cannons cleaning them up.
      (try_for_range,":spawn_type", "spr_royale_cannon_spawn_field", "spr_royale_props_end"),
        (try_for_prop_instances, ":instance_id", ":spawn_type"),
          (scene_prop_get_slot,":replaced_by_instance",":instance_id",scene_prop_slot_replaced_by),
          
          (gt,":replaced_by_instance",0), #not 0, instance id will never be that anwyay.
          
          (scene_prop_get_slot,":cannon_wood",":replaced_by_instance", scene_prop_slot_replaced_by),
          # a limbered cannon of some sort.
          # Set cannon to be not in_use so cannons can be re-used next round.
          (scene_prop_set_slot,":replaced_by_instance",scene_prop_slot_in_use,0),
          (scene_prop_set_slot,":replaced_by_instance",scene_prop_slot_is_spawned,1),
          
          (call_script, "script_clean_up_prop_instance", ":replaced_by_instance"),
          
          (prop_instance_is_valid,":cannon_wood"),
          (call_script, "script_clean_up_prop_instance_with_childs", ":cannon_wood"), # remove this cannon for it is part of a limber.
        (try_end),
      (try_end),
      
      #Royale cannons spawn here, then later they get replaced with usable ones.
      (call_script,"script_royale_initialise_cannons"),
      
      # get position of origional cannon and move the replaced by cannon wood and its parts back to that position.
      (try_for_range,":cannon_type", mm_cannon_types_begin, mm_cannon_types_end),
        (try_for_prop_instances, ":cur_instance_id", ":cannon_type"),
          (scene_prop_get_slot,":cannon_wood",":cur_instance_id", scene_prop_slot_replaced_by),

          (try_begin),
            (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0), # a mapper added cannon.
           
            (try_begin),
              (prop_instance_is_valid,":cannon_wood"),
              (prop_instance_get_scene_prop_kind, ":prop_kind", ":cannon_wood"),
              (is_between,":prop_kind", mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
              
              (scene_prop_get_slot,":ground_dist",":cannon_wood", scene_prop_slot_ground_offset),
             
              (call_script,"script_cannon_instance_get_barrel",":cannon_wood"),
              (assign,":barrel_instance",reg0),

              (try_begin),        
                (eq,":barrel_instance",-1),
                (assign,":barrel_instance",":cannon_wood"),
              (try_end),
              
              # reset barel rotations
              (scene_prop_set_slot,":barrel_instance", scene_prop_slot_x_rot, 0),
              (scene_prop_set_slot,":barrel_instance", scene_prop_slot_y_rot, 0),
              (scene_prop_set_slot,":barrel_instance", scene_prop_slot_z_rot, 0),
              
               
              # reset the right buttons.
              (assign,":end_cond","spr_mm_reload_button"), # place load button back
              (try_for_range,":cur_loadtype","spr_mm_load_cartridge_button",":end_cond"),
                (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_loadtype"),
                (prop_instance_is_valid,reg0),
                (call_script,"script_set_prop_child_active",reg0),
                (assign,":end_cond",0),
              (try_end),
             
              (assign,":end_cond","spr_mm_round_button"), # set all other buttons inactive.
              (try_for_range,":cur_butt_type","spr_mm_aim_button",":end_cond"),
                (neg|is_between,":cur_butt_type","spr_mm_load_cartridge_button","spr_mm_reload_button"),
               
                (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_butt_type"),
                (prop_instance_is_valid,reg0),
                (call_script,"script_set_prop_child_inactive",reg0),
              (try_end),
             
              (assign,":end_cond","spr_mm_round_button"), # set all other buttons inactive. # patch1115 fix 7/1
              (try_for_range,":cur_butt_type","spr_mm_12pdr_push_button",":end_cond"),
                (neg|is_between,":cur_butt_type","spr_mm_load_cartridge_button","spr_mm_reload_button"),
               
                (call_script, "script_prop_instance_find_first_child_of_type", ":cannon_wood", ":cur_butt_type"),
                (prop_instance_is_valid,reg0),
                (call_script,"script_set_prop_child_inactive",reg0),
              (try_end),

             
              (prop_instance_get_starting_position,pos57,":cur_instance_id"),
              
              (try_begin), # dont move swievel gun.              #patch1115 34/1 fix 
                (neq, ":cannon_type", "spr_mm_cannon_swievel"),
                                                   
                (position_set_z_to_ground_level,pos57),
                  #(position_move_z,pos57,":ground_dist"),
               
              (try_end),
              
              (position_move_z,pos57,":ground_dist"),
              
              (prop_instance_get_scene_prop_kind,":wood_type",":cannon_wood"),
              (try_begin),
                (eq,":wood_type","spr_mm_cannon_fort_wood"),
                
                (try_begin),
                  (prop_instance_is_animating, ":animating", ":cannon_wood"),
                  (eq,":animating",1),
                  (prop_instance_stop_animating, ":cannon_wood"),
                (try_end),
                (prop_instance_set_position,":cannon_wood",pos57),
              (try_end),

              (call_script,"script_recoil_cannon",":cannon_wood",1,1), # put it back defaultly.
              (try_begin),
                (eq,reg0,0), # has no recoil then move it back manually.
               
                # get current pos and compare with new.
                (prop_instance_get_position,pos44,":cannon_wood"),
                (assign,":move_prop",0),
                (try_begin),
                  (get_distance_between_positions,":dist",pos44,pos57),
                  (gt,":dist",0),
                  (assign,":move_prop",1),
                (else_try), # else check at least if rotations are difirent.
                  (position_get_rotation_around_x,":cur_x_rot",pos44),
                  (position_get_rotation_around_y,":cur_y_rot",pos44),
                  (position_get_rotation_around_z,":cur_z_rot",pos44),
                  (position_get_rotation_around_x,":new_x_rot",pos57),
                  (position_get_rotation_around_y,":new_y_rot",pos57),
                  (position_get_rotation_around_z,":new_z_rot",pos57),
                  
                  (this_or_next|neq,":cur_z_rot",":new_z_rot"),
                  (this_or_next|neq,":cur_x_rot",":new_x_rot"),
                  (neq,":cur_y_rot",":new_y_rot"),
                  (assign,":move_prop",1),
                (try_end),
                
                (eq,":move_prop",1),
               
                (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_wood", 0,0,0),

              (try_end),
             
              # reset some slots on it.
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_has_ball, 0),
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_is_loaded, 0),
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_ammo_type, 0),
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_controller_agent, -1),
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_user_agent, -1),
              (scene_prop_set_slot,":cannon_wood", scene_prop_slot_z_rot,0), 
              (scene_prop_set_slot,":cannon_wood",scene_prop_slot_just_pushed_back,0), #patch1115 fix 7/2

            (else_try),
              (prop_instance_get_starting_position,pos30,":cur_instance_id"),
              (call_script,"script_generate_bits_for_cannon_instance",":cur_instance_id", 1,0), # re-create the cannon for it was limbered once.
            (try_end),
          (else_try),
            # a limbered cannon of some sort.
            # Set cannon to be not in_use so cannons can be re-used next round.
            (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_in_use,0),
            
            (prop_instance_is_valid,":cannon_wood"),
            (call_script, "script_clean_up_prop_instance_with_childs", ":cannon_wood"), # remove this cannon for it is part of a limber.
          (try_end),
        (try_end),
      (try_end),
      
      # Reset birds.
      (try_for_prop_instances, ":instance_id", "spr_mm_bird"),
        (assign,":instance_id",":instance_id"),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_in_use,1),      
        
        (prop_instance_get_starting_position, pos21, ":instance_id"),
        (prop_instance_get_position,pos22,":instance_id"),
        (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
        (gt,":distance",0),
        (prop_instance_stop_animating,":instance_id"),
        (prop_instance_set_position,":instance_id",pos21),
      (try_end),
      
      # reset broken windows...
      (try_for_range,":prop_type", "spr_mm_window1d_poor", "spr_mm_window3_poor"),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_temporary_object),
          (scene_prop_get_slot,":replacing_old_prop_instance",":cur_instance_id", scene_prop_slot_replacing),
          
          #(gt,":replacing_old_prop_instance",-1), # this one is replacing something.. lets clean it up and spawn a new window for said wall.  #patch1115 fix 5/12
          (prop_instance_is_valid,":replacing_old_prop_instance"), #patch1115 18/14
          (scene_prop_get_slot,":wall_instance",":cur_instance_id", scene_prop_slot_parent_prop),
          
          (try_begin),
            (prop_instance_is_valid,":wall_instance"),
            (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
            (call_script,"script_attach_window_to_wall",":wall_instance"),
          (else_try),
            (prop_instance_get_position,pos49,":cur_instance_id"),
            
            (assign,":prop_to_spawn",-1),
            (try_begin),
              (eq,":prop_type","spr_mm_window1d"),
              (assign,":prop_to_spawn","spr_mm_window1"),
            (else_try),
              (eq,":prop_type","spr_mm_window2d"),
              (assign,":prop_to_spawn","spr_mm_window2"),
            (else_try),
              (eq,":prop_type","spr_mm_window1d_poor"),
              (assign,":prop_to_spawn","spr_mm_window1_poor"),
            (else_try),
              (eq,":prop_type","spr_mm_window2d_poor"),
              (assign,":prop_to_spawn","spr_mm_window2_poor"),
            (else_try),
              (eq,":prop_type","spr_mm_window3d"),
              (assign,":prop_to_spawn","spr_mm_window3"),
            (else_try),
              (eq,":prop_type","spr_mm_window4d"),
              (assign,":prop_to_spawn","spr_mm_window4"),
            (else_try),
              (eq,":prop_type","spr_mm_window3d_poor"),
              (assign,":prop_to_spawn","spr_mm_window3_poor"),
            (else_try),
              (eq,":prop_type","spr_mm_window4d_poor"),
              (assign,":prop_to_spawn","spr_mm_window4_poor"),
            (try_end),
            
            (try_begin),
              (scene_prop_slot_eq, ":cur_instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
              (scene_prop_get_slot,":x_scale",":cur_instance_id",scene_prop_slot_x_scale),
              (scene_prop_get_slot,":y_scale",":cur_instance_id",scene_prop_slot_y_scale),
              (scene_prop_get_slot,":z_scale",":cur_instance_id",scene_prop_slot_z_scale),
              (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 1, ":x_scale",":y_scale",":z_scale"),
            (else_try),
              (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 0),
            (try_end),

            (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
          (try_end),
        (try_end),
      (try_end),
      
      # reset broken windows...
      (try_for_range,":prop_type", "spr_mm_window3d_poor", "spr_mm_windows_end"),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_temporary_object),
          (scene_prop_get_slot,":replacing_old_prop_instance",":cur_instance_id", scene_prop_slot_replacing),
          
          #(gt,":replacing_old_prop_instance",-1), # this one is replacing something.. lets clean it up and spawn a new window for said wall. #patch1115 fix 5/13
          (prop_instance_is_valid,":replacing_old_prop_instance"), #patch1115 18/15
          (scene_prop_get_slot,":wall_instance",":cur_instance_id", scene_prop_slot_parent_prop),
          
          (try_begin),
            (prop_instance_is_valid,":wall_instance"),
            (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
            (call_script,"script_attach_window_to_wall",":wall_instance"),
          (else_try),
            (prop_instance_get_position,pos49,":cur_instance_id"),
            
            (assign,":prop_to_spawn",-1),
            (try_begin),
              (eq,":prop_type","spr_mm_window3d"),
              (assign,":prop_to_spawn","spr_mm_window3"),
            (else_try),
              (eq,":prop_type","spr_mm_window4d"),
              (assign,":prop_to_spawn","spr_mm_window4"),
            (else_try),
              (eq,":prop_type","spr_mm_window3d_poor"),
              (assign,":prop_to_spawn","spr_mm_window3_poor"),
            (else_try),
              (eq,":prop_type","spr_mm_window4d_poor"),
              (assign,":prop_to_spawn","spr_mm_window4_poor"),
            (try_end),
            
            (try_begin),
              (scene_prop_slot_eq, ":cur_instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
              (scene_prop_get_slot,":x_scale",":cur_instance_id",scene_prop_slot_x_scale),
              (scene_prop_get_slot,":y_scale",":cur_instance_id",scene_prop_slot_y_scale),
              (scene_prop_get_slot,":z_scale",":cur_instance_id",scene_prop_slot_z_scale),
              (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 1, ":x_scale",":y_scale",":z_scale"),
            (else_try),
              (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 0),
            (try_end),

            (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
          (try_end),
        (try_end),
      (try_end),
      
      # place back boats.
      (try_for_range,":ship_type", "spr_mm_ship", "spr_door_destructible"),
        (try_for_prop_instances, ":boat_instance_id", ":ship_type", somt_object),
          (prop_instance_get_variation_id,":usable_boat",":boat_instance_id"),
          (eq,":usable_boat",1),
          
          (prop_instance_get_starting_position,pos57,":boat_instance_id"),
          (store_add,":boatheight","$g_scene_water_level",20),
          (position_set_z, pos57, ":boatheight"), # set to water level.
          (call_script, "script_prop_instance_animate_to_position_with_childs", ":boat_instance_id", 0,0,0),
          
          (scene_prop_set_slot, ":boat_instance_id", scene_prop_slot_bounces, 0),
          (scene_prop_set_slot, ":boat_instance_id", scene_prop_slot_y_value, 0),
        (try_end),
      (try_end),
      
      # royale clean up spawned boxes of items and ammo
      (try_for_range,":item_spawn_type", "spr_royale_weapon_spawn", "spr_royale_horse_spawn"),
        (try_for_prop_instances, ":cur_instance_id", ":item_spawn_type"),
          (assign,":cur_instance_id",":cur_instance_id"),
          
          # always set the slot fired false
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_just_fired,0),
          
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_in_use, 1),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1), # only if its a code thing and not added by mapper.
          
          (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
        (try_end),
      (try_end),
      
      # Royale place back specific item boxes that got removed randomly
      (try_for_range,":item_spawn_type", "spr_royale_weapon_spawn_musket", "spr_royale_ammo_spawn"),
        (try_for_prop_instances, ":cur_instance_id", ":item_spawn_type", somt_object),
          (neg|scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1),
          
          (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
          (prop_instance_get_position,pos22,":cur_instance_id"),
          (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
          (gt,":distance",0),
          (prop_instance_set_position,":cur_instance_id",pos21),
        (try_end),
      (try_end),
      
      # for ammo too;
      (try_for_range,":item_spawn_type", "spr_royale_ammo_spawn_musket", "spr_royale_horse_spawn"),
        (try_for_prop_instances, ":cur_instance_id", ":item_spawn_type", somt_object),
          (neg|scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1),
          
          (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
          (prop_instance_get_position,pos22,":cur_instance_id"),
          (get_distance_between_positions,":distance",pos21,pos22), # only move it back when its actually moved :P
          (gt,":distance",0),
          (prop_instance_set_position,":cur_instance_id",pos21),
        (try_end),
      (try_end),
      
      # intialise royale boxes
      (call_script,"script_royale_initialise_boxes"),
      
    (try_end),
   ]),
  

  
  # script_multiplayer_mm_refresh_inf_cav_availability
  # Input: 
  # Output: 
  ("multiplayer_mm_refresh_inf_cav_availability",
   [
    (try_begin),
      (assign,"$g_infantry_available_on_map",1),
      (assign,"$g_cavalry_available_on_map",1),
     
      (try_for_prop_instances, ":cur_instance_id", "spr_mm_spawn_restrictions", somt_object),# try for range to get the last prop. (because of stupid mappers)        
        (prop_instance_get_variation_id, ":spawn_type", ":cur_instance_id"),
        (try_begin),
          (eq,":spawn_type",1),
          (assign,"$g_cavalry_available_on_map",0),
        (else_try),
          (eq,":spawn_type",2),
          (assign,"$g_infantry_available_on_map",0),
        (try_end),
      (try_end),
      (try_begin),
        (eq, "$trp_availability", 1),
        (assign, "$g_cavalry_available_on_map", 0),
        (assign, "$g_infantry_available_on_map", 1),
      (else_try),
        (eq, "$trp_availability", 2),
        (assign, "$g_cavalry_available_on_map", 1),
        (assign, "$g_infantry_available_on_map", 0),
      (else_try),
        (eq, "$trp_availability", 3),
        (assign, "$g_cavalry_available_on_map", 1),
        (assign, "$g_infantry_available_on_map", 1),
      (try_end),
    (try_end),
   ]),
  

  # script_multiplayer_mm_after_mission_start_common
  # Input: 
  # Output: 
  ("multiplayer_mm_after_mission_start_common",
   [   
    (try_begin),
      (server_set_add_to_game_servers_list, 1),
      (server_set_anti_cheat,0),
     # (server_set_max_num_players,multiplayer_player_loops_end),
      
      (get_scene_boundaries, pos10,pos11),
      (set_fixed_point_multiplier, 100),
      (position_get_x,"$g_scene_min_x",pos10),
      (position_get_x,"$g_scene_max_x",pos11),
      (position_get_y,"$g_scene_min_y",pos10),
      (position_get_y,"$g_scene_max_y",pos11),
      
      # Assign pos55 our position for the invisible stuff.
      (init_position,pos55),
      (position_set_x,pos55,3000), 
      (position_set_y,pos55,3000), 
      (position_set_z,pos55,-3000),
      # (position_set_z_to_ground_level, pos55),
      # (position_move_z,pos55,-3000),
      
      # init all scales.
      (set_fixed_point_multiplier, 1000),
      (try_for_range,":prop_type","spr_invalid_object","spr_scene_props_end"),
        (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":prop_type"),  
        (try_for_range, ":cur_prop_instance", 0, ":num_instances_of_scene_prop"),
          (scene_prop_get_instance, ":prop_instance_id", ":prop_type", ":cur_prop_instance"),
          # store his scale.
          (prop_instance_get_scale, pos59, ":prop_instance_id"),
          (position_get_scale_x, ":x_scale", pos59),#x scale in meters * fixed point multiplier is returned
          (position_get_scale_y, ":y_scale", pos59),
          (position_get_scale_z, ":z_scale", pos59),  
          
          (assign, ":is_scaled",0),
          (try_begin),
            (this_or_next|neq,":x_scale",1000),
            (this_or_next|neq,":y_scale",1000),
                         (neq,":z_scale",1000),
            (assign, ":is_scaled",1),
          (try_end),

          (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_x_scale,":x_scale"),
          (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_y_scale,":y_scale"),
          (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_z_scale,":z_scale"),
          (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_is_scaled,":is_scaled"),
        (try_end),
      (try_end),
      (set_fixed_point_multiplier, 100),
      
      
      (assign,"$g_team_1_build_points","$g_team_1_max_build_points"),
      (assign,"$g_team_2_build_points","$g_team_2_max_build_points"),
      (assign,"$g_beaconed_player_team_1",-1),
      (assign,"$g_beaconed_player_team_2",-1),
      (assign,"$g_beaconed_player_admin",-1),

      (assign,"$g_explosives_available_on_map",1),
      (assign,"$g_explosives_available_team1",1),
      (assign,"$g_explosives_available_team2",1),
      
      (try_for_prop_instances, ":cur_instance_id", "spr_mm_disable_explosives", somt_object),
        (prop_instance_get_variation_id,":team_limiter",":cur_instance_id"),
        (try_begin),
          (eq,":team_limiter",1),
          (assign,"$g_explosives_available_team1",0),
        (else_try),
          (eq,":team_limiter",2),
          (assign,"$g_explosives_available_team2",0),
        (else_try),
          (assign,"$g_explosives_available_on_map",0),
        (try_end),
      (try_end),
      
      # refresh the abilities for artillery at start of map (both server and client side).
      (call_script,"script_multiplayer_mm_refresh_artillery_availability"),
      
      # Refresh Inf/Cav Availability.
      (call_script,"script_multiplayer_mm_refresh_inf_cav_availability"), 

	  
	    # Set door linkage with walls
      (try_for_range,":prop_type", "spr_door_destructible", "spr_mm_barrier_20m"),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (prop_instance_get_variation_id_2,":linked_cannon_index",":cur_instance_id"),
          (scene_prop_set_slot,":cur_instance_id", scene_prop_slot_linked_prop, ":linked_cannon_index"),
        (try_end),
      (try_end),      
	  
	  
	    # Set wall slot to their variation for linking walls to cannons for final destruction.
      (try_for_range,":prop_type", mm_destructible_props_begin, mm_destructible_props_end),
        (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0),
          
          (call_script,"script_reset_prop_slots",":cur_instance_id"), # reset the slots for this wall.
          
          (prop_instance_get_variation_id_2,":linked_cannon_index",":cur_instance_id"),
          (scene_prop_set_slot,":cur_instance_id", scene_prop_slot_linked_prop, ":linked_cannon_index"),
          
          (gt,":max_health",0),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
          (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
        (try_end),
      (try_end),
      
      # for constructible props placed by the mapper set the correct healths.
      (try_for_range,":prop_type", "spr_mm_palisadedd", "spr_crate_explosive"),
        (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0),
          
          (call_script,"script_reset_prop_slots",":cur_instance_id"), # reset the slots for this construction object.
          
          (gt,":max_health",0),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
          (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
        (try_end),
      (try_end),
	  
      # set health for mapper added windows
      (try_for_range,":prop_type", "spr_mm_window1_poor", "spr_mm_window1d_poor"),
        (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0),
          
          (call_script,"script_reset_prop_slots",":cur_instance_id"), # reset the slots for this construction object.
          
          (gt,":max_health",0),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
          (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
        (try_end),
      (try_end),
      
      # set health for mapper added windows
      (try_for_range,":prop_type", "spr_mm_window3_poor", "spr_mm_window3d_poor"),
        (call_script,"script_get_default_health_for_prop_kind",":prop_type"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        (try_for_prop_instances, ":cur_instance_id", ":prop_type", somt_object),
          (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0),
          
          (call_script,"script_reset_prop_slots",":cur_instance_id"), # reset the slots for this construction object.
          
          (gt,":max_health",0),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_health,":health"),
          (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_max_health,":max_health"),
          (scene_prop_set_hit_points, ":cur_instance_id", ":max_health"),
          (scene_prop_set_cur_hit_points, ":cur_instance_id", ":health"),
        (try_end),
      (try_end),
      
      
      
      # both client and server set the ladders true physics.
      # (try_for_range,":ladder_type", "spr_siege_ladder_move_6m", "spr_portcullis"),
        # (try_for_prop_instances, ":instance_id", ":ladder_type"),
          # (assign,":instance_id",":instance_id"),
          
          # (prop_instance_enable_physics, ":instance_id", 1),
        # (try_end),
      # (try_end),
      
      
      (rebuild_shadow_map),
      
	  
      # The rest is only for servers setting up the props and stuff.
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      # MM
      # (call_script, "script_initialize_scene_prop_slots", "spr_mm_cannonball_code_only"),
     
     # set all cannons marked as spawned for stopping it generating lots and lots of em
     # (try_for_range,":cannon_part_type",mm_cannon_types_begin,mm_cannon_types_end),
        # (scene_prop_get_num_instances, ":end_cond", ":cannon_part_type"),
        # (try_for_range,":cur_instance",0,":end_cond"),
          # (scene_prop_get_instance, ":instance_id", ":cannon_part_type", ":cur_instance"),
          # (scene_prop_slot_eq,":instance_id",scene_prop_slot_is_spawned,0), 
          
          # (scene_prop_set_slot,":instance_id",scene_prop_slot_is_spawned,1),
        # (try_end),
      # (try_end),
      
      #set all buttons marked as spawned and clean them up for mappers that auto created them under the map while editing...
     (try_for_range,":button_type", mm_button_types_begin, mm_button_types_end),
        (try_for_prop_instances, ":instance_id", ":button_type"),
          (assign,":instance_id",":instance_id"),
          (call_script, "script_clean_up_prop_instance", ":instance_id"), # Lets clean up the buttons
          
          (scene_prop_slot_eq,":instance_id",scene_prop_slot_is_spawned,0),
          (scene_prop_set_slot,":instance_id",scene_prop_slot_is_spawned,1),
        (try_end),
      (try_end),

     #cannons
     # (try_for_range,":cannon_type", mm_cannon_wood_types_begin, mm_cannon_wood_types_end),
       # (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":cannon_type"),     
       # (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
         # (scene_prop_get_instance, ":cur_instance_id", ":cannon_type", ":cur_instance"),
         
         # (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0), # place this cannon back..

         ##oops we have a mapper that let a cannon replace... lets spawn a normal cannon again.. to attach the shit to this cannon
         # (prop_instance_get_position, pos21, ":cur_instance_id"),
         # (prop_instance_get_scale, pos22, ":cur_instance_id"),
         
         ##Clean that part up.
         # (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
         # (scene_prop_set_slot,":cur_instance_id",scene_prop_slot_is_spawned,1),
         
         # (set_fixed_point_multiplier, 1000),
         # (position_get_scale_x, ":width_scale", pos22),#x scale in meters * fixed point multiplier is returned
         # (position_get_scale_y, ":length_scale", pos22),
         # (position_get_scale_z, ":height_scale", pos22),  
         # (set_fixed_point_multiplier, 100),
         
         # (assign,":spawn_cannon_type",-1),
         # (try_begin),
           # (eq,":cannon_type","spr_mm_cannon_12pdr_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_12pdr"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_howitzer_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_howitzer"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_mortar_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_mortar"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_fort_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_fort"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_naval_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_naval"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_carronade_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_carronade"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_swievel_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_swievel"),
         # (else_try),
           # (eq,":cannon_type","spr_mm_cannon_rocket_wood"),
           # (assign,":spawn_cannon_type","spr_mm_cannon_rocket"),
         # (try_end),
         
         # (copy_position,pos49,pos21), # pos49 is prop pos.
         # (call_script, "script_find_or_create_scene_prop_instance", ":spawn_cannon_type", 0, 1, 0),
         # (assign,":new_cannon_id",reg0),
         ##(scene_prop_set_slot,":new_cannon_id",scene_prop_slot_is_spawned,0),
            
         # (call_script, "script_multiplayer_server_scale_prop_instance", ":new_cannon_id",":width_scale",":length_scale",":height_scale"),
         # (scene_prop_set_slot,":new_cannon_id",scene_prop_slot_is_spawned,0),  # set to non spawned.
       # (try_end),
       ##(call_script, "script_move_object_type_to_origional_position", ":cannon_type"),
     # (try_end),
     
     # (try_for_range,":cannon_type", mm_cannon_types_begin, mm_cannon_types_end),
       # (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":cannon_type"),     
       # (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
         # (scene_prop_get_instance, ":cur_instance_id", ":cannon_type", ":cur_instance"),
         
          # (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,0), # place this cannon back..
          # (prop_instance_get_starting_position, pos21, ":cur_instance_id"),
         # (position_get_z, ":prop_z", pos21),
           
         #(prop_instance_get_position, pos22, ":instance_id"),
         # (copy_position,pos22,pos21),
         # (position_set_z,pos22,3000),
         # (position_set_z_to_ground_level, pos22),
         # (position_move_z,pos22,-2000), # move 20 meter below, imagine a cannon under a roof?
         # (position_get_z, ":ground_z", pos22),
          
          # Or is it auto replaced in editor? :o
         # (try_begin),
           # (le,":prop_z",":ground_z"),
           # (position_move_z,pos21,3000),
         # (try_end),
         
         #(prop_instance_set_position, ":cur_instance_id", pos21),
         # (prop_instance_animate_to_position, ":cur_instance_id", pos21, 0),
       # (try_end),
     # (try_end),
     
     #set all cannon parts marked as spawned and clean them up for mappers that auto created them by the auto replacing normal cannons
     # (try_for_range,":cannon_part_type", "spr_mm_cannon_12pdr_wood", "spr_mm_cannon_12pdr_limber_wheels"),
        # (scene_prop_get_num_instances, ":end_cond", ":cannon_part_type"),
        # (try_for_range,":cur_instance",0,":end_cond"),
          # (scene_prop_get_instance, ":instance_id", ":cannon_part_type", ":cur_instance"),
          
          #(try_begin),
       #   (scene_prop_slot_eq,":instance_id",scene_prop_slot_is_spawned,0), 
           # (prop_instance_get_position, pos22, ":instance_id"),
       #   (scene_prop_set_slot,":instance_id",scene_prop_slot_is_spawned,1),
          #(try_end),
          
          # (call_script, "script_clean_up_prop_instance", ":instance_id"), # Lets clean up the buttons
        # (try_end),
      # (try_end),
     
    
     
     #ammoboxes
     # (try_for_range,":ammobox_type", "spr_mm_ammobox_cannon", "spr_mm_tent1"),
       # (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":ammobox_type"),
       # (try_for_range,":cur_instance",0,":num_instances_of_scene_prop"),
         # (scene_prop_get_instance, ":instance_id", ":ammobox_type", ":cur_instance"),
          
          # (scene_prop_slot_eq,":instance_id",scene_prop_slot_is_spawned,1),
         # (call_script, "script_clean_up_prop_instance", ":instance_id"), # Lets clean up the box
       # (try_end),
     # (try_end),
     
 
 
    #(try_end),
      
      #Assuming we are going to have 8 limbered cannons max in the map.
      # (try_begin),
        # (scene_prop_get_num_instances, ":num_inst", mm_unlimber_button_types_begin),
        # (lt,":num_inst", 8), # not enough lets spawn some crap.
        # (copy_position,pos49,pos55), # pos49 is prop pos.
        # (try_for_range,":cannon_number",0,9),
          # (try_for_range,":button_type", mm_unlimber_button_types_begin, mm_unlimber_button_types_end),
            # (call_script, "script_find_or_create_scene_prop_instance", ":button_type", 1, 0, 0),
          # (try_end),
          # (eq, ":cannon_number", ":cannon_number"), # remove warning.
        # (try_end),
      # (try_end),
      
      #Assuming we are going to have 16 cannons max in the map.
      # (try_begin),
        # (scene_prop_get_num_instances, ":num_inst", mm_unlimber_button_types_end),
        # (lt,":num_inst", 16), # not enough lets spawn some crap.
        # (copy_position,pos49,pos55), # pos49 is prop pos.
        # (try_for_range,":cannon_number",0,17),
          # (try_for_range,":button_type", mm_unlimber_button_types_end, mm_button_types_end),
            # (call_script, "script_find_or_create_scene_prop_instance", ":button_type", 1, 0, 0),
          # (try_end),
          # (eq, ":cannon_number", ":cannon_number"), # remove warning.
        # (try_end),
      # (try_end),
     
      #Royale cannons spawn here, then later they get replaced with usable ones.
      (call_script,"script_royale_initialise_cannons"),
       
     
     (try_for_range,":cannon_type", mm_cannon_types_begin, mm_cannon_types_end),
        (scene_prop_get_num_instances, ":num_instances", ":cannon_type"),
        (gt,":num_instances",0),
        #(try_for_prop_instances, ":instance_id", ":cannon_type"),
          #(assign,":instance_id",":instance_id"),
        
        (try_for_range,":prop_no",0,":num_instances"),
          (scene_prop_get_instance,":instance_id",":cannon_type",":prop_no"),
        
          #(scene_prop_slot_lt,":instance_id",scene_prop_slot_replaced_by,1), # It is not replaced
          
         # (prop_instance_get_position, pos21, ":instance_id"),
         
         
          #### (prop_instance_get_starting_position, pos21, ":instance_id"),
          #### (get_distance_between_positions,":dist",pos21,pos55),
          #### (gt,":dist",500),
          
          
       ###   (position_get_z, ":prop_z", pos21),
           
         #(prop_instance_get_position, pos22, ":instance_id"),
       ##   (position_set_z,pos21,3000),
        ###  (position_set_z_to_ground_level, pos21),
       ###   (position_move_z,pos21,-2000), # move 20 meter below, imagine a cannon under a roof?
       ###   (position_get_z, ":ground_z", pos21),
          
          #Or is it auto replaced in editor? :o
        ###  (ge,":prop_z",":ground_z"),
          
          # (assign,reg9,":instance_id"),
          # (display_message,"@we has a cannon: {reg9}"),
          
         # (scene_prop_slot_eq, ":instance_id", scene_prop_slot_child_prop1, 0), # No childs lets set them.
          
          #(scene_prop_slot_eq,":instance_id",scene_prop_slot_is_spawned,0), # is not spawned
          
          (call_script,"script_generate_bits_for_cannon_instance",":instance_id",0,0),
          #(assign,":cannon_wood",reg0),
          
          # (try_begin),
            # (gt,":cannon_wood",-1),
            # (prop_instance_get_position, pos57, ":cannon_wood"),
            # (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_wood", 0,0,0),
          # (try_end),
        (try_end),
      (try_end),
      
      
      # set birds added by mapper as in_use so they start flying around ;)
      (try_for_prop_instances, ":instance_id", "spr_mm_bird", somt_object),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_in_use,1),      
      (try_end),
      
      # set explosives added by mapper as in_use so you can blow em up.
      (try_for_range,":explosive_type", mm_explosive_props_begin, mm_explosive_props_end),
        (try_for_prop_instances, ":instance_id", ":explosive_type", somt_object),
          (scene_prop_set_slot,":instance_id",scene_prop_slot_in_use,1),     
        (try_end),
      (try_end),
      
      # Spawn windows.
      (try_for_range,":wall_type", "spr_mm_new_wall_1_1", "spr_mm_woodenwall1"),
        (try_for_prop_instances, ":instance_id", ":wall_type", somt_object),
          (call_script,"script_attach_window_to_wall",":instance_id"),
        (try_end),
      (try_end),
      
      (try_for_range,":wall_type", "spr_mm_house_wall_2", "spr_mm_house_wall_41d"),
        (try_for_prop_instances, ":instance_id", ":wall_type", somt_object),
          (call_script,"script_attach_window_to_wall",":instance_id"),
        (try_end),
      (try_end),
      
      (try_for_prop_instances, ":instance_id", "spr_mm_woodenwall3", somt_object),
        (call_script,"script_attach_window_to_wall",":instance_id"),
      (try_end),
      
      (try_for_prop_instances, ":instance_id", "spr_mm_woodenwallsnowy3", somt_object),
        (call_script,"script_attach_window_to_wall",":instance_id"),
      (try_end),
      
      
      (set_fixed_point_multiplier, 100),
      (try_for_prop_instances, ":instance_id", "spr_mm_restroom", somt_object),
        (prop_instance_get_position, pos30, ":instance_id"),
        (assign,":x_movement",30),
        (assign,":z_movement",30),
        
        # Resize the prefered positions to scale
        (scene_prop_get_slot,":x_scale",":instance_id",scene_prop_slot_x_scale),
        (scene_prop_get_slot,":z_scale",":instance_id",scene_prop_slot_z_scale),
        
        (try_begin),
          (this_or_next|gt,":x_scale",0),
          (gt,":z_scale",0),
          
          (val_mul, ":x_movement", ":x_scale"),           
          (val_mul, ":z_movement", ":z_scale"),              
          (val_div, ":x_movement", 1000),
          (val_div, ":z_movement", 1000),
        (try_end),
        
        (position_move_x,pos30,":x_movement"),
        (position_move_z,pos30,":z_movement"),
        
        (copy_position,pos49,pos30), # pos49 is prop pos.
        
        (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_shithouse_button", 0, 0, 0),
      (try_end),
      
      
      (try_for_range,":ship_type", "spr_mm_ship", "spr_door_destructible"),
        (try_for_prop_instances, ":boat_instance_id", ":ship_type", somt_object),
          
          (prop_instance_get_variation_id,":usable_boat",":boat_instance_id"),
          (eq,":usable_boat",1),
          
          ## reset shit. (Important for defmin)
          #(call_script,"script_reset_prop_slots",":boat_instance_id"),
          
          (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_in_use, 1),
          
          (set_fixed_point_multiplier,100),
          (prop_instance_get_position,pos49,":boat_instance_id"),
          (store_add,":boatheight","$g_scene_water_level",20),
          (position_set_z, pos49, ":boatheight"), # set to water level.
          (try_begin),
            (prop_instance_is_animating, ":animating", ":boat_instance_id"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":boat_instance_id"),
          (try_end),
          (prop_instance_set_position,":boat_instance_id",pos49),
          
          
          (assign,":hit_detect_front","spr_mm_ship_hit_detect"),
          (assign,":hit_detect_back","spr_mm_ship_hit_detect_back"),
          (assign,":rudder_control","spr_mm_ship_rudder_control"),
          (assign,":y_rudder_offset",-604),
          (try_begin),
            (this_or_next|eq,":ship_type","spr_mm_ship_longboat"),
            (this_or_next|eq,":ship_type","spr_mm_ship_longboat_1_mast"),
            (this_or_next|eq,":ship_type","spr_mm_ship_gunboat"),
            (this_or_next|eq,":ship_type","spr_mm_ship_rocket_boat"),
            (eq,":ship_type","spr_mm_ship_longboat_2_mast"),
            
            (assign,":rudder_control","spr_mm_ship_longboat_rudder_control"),
            (assign,":y_rudder_offset",-556),
          (else_try),
            (eq,":ship_type","spr_mm_ship_schooner"),
            
            (assign,":hit_detect_front","spr_mm_ship_schooner_hit_detect"),
            (assign,":hit_detect_back","spr_mm_ship_schooner_hit_detect_back"),
            (assign,":rudder_control","spr_mm_ship_schooner_rudder_control"),
            (assign,":y_rudder_offset",-1883),
          (try_end),
          
          (call_script, "script_find_or_create_scene_prop_instance", ":hit_detect_front", 0, 0, 0),
          (assign, ":boat_hit_detect_instance_id", reg0),
          (scene_prop_set_slot,":boat_hit_detect_instance_id", scene_prop_slot_parent_prop,":boat_instance_id"),
          (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_child_prop2,":boat_hit_detect_instance_id"),
          (scene_prop_set_slot,":boat_hit_detect_instance_id", scene_prop_slot_is_active,1),
          (scene_prop_set_slot,":boat_hit_detect_instance_id", scene_prop_slot_in_use, 1),
          
          (call_script, "script_find_or_create_scene_prop_instance", ":hit_detect_back", 0, 0, 0),
          (assign, ":boat_hit_detect_back_instance_id", reg0),
          (scene_prop_set_slot,":boat_hit_detect_back_instance_id", scene_prop_slot_parent_prop,":boat_instance_id"),
          (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_child_prop3,":boat_hit_detect_back_instance_id"),
          (scene_prop_set_slot,":boat_hit_detect_back_instance_id", scene_prop_slot_is_active,1),
          (scene_prop_set_slot,":boat_hit_detect_back_instance_id", scene_prop_slot_in_use, 1),
         
          (position_move_y, pos49, ":y_rudder_offset"),
         
          (call_script, "script_find_or_create_scene_prop_instance", ":rudder_control", 0, 0, 0),
          (assign, ":boat_rudder_instance_id", reg0),
          (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_parent_prop,":boat_instance_id"),
          (scene_prop_set_slot,":boat_instance_id", scene_prop_slot_child_prop1,":boat_rudder_instance_id"),
          (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_y_value,":y_rudder_offset"),
          (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_is_active,1),
          (scene_prop_set_slot,":boat_rudder_instance_id", scene_prop_slot_in_use, 1),
        (try_end),
      (try_end),


      # intialise royale boxes
      (call_script,"script_royale_initialise_boxes"),
      
      
      
      # initialise prop destruction slots.
      (assign,":end_wall_cond",mm_destructible_props_end),
      (try_for_range,":wall_type",mm_destructible_props_begin,":end_wall_cond"),
        (scene_prop_get_num_instances, ":end_cond2", ":wall_type"),
        (gt,":end_cond2",0), # we even have a prop?
        
        (call_script,"script_get_prop_kind_size_and_shift",":wall_type"),
        (eq,reg0,1), # is_ok :)
        (assign,":wall_height",reg1),
        (assign,":wall_width",reg2),
        (assign,":wall_length",reg3),
        (assign,":move_height_to_center",reg4),
        (assign,":move_width_to_center",reg5),
        (assign,":move_length_to_center",reg6),
        (assign,":rotate_z_90",reg7),
        (assign,":wall_height_offset",reg8),
        (assign,":wall_width_offset",reg9),
        (assign,":wall_length_offset",reg10),
        (assign,":inverse_width_movement",reg11),
        
        (call_script,"script_get_destruction_properties_of_object",":wall_type"),
        (assign,":smoke_type",reg0),
        (assign,":smoke_type2",reg1),
        (assign,":particles_type",reg2),
        (assign,":smoke_strength",reg3),
        (assign,":sound_id",reg4),
        (assign,":pile_prop_begin",reg5),
        (assign,":pile_prop_end",reg6),
        
        (try_for_prop_instances, ":wall_id", ":wall_type"),
          (try_begin), # set size sluts.
            (call_script,"script_get_prop_scaled_size",":wall_id"
              ,":wall_height", ":wall_width", ":wall_length"
              ,":wall_height_offset",":wall_width_offset",":wall_length_offset"),
            (eq,reg1,1), # is ok :)
            (assign,":cur_wall_height",reg2),
            (assign,":cur_wall_width",reg3),
            (assign,":cur_wall_length",reg4),
            (assign,":cur_max_wall_length",reg5),
            (assign,":cur_wall_height_offset",reg6),
            (assign,":cur_wall_width_offset",reg7),
            (assign,":cur_wall_length_offset",reg8),
            
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_height,":cur_wall_height"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_width,":cur_wall_width"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_length,":cur_wall_length"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_move_height_to_center,":move_height_to_center"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_move_width_to_center,":move_width_to_center"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_move_length_to_center,":move_length_to_center"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_rotate_z_90,":rotate_z_90"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_height_offset,":cur_wall_height_offset"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_width_offset,":cur_wall_width_offset"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_wall_length_offset,":cur_wall_length_offset"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_inverse_width_movement,":inverse_width_movement"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_max_length,":cur_max_wall_length"),
          (try_end),
          
          (try_begin), # store the hit effect properties.
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_smoke_type,":smoke_type"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_smoke_type2,":smoke_type2"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_particles_type,":particles_type"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_smoke_strength,":smoke_strength"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_sound_id,":sound_id"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_pile_prop_begin,":pile_prop_begin"),
            (scene_prop_set_slot,":wall_id",scene_prop_slot_destruct_pile_prop_end,":pile_prop_end"),
          (try_end),
          
          # predefine the future replacement props.
          (assign,":next_kind",":wall_type"),
          (try_for_range,":cur_index",0,10), # 10 loops
            (try_begin),
              (gt,":next_kind",-1),
              (call_script,"script_get_next_destruction_stage_prop_kind",":next_kind"),
              (assign,":next_kind",reg1),
            (try_end),
            #(gt,":next_kind",-1),
            
            (store_add,":slot_index",":cur_index",scene_prop_slot_destruct_next_stage_1),
            (scene_prop_set_slot,":wall_id",":slot_index",":next_kind"),
          (try_end),
       (try_end),
     (try_end),
      
    (try_end),
   ]),
  
  # script_royale_initialise_cannons
  # Input: none
  # Output: none
  ("royale_initialise_cannons",
   [
    (try_begin),
      #Royale cannons spawn here, then later they get replaced with usable ones.
      
      (try_for_range,":spawn_type", "spr_royale_cannon_spawn_field", "spr_royale_props_end"),
        (try_for_prop_instances, ":instance_id", ":spawn_type"),
          
          (prop_instance_get_variation_id,":cannon_type",":instance_id"),
          (prop_instance_get_variation_id_2,":spawn_chance",":instance_id"),
          
          (store_random_in_range,":cur_chance",0,101), # chance percent 0-100
          
          # get pos of the spawn point
          (prop_instance_get_starting_position, pos49, ":instance_id"), # starting position cause on reload not move that shit again.
          
          # then clean it up
          (call_script, "script_clean_up_prop_instance", ":instance_id"),

          # check chance of spawning and go on.
          (this_or_next|eq,":spawn_chance",0), # if chance is 0 always spawn
          (le,":cur_chance",":spawn_chance"), # random number is in the percent range
          
          
              # ("mm_cannon_12pdr" ,sokf_moveable,"cannon_12pdr" ,"0" , []),
    # ("mm_cannon_howitzer" ,sokf_moveable,"cannon_howitzer" ,"0" , []),
    # ("mm_cannon_mortar" ,sokf_moveable,"cannon_mortar" ,"0" , []),
    # ("mm_cannon_fort" ,sokf_moveable,"cannon_fort" ,"0" , []),
    # ("mm_cannon_naval" ,sokf_moveable,"cannon_naval" ,"0" , []),
    # ("mm_cannon_carronade" ,sokf_moveable,"cannon_carronade" ,"0" , []),
    # ("mm_cannon_swievel" ,sokf_moveable,"cannon_swievel" ,"0" , []),
    # ("mm_cannon_rocket" ,sokf_moveable,"rocket_launcher" ,"0" , []),
    # ("mm_cannons_end", 0,"0" ,"0" , []),
          
          #lets determine type:
          # Var 1; Cannon type: 0:random 1:12pdr 2:howitzer 3:mortar 4:rocket
          (try_begin),
            (eq,":spawn_type", "spr_royale_cannon_spawn_field"),
            
            (try_begin),
              (eq,":cannon_type",0),
              (store_random_in_range,":cannon_type",1,5), # random cannon type.
            (try_end),
            (try_begin),
              (eq,":cannon_type",4), # if four put it to 8, being the rocket n all
              (assign,":cannon_type",8),
            (try_end),
          (else_try),
            (eq,":spawn_type", "spr_royale_cannon_spawn_fort"),
            
            (assign,":cannon_type",4),
          (else_try), # Var 1; Cannon type: 0:random 1:naval 2:carronade
            (eq,":spawn_type", "spr_royale_cannon_spawn_naval"),
            
            (try_begin),
              (eq,":cannon_type",0),
              (store_random_in_range,":cannon_type",1,3), # random cannon type.
            (try_end),
            
            (val_add,":cannon_type",4),
          (else_try),
            (eq,":spawn_type", "spr_royale_cannon_spawn_swievel"),
            
            (assign,":cannon_type",7),
          (try_end),
          
          (assign,":prop_type_to_spawn","spr_mm_cannon_12pdr"),
          (val_add,":prop_type_to_spawn",":cannon_type"), #add the type to get correct proptype
          (val_sub,":prop_type_to_spawn",1), # minus one because we start on 0 not 1.
          
          (call_script, "script_find_or_create_scene_prop_instance", ":prop_type_to_spawn", 0, 0, 0),
          (assign,":new_prop",reg0),
          (scene_prop_set_slot,":instance_id",scene_prop_slot_replaced_by,":new_prop"),
          (scene_prop_set_slot,":new_prop",scene_prop_slot_replacing,":instance_id"),
          (scene_prop_set_slot,":new_prop",scene_prop_slot_is_spawned,0), # not spawned.
        (try_end),
      (try_end),
    (try_end),
   ]),
  
  
  # script_royale_initialise_boxes
  # Input: none
  # Output: none
  ("royale_initialise_boxes",
   [
    (try_begin),
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making), # dont remove boxes when editing
      
      #royale, for mapper placed specific boxes, determine their random chance, and remove them randomly.
      (try_for_range,":item_spawn_type", "spr_royale_weapon_spawn_musket", "spr_royale_ammo_spawn"),
        (try_for_prop_instances, ":cur_instance_id", ":item_spawn_type", somt_object),
          (neg|scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1), # if added by mapper
          
          (prop_instance_get_variation_id_2,":spawn_chance",":cur_instance_id"),
          
          (neq,":spawn_chance",0), # if chance is 0 dont remove it ofc.
          
          (store_random_in_range,":cur_chance",0,101), # chance percent 0-100
          
          (gt,":cur_chance",":spawn_chance"), # only if number is above the spawn chance
           
           #remove it!
          (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
        (try_end),
      (try_end),
      
      # same for ammo boxes.
      (try_for_range,":item_spawn_type", "spr_royale_ammo_spawn_musket", "spr_royale_horse_spawn"),
        (try_for_prop_instances, ":cur_instance_id", ":item_spawn_type", somt_object),
          (neg|scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1), # if added by mapper
          
          (prop_instance_get_variation_id_2,":spawn_chance",":cur_instance_id"),
          
          (neq,":spawn_chance",0), # if chance is 0 dont remove it ofc.
          
          (store_random_in_range,":cur_chance",0,101), # chance percent 0-100
          
          (gt,":cur_chance",":spawn_chance"), # only if number is above the spawn chance
           
           #remove it!
          (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
        (try_end),
      (try_end),
      
      
      # Battle Royale Spawn usable props for the items.
      # Weapons
      (try_for_prop_instances, ":weaponspawn_instance_id", "spr_royale_weapon_spawn"),
        (assign,":weaponspawn_instance_id",":weaponspawn_instance_id"),
        (call_script, "script_royale_spawn_box",":weaponspawn_instance_id",1),
      (try_end),
      
      #ammo
      (try_for_prop_instances, ":weaponspawn_instance_id", "spr_royale_ammo_spawn"),
        (assign,":weaponspawn_instance_id",":weaponspawn_instance_id"),
        (call_script, "script_royale_spawn_box",":weaponspawn_instance_id",2),
      (try_end),
      
      
      #Horses.
      (try_for_range,":horse_spawn_type", "spr_royale_horse_spawn", "spr_royale_cannon_spawn_field"),
        (try_for_prop_instances, ":cur_instance_id", ":horse_spawn_type"),
          
          (prop_instance_get_variation_id,":horse_type",":cur_instance_id"),
          (prop_instance_get_variation_id_2,":spawn_chance",":cur_instance_id"),
          
          (store_random_in_range,":cur_chance",0,101), # chance percent 0-100
          
          # get pos of the spawn point
          (prop_instance_get_starting_position, pos49, ":cur_instance_id"), # starting position cause on reload not move that shit again.
          
          # then clean it up
          (call_script, "script_clean_up_prop_instance", ":cur_instance_id"),
          
          # check chance of spawning and go on.
          (this_or_next|eq,":spawn_chance",0), # if chance is 0 always spawn
          (le,":cur_chance",":spawn_chance"), # random number is in the percent range
          
          #lets determine type:
          # Var 1; Horse type: 0:random 1:Light 2:Middle 3:Heavy 4:Artycarry
          (try_begin),
            (eq,":horse_spawn_type", "spr_royale_horse_spawn"),
            
            (try_begin),
              (eq,":horse_type",0),
              (store_random_in_range,":horse_type",royale_item_class_horse_light,royale_item_class_horse_end), # random weapon type.
            (try_end),
          (else_try),
            # not random.
            (store_sub,":horse_type",":horse_spawn_type","spr_royale_horse_spawn"),
          (try_end),

          (assign,":troop_to_use","trp_royale_item_class_horse_light_dummy"),
          (val_add,":troop_to_use",":horse_type"),
          (val_sub,":troop_to_use",1), # substract one or we start one after :P.
          
          # add ze goodies.
          (troop_get_slot,":horse_count",":troop_to_use",0),
          (val_add,":horse_count",1), # add one for the max loop upperbound which should be upper +1
          
          (store_random_in_range,":random_tropslot",1,":horse_count"), # random slot in the troop
          (troop_get_slot,":horse_id_to_spawn",":troop_to_use",":random_tropslot"), # get its content item id
          
          (try_begin),
            (gt,":horse_id_to_spawn",0),
            (set_spawn_position, pos49),
            (spawn_horse, ":horse_id_to_spawn", 0),
            (assign,":horse_agent",reg0),
            (agent_is_active,":horse_agent"),
            (agent_is_alive,":horse_agent"),
            (agent_set_slot, ":horse_agent", slot_agent_royale_horse, 1),
            (agent_set_scripted_destination,":horse_agent",pos49,1,1),
           # (agent_start_running_away,":horse_agent"),
            #(agent_stop_running_away,":horse_agent"),
          (try_end),
        (try_end),
      (try_end),
      

    (try_end),
   ]),
   
   
  # script_royale_spawn_box
  # Input: arg1 = weaponspawn_instance_id
  # Input: arg2 = item_type (1 weapon 2 ammo)
  # Output: none
  ("royale_spawn_box",
   [
    (store_script_param_1,":weaponspawn_instance_id"),
    (store_script_param_2,":item_type"),
   
    (try_begin),
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_scene_making), # dont spawn boxes when editing
      (prop_instance_is_valid,":weaponspawn_instance_id"),
      
      (prop_instance_get_variation_id,":weapon_type",":weaponspawn_instance_id"),
      (prop_instance_get_variation_id_2,":spawn_chance",":weaponspawn_instance_id"),
      
      (store_random_in_range,":cur_chance",0,101), # chance percent 0-100
      
      # get pos of the spawn point
      (prop_instance_get_starting_position, pos49, ":weaponspawn_instance_id"), # starting position cause on reload not move that shit again.
      
      # then clean it up
      (call_script, "script_clean_up_prop_instance", ":weaponspawn_instance_id"),
      
      # (set_fixed_point_multiplier,100),
      
      # (copy_position,pos49,pos30), # pos49 is prop pos.
      # (prop_instance_get_position, pos31, ":weaponspawn_instance_id"), # current position
      # (get_distance_between_positions, ":cur_distance", pos30, pos31),
      # (try_begin),
        # (gt,":cur_distance", 100), # if bigger distance than a meter its not removed yet. so move it underground.
        # (position_move_z,pos30,-4000),
        # (prop_instance_stop_animating,":weaponspawn_instance_id"),
        # (prop_instance_set_position,":weaponspawn_instance_id",pos30),
      # (try_end),

      # check chance of spawning and go on.
      (this_or_next|eq,":spawn_chance",0), # if chance is 0 always spawn
      (le,":cur_chance",":spawn_chance"), # random number is in the percent range
      
      #lets determine type:
      # Var 1; weapon type: 0:random 1:Musket 2:Pistol 3:Carabine/rifle 4:smallsword/knife 5:bigsword 6:bottle 7:axe 8:Lance/pike/spear 9:clubs 10:tools(shovel/hammer/bandage/spyglass) 11:ramrod 12:lighter
      (try_begin),#hotfix
        (eq,":weapon_type",0),
        (try_begin),
          (eq,":item_type",1),
          (store_random_in_range,":weapon_type",royale_item_class_musket,royale_item_class_ammo), # random weapon type.
        (else_try),
          (store_random_in_range,":weapon_type",royale_item_class_ammo_musket,royale_item_class_end), # random ammo type. why only ammo pistol and not also musket ammo?   this is the dice roll for if you get one or the other, you are suppose to be able to get both, yes? Var 1; Ammo type: 0:random 1:Musket 2:Pistol
        (try_end),
        
        (assign,":prop_type_to_spawn","spr_royale_weapon_spawn_musket"),
        #(val_add,":prop_type_to_spawn",":weapon_type"), #add the type to get correct proptype
        #(val_sub,":prop_type_to_spawn",1), # minus one because we start on 0 not 1.      
        #(call_script, "script_find_or_create_scene_prop_instance", ":prop_type_to_spawn", 0, 0, 0),
      (else_try),
        (eq,":item_type",1),
        (assign,":prop_type_to_spawn","spr_royale_weapon_spawn_musket"),
       # (val_add,":prop_type_to_spawn",":weapon_type"), #add the type to get correct proptype
       # (val_sub,":prop_type_to_spawn",1), # minus one because we start on 0 not 1.
        #(call_script, "script_find_or_create_scene_prop_instance", ":prop_type_to_spawn", 0, 0, 0),        
      (else_try),
        (assign,":prop_type_to_spawn","spr_royale_ammo_spawn_musket"),
        #(val_add,":prop_type_to_spawn",":weapon_type"), #add the type to get correct proptype
        #(val_sub,":prop_type_to_spawn",1), # minus one because we start on 0 not 1.
       # (call_script, "script_find_or_create_scene_prop_instance", ":prop_type_to_spawn", 0, 0, 0),   
      (try_end),
      
     # (assign,":prop_type_to_spawn","spr_royale_weapon_spawn_musket"),
      (val_add,":prop_type_to_spawn",":weapon_type"), #add the type to get correct proptype
      (val_sub,":prop_type_to_spawn",1), # minus one because we start on 0 not 1.
      (call_script, "script_find_or_create_scene_prop_instance", ":prop_type_to_spawn", 0, 0, 0),
    (try_end),
   ]),
   
  # script_generate_bits_for_cannon_instance
  # Input: arg1 = instance_id
  # Input: arg2 = use_given_position
  # Input: arg3 = dont_recoil
  # Output: reg0 = ok?
  # Output: reg1 = cannon_wood_instance
  ("generate_bits_for_cannon_instance",
   [
    (store_script_param, ":instance_id", 1),
    (store_script_param, ":use_given_position", 2),
    (store_script_param, ":dont_recoil", 3),
    
    (assign, reg0, 0),
    (assign,":cannon_wood",-1),
    (try_begin),
      (prop_instance_is_valid, ":instance_id"),

      #(scene_prop_slot_eq, ":instance_id", scene_prop_slot_child_prop1, 0), # No childs lets set them.
      (prop_instance_get_scene_prop_kind, ":cannon_type", ":instance_id"),
      (try_begin),
        (eq,":use_given_position",0),
        (prop_instance_get_position, pos30, ":instance_id"),
      (try_end),
      (prop_instance_get_variation_id,":z_rotation_limit",":instance_id"),
      (prop_instance_get_variation_id_2,":linked_wall_index",":instance_id"),
      
      (call_script, "script_clean_up_prop_instance", ":instance_id"), # Lets remove this dummy cannon.
      
      (assign,":wood_type",-1),
      (assign,":wheel_type",-1),
      (assign,":barrel_type",-1),
      (assign,":static_type",-1),
      (assign,":ball_type","spr_mm_load_cartridge_button"),
      (assign,":push_type",-1),
      (assign,":has_recoil",0),
      (assign,":can_be_limbered",0),
      (assign,":ammo_box_type","spr_mm_ammobox_cannon"),
      (assign,":loaded_ammo_type",-1),
      (assign,":barrel_x",0),
      (assign,":barrel_y",0),
      (assign,":barrel_z",0),
      (assign,":limber_x",0),
      (assign,":limber_y",0),
      (assign,":limber_z",0),
      (assign,":aim_x",0),
      (assign,":aim_y",0),
      (assign,":aim_z",0),
      (assign,":fire_x",0),
      (assign,":fire_y",0),
      (assign,":fire_z",0),
      (assign,":ball_x",0),
      (assign,":ball_y",0),
      (assign,":ball_z",0),
      (assign,":reload_x",0),
      (assign,":reload_y",0),
      (assign,":reload_z",0),
      (assign,":static_x",0),
      (assign,":static_y",0),
      (assign,":static_z",0),
      (assign,":push_x",0),
      (assign,":push_y",0),
      (assign,":push_z",0),
      (assign,":platform_x",-285),
      (assign,":platform_y",0),
      (assign,":ammobox_x",-8),
      (assign,":ammobox_y",142),
      (assign,":ammobox_z",0),
      (assign,":loaded_ammo_x",0),
      (assign,":loaded_ammo_y",0),
      (assign,":loaded_ammo_z",0),      
      (assign,":ground_dist",0),
      (assign,":predefined_z_rotation_limit",0),
      (try_begin),
        (eq, ":cannon_type", "spr_mm_cannon_12pdr"),
        (assign,":wood_type","spr_mm_cannon_12pdr_wood"),
        (assign,":wheel_type","spr_mm_cannon_12pdr_wheels"),
        (assign,":barrel_type","spr_mm_cannon_12pdr_barrel"),
        (assign,":push_type","spr_mm_12pdr_push_button"),
        (assign,":can_be_limbered",1),
        (assign,":has_recoil",1),
        (assign,":barrel_x",14),
        (assign,":barrel_z",36),
        (assign,":limber_x",-222),
        (assign,":limber_z",-42),
        (assign,":aim_x",-91), # -101
        (assign,":fire_x",-78),
        (assign,":fire_z",16),
        (assign,":ball_x",92), # 102
        (assign,":reload_x",92), # 102
        (assign,":ground_dist",66),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_howitzer"),
        (assign,":wood_type","spr_mm_cannon_howitzer_wood"),
        (assign,":wheel_type","spr_mm_cannon_howitzer_wheels"),
        (assign,":barrel_type","spr_mm_cannon_howitzer_barrel"),
        (assign,":push_type","spr_mm_howitzer_push_button"),
        (assign,":can_be_limbered",1),
        (assign,":ammo_box_type","spr_mm_ammobox_howitzer"),
        (assign,":has_recoil",1),
        (assign,":barrel_x",16),
        (assign,":barrel_z",38),
        (assign,":limber_x",-229),
        (assign,":limber_z",-42),
        (assign,":aim_x",-46), #  -56
        (assign,":fire_x",-35),
        (assign,":fire_z",17),
        (assign,":ball_x",30), # 40
        (assign,":reload_x",30), # 40
        (assign,":ground_dist",66),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_mortar"),
        (assign,":wood_type","spr_mm_cannon_mortar_wood"),
        (assign,":barrel_type","spr_mm_cannon_mortar_barrel"),
        (assign,":static_type","spr_mm_cannon_mortar_static"),
        (assign,":ball_type","spr_mm_load_bomb_button"),
        (assign,":ammo_box_type","spr_mm_bomb_button"),
        (assign,":loaded_ammo_type","spr_mm_cannon_mortar_loaded_ammo"),
        (assign,":loaded_ammo_x",9),
        (assign,":loaded_ammo_z",-9), 
        (assign,":aim_x",-26),
        (assign,":fire_x",-10),
        (assign,":fire_z",20),
        (assign,":ball_x",36), # 41
        (assign,":ball_z",36), # 41
        (assign,":reload_x",36),# 41
        (assign,":reload_z",36),# 41
        (assign,":ammobox_x",0),
        (assign,":ammobox_y",154),
        (assign,":platform_x",-120),
        (assign,":ground_dist",50),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_fort"),
        (assign,":wood_type","spr_mm_cannon_fort_wood"),
        (assign,":wheel_type","spr_mm_cannon_fort_wheels"),
        (assign,":barrel_type","spr_mm_cannon_fort_barrel"),
        (assign,":static_type","spr_mm_cannon_fort_static"),
        (assign,":push_type","spr_mm_fort_push_button"),
        (assign,":has_recoil",1),
        (assign,":barrel_z",78),
        (assign,":aim_x",-88), # -98
        (assign,":fire_x",-76),
        (assign,":fire_z",17),
        (assign,":ball_x",90), # 100
        (assign,":reload_x",90), # 100
        (assign,":platform_x",-50),
        (assign,":platform_y",-64),
        (assign,":push_x",-120),
        (assign,":push_z",30),
        (assign,":predefined_z_rotation_limit",28),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_naval"),
        (assign,":wood_type","spr_mm_cannon_naval_wood"),
        (assign,":wheel_type","spr_mm_cannon_naval_wheels"),
        (assign,":barrel_type","spr_mm_cannon_naval_barrel"),
        (assign,":push_type","spr_mm_naval_push_button"),
        (assign,":has_recoil",1),
        (assign,":aim_x",-121), # -131
        (assign,":fire_x",-96),
        (assign,":fire_z",23),
        (assign,":ball_x",122), # 132
        (assign,":reload_x",122), # 132
        (assign,":platform_x",-200),
        (assign,":ground_dist",68),
        (assign,":predefined_z_rotation_limit",40),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_carronade"),
        (assign,":wood_type","spr_mm_cannon_carronade_wood"),
        (assign,":barrel_type","spr_mm_cannon_carronade_barrel"),
        (assign,":barrel_x",-42),
        (assign,":barrel_z",27),
        (assign,":aim_x",-69), # -79
        (assign,":aim_z",24),
        (assign,":fire_x",-47),
        (assign,":fire_z",48),
        (assign,":ball_x",58), # 68
        (assign,":ball_z",24),
        (assign,":reload_x",58), # 68
        (assign,":reload_z",24),
        (assign,":platform_x",-240),
        (assign,":predefined_z_rotation_limit",40),
        #(assign,":ground_dist",0),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_swievel"),
        (assign,":wood_type","spr_mm_cannon_swievel_wood"),
        (assign,":barrel_type","spr_mm_cannon_swievel_barrel"),
        (assign,":aim_x",-72), # -82
        (assign,":aim_z",-10),
        (assign,":fire_x",-48),
        (assign,":fire_z",8),
        (assign,":ball_x",55), # 65
        (assign,":reload_x",55), # 65
        (assign,":ammobox_x",-14),
        (assign,":ammobox_y",144),
        (assign,":platform_x",-160),
        (assign,":ground_dist",50),
      (else_try),
        (eq, ":cannon_type", "spr_mm_cannon_rocket"),
        (assign,":wood_type","spr_mm_cannon_rocket_wood"),
        (assign,":barrel_type","spr_mm_cannon_rocket_barrel"),
        (assign,":static_type","spr_mm_cannon_rocket_static"),
        (assign,":ball_type","spr_mm_load_rocket_button"),
        (assign,":can_be_limbered",2),
        (assign,":ammo_box_type",0),  
        (assign,":loaded_ammo_type","spr_mm_cannon_rocket_loaded_ammo"),
        (assign,":loaded_ammo_x",4),
        (assign,":loaded_ammo_z",14), 
        (assign,":limber_z",-80),
        (assign,":aim_x",-40), # -50
        (assign,":aim_z",14),
        (assign,":fire_z",8),
        (assign,":ball_x",42), # 52
        (assign,":ball_z",14),
        (assign,":reload_x",42),# 52
        (assign,":reload_z",14),
        (assign,":platform_x",-130),
        (assign,":ground_dist",175),
      (try_end),

      (set_fixed_point_multiplier, 100),
      (scene_prop_get_slot,":is_scaled",":instance_id",scene_prop_slot_is_scaled),
      (scene_prop_get_slot,":x_scale",":instance_id",scene_prop_slot_x_scale),
      (scene_prop_get_slot,":y_scale",":instance_id",scene_prop_slot_y_scale),
      (scene_prop_get_slot,":z_scale",":instance_id",scene_prop_slot_z_scale),
      
      (try_begin), # if all slots zere its not scaled its broken lol.
        (eq,":is_scaled",1),
        (eq,":x_scale",0),
        (eq,":y_scale",0),
        (eq,":z_scale",0),
        (assign,":is_scaled",0),
      (try_end),
      
      
      (try_begin), # dont move swievel gun.
        (neq, ":cannon_type", "spr_mm_cannon_swievel"),
        (position_set_z_to_ground_level,pos30),
      (try_end),
      
      (val_mul, ":ground_dist", ":z_scale"),              
      (val_div, ":ground_dist", 1000),
      (position_move_z,pos30,":ground_dist"),
      
      (copy_position,pos49,pos30), # pos49 is prop pos.
      # (position_set_scale_x,pos49, ":x_scale"),
      # (position_set_scale_y,pos49, ":y_scale"),
      # (position_set_scale_z,pos49, ":z_scale"),
      
      (assign,":cannon_wood",-1),
      (assign,":cannon_wheels",-1),
      (assign,":cannon_barrel",-1),
      (assign,":cannon_static",-1),
      (try_for_range,":loop_num", 1, 5),
        (try_begin),
          (eq,":loop_num",1),
          (assign,":cannon_part_type",":wood_type"),
        (else_try),
          (eq,":loop_num",2),
          (assign,":cannon_part_type",":wheel_type"),
        (else_try),
          (eq,":loop_num",3),
          (assign,":cannon_part_type",":barrel_type"),
        (else_try),
          (eq,":loop_num",4),
          (assign,":cannon_part_type",":static_type"),
        (try_end),
        
        (try_begin),
          (eq,":is_scaled",1),
          (call_script, "script_find_or_create_scene_prop_instance", ":cannon_part_type", 0, 0, 1, ":x_scale",":y_scale",":z_scale"),
        (else_try),
          (call_script, "script_find_or_create_scene_prop_instance", ":cannon_part_type", 0, 0, 0),
        (try_end),
        (assign, ":cannon_part_instance", reg0),
        
        (try_begin),
          (eq,":cannon_part_type",":wood_type"),
          (assign,":cannon_wood",":cannon_part_instance"),
        (else_try),
          (eq,":cannon_part_type",":wheel_type"),
          (assign,":cannon_wheels",":cannon_part_instance"),
        (else_try),
          (eq,":cannon_part_type",":barrel_type"),
          (assign,":cannon_barrel",":cannon_part_instance"),
        (else_try),
          (eq,":cannon_part_type",":static_type"),
          (assign,":cannon_static",":cannon_part_instance"),
        (try_end),
      (try_end),
      
      (try_begin),
        #(gt,":cannon_wood",-1),
        (prop_instance_is_valid,":cannon_wood"), # patch1115 fix 18/17
        
        (try_begin),# no z limit assigned in prop var values.
          (eq,":z_rotation_limit",0), 
          (assign,":z_rotation_limit",":predefined_z_rotation_limit"),
        (try_end),
        
        (scene_prop_set_slot,":instance_id", scene_prop_slot_replaced_by, ":cannon_wood"), # replaced by the wood part
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_replacing, ":instance_id"), # wood is replacing that cannon
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_ground_offset, ":ground_dist"),
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_z_rotation_limit, ":z_rotation_limit"),
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_linked_prop, ":linked_wall_index"),
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_x_extra, ":fire_x"), # extra values for smoke from frizzle.
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_y_extra, ":fire_y"),
        (scene_prop_set_slot,":cannon_wood", scene_prop_slot_z_extra, ":fire_z"),
        
        (assign, ":cur_slot", scene_prop_slot_child_prop1),
        
        (try_begin),
          #(gt,":cannon_wheels",-1),
          (prop_instance_is_valid,":cannon_wheels"), #patch1115 18/18
          
          (scene_prop_set_slot,":cannon_wheels", scene_prop_slot_parent_prop, ":cannon_wood"),
          (scene_prop_set_slot,":cannon_wood", ":cur_slot", ":cannon_wheels"), # set parent's child prop. starting at scene_prop_slot_child_prop1
          (scene_prop_set_slot,":cannon_wheels", scene_prop_slot_is_active,1),
          (val_add, ":cur_slot", 1),
        (try_end),
        
        (assign,":button_main_piece",-1),
        (try_begin),
          #(gt,":cannon_barrel",-1),
          (prop_instance_is_valid,":cannon_barrel"), #patch1115 fix 18/19
          
          (assign,":button_main_piece",":cannon_barrel"),
          
          (try_begin),
            (eq,":is_scaled",1),
            (val_mul, ":barrel_x", ":x_scale"),            
            (val_mul, ":barrel_y", ":y_scale"),
            (val_mul, ":barrel_z", ":z_scale"),              
            (val_div, ":barrel_x", 1000),
            (val_div, ":barrel_y", 1000),
            (val_div, ":barrel_z", 1000),
          (try_end),
          
          (copy_position,pos31,pos30),
          (position_move_x, pos31,":barrel_x"),
          (position_move_y, pos31,":barrel_y"),
          (position_move_z, pos31,":barrel_z"),
         # (prop_instance_animate_to_position, ":cannon_barrel", pos31, 0),
          (try_begin),
            (prop_instance_is_animating, ":animating", ":cannon_barrel"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":cannon_barrel"),
          (try_end),
          (prop_instance_set_position,":cannon_barrel",pos31),
          
                # (copy_position,pos49,pos31), # pos49 is prop pos.
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_cooking_pole", 0),
                # (position_rotate_x, pos49, 90), 
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_cooking_pole", 0),
          
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_x_value, ":barrel_x"),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_y_value, ":barrel_y"),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_z_value, ":barrel_z"),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_parent_prop, ":cannon_wood"),
          (scene_prop_set_slot,":cannon_wood", ":cur_slot", ":cannon_barrel"),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_is_active,1),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_x_extra, ":fire_x"), # extra values for smoke from frizzle.
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_y_extra, ":fire_y"),
          (scene_prop_set_slot,":cannon_barrel", scene_prop_slot_z_extra, ":fire_z"),
          
          
          (val_add, ":cur_slot", 1),
        (else_try),
          (assign,":button_main_piece",":cannon_wood"),
        (try_end),
        
        # attach static prop
        (try_begin),
          #(gt,":cannon_static",-1),
          (prop_instance_is_valid,":cannon_static"), #patch1115 18/20
          
          (try_begin),
            (eq,":is_scaled",1),
            (val_mul, ":static_x", ":x_scale"),            
            (val_mul, ":static_y", ":y_scale"),
            (val_mul, ":static_z", ":z_scale"),              
            (val_div, ":static_x", 1000),
            (val_div, ":static_y", 1000),
            (val_div, ":static_z", 1000),
          (try_end),
          
          (copy_position,pos49,pos30),
          (position_move_x, pos49,":static_x"),
          (position_move_y, pos49,":static_y"),
          (position_move_z, pos49,":static_z"),
          (try_begin),
            (prop_instance_is_animating, ":animating", ":cannon_static"),
            (eq,":animating",1),
            (prop_instance_stop_animating, ":cannon_static"),
          (try_end),
          (prop_instance_set_position,":cannon_static",pos49),
          #(prop_instance_animate_to_position, ":cannon_static", pos49, 0),
          
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_x_value, ":static_x"),
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_y_value, ":static_y"),
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_z_value, ":static_z"),
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_parent_prop, ":cannon_wood"),
          (scene_prop_set_slot,":cannon_wood", ":cur_slot", ":cannon_static"),
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_is_active,1),
          # Set ignore inherited movement to true.
          (scene_prop_set_slot,":cannon_static", scene_prop_slot_ignore_inherit_movement,1),
          
          (val_add, ":cur_slot", 1),
        (try_end),
        
        # attach loaded ammo object to the cannon (to display when its loaded)
        (assign,":loaded_ammo_instance",-1),
        (try_begin),
          (gt,":loaded_ammo_type",-1),
          
          (try_begin),
            (eq,":is_scaled",1),
            (val_mul, ":loaded_ammo_x", ":x_scale"),
            (val_mul, ":loaded_ammo_y", ":y_scale"),
            (val_mul, ":loaded_ammo_z", ":z_scale"),
            (val_div, ":loaded_ammo_x", 1000),
            (val_div, ":loaded_ammo_y", 1000),
            (val_div, ":loaded_ammo_z", 1000),
          (try_end),
          
          (copy_position,pos49,pos30),
          (position_move_x, pos49,":loaded_ammo_x"),
          (position_move_y, pos49,":loaded_ammo_y"),
          (position_set_z, pos49,-3000),
          (call_script, "script_find_or_create_scene_prop_instance", ":loaded_ammo_type", 0, 0, 0),
          (assign, ":loaded_ammo_instance", reg0),
          
          (scene_prop_set_slot,":loaded_ammo_instance", scene_prop_slot_x_value,":loaded_ammo_x"),
          (scene_prop_set_slot,":loaded_ammo_instance", scene_prop_slot_y_value,":loaded_ammo_y"),
          (scene_prop_set_slot,":loaded_ammo_instance", scene_prop_slot_z_value,":loaded_ammo_z"),
          (scene_prop_set_slot,":loaded_ammo_instance", scene_prop_slot_parent_prop,":button_main_piece"),
          (scene_prop_set_slot,":button_main_piece",":cur_slot",":loaded_ammo_instance"),
          (scene_prop_set_slot,":loaded_ammo_instance", scene_prop_slot_is_active,0), # not active right now.
          
          (val_add, ":cur_slot", 1),
        (try_end),
        
        
        # attach platform
        (assign,":platform_instance",-1),
        (try_begin),
          # scale the distance
          (try_begin),
            (eq,":is_scaled",1),
            (val_mul, ":platform_x", ":x_scale"),            
            (val_mul, ":platform_y", ":y_scale"),            
            (val_div, ":platform_x", 1000),
            (val_div, ":platform_y", 1000),
          (try_end),
          
          (init_position,pos49),
          (position_get_rotation_around_z,":platform_z_rot",pos30),
          (position_copy_origin,pos49,pos30),
          (position_rotate_z,pos49,":platform_z_rot"),
          
          (position_move_x, pos49,":platform_x"),
          (position_move_y, pos49,":platform_y"),
          (position_set_z, pos49,-3000),
          (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_cannon_aim_platform", 0, 0, 0),
          (assign, ":platform_instance", reg0),


          (scene_prop_set_slot,":platform_instance", scene_prop_slot_x_value,":platform_x"),
          (scene_prop_set_slot,":platform_instance", scene_prop_slot_y_value,":platform_y"),
          (scene_prop_set_slot,":platform_instance", scene_prop_slot_parent_prop,":cannon_wood"),
          (scene_prop_set_slot,":cannon_wood",":cur_slot",":platform_instance"),
          (scene_prop_set_slot,":platform_instance", scene_prop_slot_z_value,1),
          (scene_prop_set_slot,":platform_instance", scene_prop_slot_is_active,0), # not active right now.
          (scene_prop_set_slot,":platform_instance", scene_prop_slot_float_ground, 1),
           
          (val_add, ":cur_slot", 1),
        (try_end),
        
        # attach ammobox to the new spawned cannon.
        (assign,":ammobox_instance",-1),
        (try_begin),
          (gt,":ammo_box_type",0), # assigned
          
          (store_random_in_range,":random_rot",-4,5),
          
          (copy_position,pos49,pos30),
          (position_rotate_z,pos49,":random_rot"),
          (position_move_x, pos49,":ammobox_x"),
          (position_move_y, pos49,":ammobox_y"),
          (position_move_z, pos49,":ammobox_z"),
          (call_script, "script_find_or_create_scene_prop_instance", ":ammo_box_type", 0, 1, 0),
          (assign, ":ammobox_instance", reg0),
          
          
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_x_value, ":ammobox_x"),
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_y_value, ":ammobox_y"),
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_z_value, ":ammobox_z"),
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_z_rot, ":random_rot"),
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_parent_prop, ":cannon_wood"),
          (scene_prop_set_slot,":cannon_wood", ":cur_slot", ":ammobox_instance"),
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_is_active,1),
          # Set ignore inherited movement to true.
          (scene_prop_set_slot,":ammobox_instance", scene_prop_slot_ignore_inherit_movement,1),          
          
          (val_add, ":cur_slot", 1),
          
          (try_begin),
            (this_or_next|eq,":ammo_box_type","spr_mm_ammobox_cannon"),
            (eq,":ammo_box_type","spr_mm_ammobox_howitzer"),
            
            # for the normal ammo box create the 3 buttons.
            
            (assign, ":cur_box_slot", scene_prop_slot_child_prop1),
            
            (try_for_range,":cur_loop",0,2),
              (assign,":cur_x",0),
              (assign,":cur_y",0),
              (assign,":cur_z",50),
              (assign,":button_type",-1),
              (try_begin),
                (eq,":cur_loop",0),
                (try_begin),
                  (eq,":ammo_box_type","spr_mm_ammobox_cannon"),
                  (assign,":button_type","spr_mm_round_button"),
                (else_try),
                  (assign,":button_type","spr_mm_shell_button"),
                (try_end),
                (assign,":cur_x",-22),
              (else_try),
                (assign,":button_type","spr_mm_canister_button"),
                (assign,":cur_x",22),
              (try_end),
              
              (prop_instance_get_position,pos49,":ammobox_instance"),
              (position_move_x, pos49,":cur_x"),
              (position_move_y, pos49,":cur_y"),
              (position_move_z, pos49,":cur_z"),
              
              (call_script, "script_find_or_create_scene_prop_instance", ":button_type", 0, 0, 0),
              (assign, ":button_instance", reg0),

              (scene_prop_set_slot,":button_instance", scene_prop_slot_x_value, ":cur_x"),
              (scene_prop_set_slot,":button_instance", scene_prop_slot_y_value, ":cur_y"),
              (scene_prop_set_slot,":button_instance", scene_prop_slot_z_value, ":cur_z"),
              (scene_prop_set_slot,":button_instance", scene_prop_slot_parent_prop, ":ammobox_instance"),
              (scene_prop_set_slot,":ammobox_instance", ":cur_box_slot", ":button_instance"), # set parent's child prop. starting at scene_prop_slot_child_prop1
              #(scene_prop_set_slot,":button_instance", scene_prop_slot_in_use, 1),
              (scene_prop_set_slot,":button_instance", scene_prop_slot_is_active,1),
              #(scene_prop_set_slot,":button_instance", scene_prop_slot_ignore_inherit_movement,1),       
              (val_add,":cur_box_slot",1),
            (try_end),
          (try_end),
        (try_end),
        
        
        (try_for_range,":button_type", mm_cannon_button_types_begin, mm_cannon_button_types_end),
          (this_or_next|neq,":button_type","spr_mm_limber_button"),
          (eq,":can_be_limbered",1),
          (this_or_next|neq,":button_type","spr_mm_pickup_rocket_button"),
          (eq,":can_be_limbered",2),
          
          (this_or_next|eq,":has_recoil",1),
          (neg|is_between,":button_type","spr_mm_12pdr_push_button","spr_mm_round_button"),
          
          (assign,":continue",1),
          (try_begin),
            (eq,":has_recoil",1),
            (is_between,":button_type","spr_mm_12pdr_push_button","spr_mm_round_button"),
            (neq,":button_type",":push_type"),
            (assign,":continue",0),
          (try_end),
          
          (try_begin),
            (is_between,":button_type","spr_mm_load_cartridge_button","spr_mm_reload_button"), 
            (neq,":button_type",":ball_type"),
            (assign,":continue",0),
          (try_end),
          (eq,":continue",1),
          
          (assign,":cur_x",0),
          (assign,":cur_y",0),
          (assign,":cur_z",0),
          (assign,":parent_prop",-1),
          (assign,":is_active",1),
          (try_begin),
            (eq,":button_type","spr_mm_limber_button"),
            (assign,":cur_x",":limber_x"),
            (assign,":cur_y",":limber_y"),
            (assign,":cur_z",":limber_z"),
            (assign,":parent_prop",":cannon_wood"),
          (else_try),
            (eq,":button_type","spr_mm_pickup_rocket_button"),
            (assign,":cur_x",":limber_x"),
            (assign,":cur_y",":limber_y"),
            (assign,":cur_z",":limber_z"),
            (assign,":parent_prop",":cannon_wood"),
          (else_try),
            (eq,":button_type","spr_mm_aim_button"),
            (assign,":cur_x",":aim_x"),
            (assign,":cur_y",":aim_y"),
            (assign,":cur_z",":aim_z"),
            (assign,":parent_prop",":button_main_piece"),
            (assign,":is_active",0),
          (else_try),
            (is_between,":button_type","spr_mm_load_cartridge_button","spr_mm_reload_button"), 
            (assign,":cur_x",":ball_x"),
            (assign,":cur_y",":ball_y"),
            (assign,":cur_z",":ball_z"),
            (assign,":parent_prop",":button_main_piece"),
          (else_try),
            (eq,":button_type","spr_mm_reload_button"),
            (assign,":cur_x",":reload_x"),
            (assign,":cur_y",":reload_y"),
            (assign,":cur_z",":reload_z"),
            (assign,":parent_prop",":button_main_piece"),
            (assign,":is_active",0),
          (else_try),
            (is_between,":button_type","spr_mm_12pdr_push_button","spr_mm_round_button"),
            (assign,":cur_x",":push_x"),
            (assign,":cur_y",":push_y"),
            (assign,":cur_z",":push_z"),
            (assign,":parent_prop",":cannon_wood"),
            (assign,":is_active",0),
          (try_end),
          
          (try_begin),
            (eq,":is_scaled",1),
            (val_mul, ":cur_x", ":x_scale"),            
            (val_mul, ":cur_y", ":y_scale"),
            (val_mul, ":cur_z", ":z_scale"),              
            (val_div, ":cur_x", 1000),
            (val_div, ":cur_y", 1000),
            (val_div, ":cur_z", 1000),
          (try_end),

          (try_begin),
            (eq,":parent_prop",":cannon_wood"),
            (copy_position,pos32,pos30),
          (else_try),
            (eq,":parent_prop",":button_main_piece"),
            (copy_position,pos32,pos31),
          (try_end),
          
          (try_begin),
            (eq,":is_active",1),
            (position_move_x, pos32,":cur_x"),
            (position_move_y, pos32,":cur_y"),
            (position_move_z, pos32,":cur_z"),
          (else_try),
            (position_set_z, pos32,-3000),
          (try_end),
          
          (copy_position,pos49,pos32), # pos49 is prop pos.
          (try_begin),
            (eq,":button_type","spr_mm_bomb_button"), # scale that one.
            (eq,":is_scaled",1),
            (call_script, "script_find_or_create_scene_prop_instance", ":button_type", 0, 0, 1, ":x_scale",":y_scale",":z_scale"),
          (else_try),
            (call_script, "script_find_or_create_scene_prop_instance", ":button_type", 0, 0, 0),
          (try_end),
          (assign, ":button_instance", reg0),

          (scene_prop_set_slot,":button_instance", scene_prop_slot_x_value, ":cur_x"),
          (scene_prop_set_slot,":button_instance", scene_prop_slot_y_value, ":cur_y"),
          (scene_prop_set_slot,":button_instance", scene_prop_slot_z_value, ":cur_z"),
          (scene_prop_set_slot,":button_instance", scene_prop_slot_parent_prop, ":parent_prop"),
          (scene_prop_set_slot,":parent_prop", ":cur_slot", ":button_instance"), # set parent's child prop. starting at scene_prop_slot_child_prop1
          #(scene_prop_set_slot,":button_instance", scene_prop_slot_in_use, 1),
          (scene_prop_set_slot,":button_instance", scene_prop_slot_is_active,":is_active"),
          
          (val_add, ":cur_slot", 1),
        (try_end),
      (try_end),
      (assign, reg0, 1),
      
      (try_begin),
        (eq,":dont_recoil",0),
        (copy_position,pos57,pos30),
        (call_script,"script_recoil_cannon",":cannon_wood",1,1), # put it back defaultly.
      (try_end),
    (try_end),
    (assign,reg1,":cannon_wood"),
   ]),
  
  # script_attach_limber_to_horse
  # Input: arg1 = agent_id
  # Output: reg0 = limber wood instance id
  ("attach_limber_to_horse",
   [
    (store_script_param, ":agent_id", 1),
    
    (assign, reg0, 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":agent_id"),
      
      (set_fixed_point_multiplier, 100),
      
      (agent_get_position, pos49, ":agent_id"),
      
     # pos49 is prop pos.
      (position_move_z, pos49, 55),
      (call_script,"script_find_or_create_scene_prop_instance","spr_mm_limber_wood",0,0,0),
      (assign, ":wood_limber_instance", reg0),
      (position_move_y,pos49,-220),
      (call_script,"script_find_or_create_scene_prop_instance","spr_mm_limber_wheels",0,0,0),
      (assign, ":wheels_limber_instance", reg0),

      
      (scene_prop_set_slot,":wood_limber_instance", scene_prop_slot_carrier_agent, ":agent_id"),
      (scene_prop_set_slot,":wood_limber_instance", scene_prop_slot_z_value,55),
      (scene_prop_set_slot,":wood_limber_instance", scene_prop_slot_is_active,1),
      
      
      (scene_prop_set_slot,":wheels_limber_instance", scene_prop_slot_parent_prop,":wood_limber_instance"),
      (scene_prop_set_slot,":wood_limber_instance", scene_prop_slot_child_prop1,":wheels_limber_instance"),
      (scene_prop_set_slot,":wheels_limber_instance", scene_prop_slot_y_value,-220),
      (scene_prop_set_slot,":wheels_limber_instance", scene_prop_slot_is_active,1),
     
     
      
      # (agent_get_position, pos1, ":agent_id"),
      # (copy_position,pos57,pos1),
      # (position_move_z, pos57, 55),
      # (call_script, "script_prop_instance_animate_to_position_with_childs", ":wood_limber_instance", 0,0,0),
      
      
      (assign, reg0, ":wood_limber_instance"),
    (try_end),
   ]),
  
  # script_limber_cannon_to_horse
  # Input: arg1 = wood_limber_instance
  # Input: arg2 = cannon_instance_id
  # Output: reg0 = ok?
  ("limber_cannon_to_horse",
   [
    (store_script_param, ":wood_limber_instance", 1),
    (store_script_param, ":cannon_instance_id", 2),
    
    (assign, reg0, 0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid, ":wood_limber_instance"),
      (prop_instance_is_valid, ":cannon_instance_id"),
      
      (scene_prop_get_slot,":attached_cannon",":wood_limber_instance", scene_prop_slot_child_prop2),
      (le,":attached_cannon",0), # no other cannon attached?
      
      (set_fixed_point_multiplier, 100),
      
      (prop_instance_get_scene_prop_kind, ":cannon_kind_id", ":cannon_instance_id"),
      
      (call_script,"script_get_prop_instance_scale",":cannon_instance_id"),
      (assign, ":x_scale",reg0),
      (assign, ":y_scale",reg1),
      (assign, ":z_scale",reg2),
      (assign, ":has_scale",reg3),
      
      (assign,":cannon_limber_kind_id",-1),
      (assign,":cannon_wheels_kind_id",-1),
      (assign,":cannon_wheel_y",-222),
      (try_begin),
        (eq,":cannon_kind_id","spr_mm_cannon_12pdr_wood"),
        (assign,":cannon_limber_kind_id","spr_mm_cannon_12pdr_limber"),
        (assign,":cannon_wheels_kind_id","spr_mm_cannon_12pdr_limber_wheels"),
      (else_try),
        (eq,":cannon_kind_id","spr_mm_cannon_howitzer_wood"),
        (assign,":cannon_limber_kind_id","spr_mm_cannon_howitzer_limber"),
        (assign,":cannon_wheels_kind_id","spr_mm_cannon_howitzer_limber_wheels"),
      (try_end),
      
      (gt,":cannon_limber_kind_id",-1),
      
      (prop_instance_get_position, pos49, ":wood_limber_instance"),
      (position_get_rotation_around_z,":cur_z_rot",pos49),
      
     # pos49 is prop pos.
      (position_move_y,pos49,-220),
      (position_move_z,pos49,34),
      (call_script,"script_find_or_create_scene_prop_instance",":cannon_limber_kind_id",0,0,0),
      (assign, ":cannon_limber_instance", reg0),
      (try_begin),
        (gt,":cannon_wheels_kind_id",-1),
        
        (position_move_y,pos49,":cannon_wheel_y"),
        (call_script,"script_find_or_create_scene_prop_instance",":cannon_wheels_kind_id",0,0,0),
        (assign, ":cannon_wheels_instance", reg0),
      (try_end),
     
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_parent_prop, ":wood_limber_instance"),
      (scene_prop_set_slot,":wood_limber_instance", scene_prop_slot_child_prop2, ":cannon_limber_instance"),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_y_value,-220),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_z_value,34),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_z_extra,":cur_z_rot"),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_x_scale,":x_scale"),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_y_scale,":y_scale"),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_z_scale,":z_scale"),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_is_scaled,":has_scale"),
      (call_script,"script_copy_prop_slot",":cannon_limber_instance",":cannon_instance_id",scene_prop_slot_has_ball),
      (call_script,"script_copy_prop_slot",":cannon_limber_instance",":cannon_instance_id",scene_prop_slot_is_loaded),
      (call_script,"script_copy_prop_slot",":cannon_limber_instance",":cannon_instance_id",scene_prop_slot_ammo_type),
      (call_script,"script_copy_prop_slot",":cannon_limber_instance",":cannon_instance_id",scene_prop_slot_just_fired),
      (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_is_active,1),
      

      (try_begin),
        (gt,":cannon_wheels_instance",-1),
        (scene_prop_set_slot,":cannon_wheels_instance", scene_prop_slot_parent_prop, ":cannon_limber_instance"),
        (scene_prop_set_slot,":cannon_limber_instance", scene_prop_slot_child_prop1, ":cannon_wheels_instance"),
        (scene_prop_set_slot,":cannon_wheels_instance", scene_prop_slot_y_value, ":cannon_wheel_y"),
        (scene_prop_set_slot,":cannon_wheels_instance", scene_prop_slot_is_active,1),
      (try_end),
      
     
      (assign, reg0, 1),
    (try_end),
   ]),
   
  # script_copy_prop_slot
  # Input: arg1 = to_prop_instance_id
  # Input: arg2 = from_prop_instance_id
  # Input: arg3 = slot_number
  # Output: none.
  ("copy_prop_slot",
   [
    (store_script_param, ":to_prop_instance_id", 1),
    (store_script_param, ":from_prop_instance_id", 2),
    (store_script_param, ":slot_number", 3),
    
    (try_begin),
      (prop_instance_is_valid,":to_prop_instance_id"),
      (prop_instance_is_valid,":from_prop_instance_id"),
      
      (scene_prop_get_slot,":value",":from_prop_instance_id", ":slot_number"),
      (scene_prop_set_slot,":to_prop_instance_id",":slot_number",":value"),
    (try_end),
   ]),
   
  # script_unlimber_cannon_from_horse
  # Input: arg1 = cannon_instance_id   # ":using_agent"
  # Output: reg0 = ok?
  ("unlimber_cannon_from_horse",
   [
    (store_script_param, ":instance_id", 1),
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid, ":instance_id"),
      (prop_instance_get_scene_prop_kind,":scene_prop_id",":instance_id"),
       
      (is_between, ":scene_prop_id", mm_unlimber_button_types_begin, mm_unlimber_button_types_end),  # Unlimber
       
      (prop_instance_get_position, pos49, ":instance_id"),
      (scene_prop_get_slot,":y_movement",":instance_id",scene_prop_slot_y_value),
      (position_move_y, pos49,":y_movement"),
      (position_rotate_z,pos49,-90),

      (try_begin),
        (scene_prop_get_slot,":limber_wood",":instance_id",scene_prop_slot_parent_prop),
        (prop_instance_is_valid, ":limber_wood"),
        
        (scene_prop_set_slot,":limber_wood", scene_prop_slot_child_prop2, -1),
      (try_end),
    
      (assign,":prop_to_spawn",-1),
      (try_begin),
        (eq,":scene_prop_id","spr_mm_cannon_12pdr_limber"),
        (assign,":prop_to_spawn","spr_mm_cannon_12pdr"),
      (else_try),
        (eq,":scene_prop_id","spr_mm_cannon_howitzer_limber"),
        (assign,":prop_to_spawn","spr_mm_cannon_howitzer"),
      (try_end),
       
      (try_begin),# scale this bitch
        (scene_prop_slot_eq, ":instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
        (scene_prop_get_slot,":x_scale",":instance_id",scene_prop_slot_x_scale),
        (scene_prop_get_slot,":y_scale",":instance_id",scene_prop_slot_y_scale),
        (scene_prop_get_slot,":z_scale",":instance_id",scene_prop_slot_z_scale),
        (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 1, 1,":x_scale",":y_scale",":z_scale"),
      (else_try),
        (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 1, 0),
      (try_end),
      (assign,":new_cannon",reg0),
       
      (call_script,"script_generate_bits_for_cannon_instance",":new_cannon", 0, 1),
      (assign,":cannon_wood",reg1),
      
      # copy current state
      (call_script,"script_copy_prop_slot",":cannon_wood",":instance_id",scene_prop_slot_has_ball),
      (call_script,"script_copy_prop_slot",":cannon_wood",":instance_id",scene_prop_slot_is_loaded),
      (call_script,"script_copy_prop_slot",":cannon_wood",":instance_id",scene_prop_slot_ammo_type),
      (call_script,"script_copy_prop_slot",":cannon_wood",":instance_id",scene_prop_slot_just_fired),
      
      # Set that the cannon to be not pushed
      (scene_prop_set_slot,":cannon_wood",scene_prop_slot_is_not_pushed_back,1),
      
      # According to state set some difirent buttons.
      (scene_prop_get_slot,":has_ball",":cannon_wood", scene_prop_slot_has_ball),
      (scene_prop_get_slot,":is_loaded",":cannon_wood", scene_prop_slot_is_loaded),
      #(scene_prop_get_slot,":ammo_type",":cannon_wood", scene_prop_slot_ammo_type),
      #(scene_prop_get_slot,":just_fired",":cannon_wood", scene_prop_slot_just_fired),
      
      (call_script,"script_cannon_instance_get_barrel",":cannon_wood"),
      (assign,":barrel_instance",reg0),
       
      (try_begin),        
        (eq,":barrel_instance",-1),
        (assign,":barrel_instance",":cannon_wood"),
      (try_end),
      
      (try_begin),
        (eq,":is_loaded",1),
        # get control button up, 
        (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_aim_button"),
        (call_script,"script_set_prop_child_active",reg0),
        
        # remove place ammo.
        (assign, ":end_cond", "spr_mm_reload_button"),
        (try_for_range,":cur_loadtype","spr_mm_load_cartridge_button",":end_cond"),
          (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_loadtype"),
          (gt,reg0,-1),
          (call_script,"script_set_prop_child_inactive",reg0),
          
          (assign, ":end_cond", 0),
        (try_end),
      (else_try),
        (eq,":has_ball",1),
        # get load button up
        (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_reload_button"),
        (call_script,"script_set_prop_child_active",reg0),
        
        # remove place ammo.
        (assign, ":end_cond", "spr_mm_reload_button"),
        (try_for_range,":cur_loadtype","spr_mm_load_cartridge_button",":end_cond"),
          (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_loadtype"),
          (gt,reg0,-1),
          (call_script,"script_set_prop_child_inactive",reg0),
          
          (assign, ":end_cond", 0),
        (try_end),
      (try_end),
      
      #set it scales to 1000 on cannon limber cause it wont reset in clean up.
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
        (scene_prop_set_slot,":instance_id",scene_prop_slot_is_scaled,0),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_x_scale,1000),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_y_scale,1000),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_z_scale,1000),
      (try_end),
      
      # clean up old cannon from the limber
      (call_script, "script_clean_up_prop_instance_with_childs", ":instance_id"),
      
      # Set cannon to be in_use just for this round so he wont be re-used
      (scene_prop_set_slot,":new_cannon",scene_prop_slot_in_use,1),
    (try_end),
   ]),
   
   
  # script_multiplayer_server_spawn_particle_at_position
  # Input: arg1 = particle_effect_id
  # Input: arg2 = burst_strength
  # Input: pos60 = position with rotation for particle.
  # Output: 
  ("multiplayer_server_spawn_particle_at_position",
   [
    (store_script_param, ":particle_effect_id", 1),
    (store_script_param, ":burst_strength", 2),
  
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (is_between,":particle_effect_id","psys_game_rain","psys_particles_end"), # Valid particle?
      
      (try_begin),
        (neg|multiplayer_is_dedicated_server),
        (particle_system_burst_no_sync,":particle_effect_id",pos60,":burst_strength"),
      (try_end),
      
      (try_begin),
        (multiplayer_is_server),
        
        (set_fixed_point_multiplier, 100),
        (position_get_x,":x_value",pos60),
        (position_get_y,":y_value",pos60),
        (position_get_z,":z_value",pos60),
        
        (position_get_rotation_around_z,":z_rot",pos60),
        (position_get_rotation_around_x,":x_rot",pos60),
        (position_get_rotation_around_y,":y_rot",pos60),
        
        # Make rotation positive for transfer if needed.
        (try_begin),
          (lt,":z_rot",0),
          (val_add,":z_rot",360), 
        (try_end),
        (try_begin),
          (lt,":x_rot",0),
          (val_add,":x_rot",360), 
        (try_end),
        (try_begin),
          (lt,":y_rot",0),
          (val_add,":y_rot",360), 
        (try_end),
        
        # add 100 meter to z so we support minus values.
        (val_add,":z_value",10000),
        (val_max,":z_value",0), # make sure its positive now.
        
        (val_clamp,":x_rot",0,361),
        (val_clamp,":y_rot",0,361),
        (val_clamp,":z_rot",0,361),
        (val_clamp,":burst_strength",0,1000),
        
        # Lets pack this shit! :P
        (store_mul, ":pack1", ":x_value", 1000),
        (val_add, ":pack1", ":x_rot"),
        (assign,":pack2", ":y_value"),
        (store_mul, ":pack2", ":y_value", 1000),
        (val_add, ":pack2", ":y_rot"),
        (store_mul, ":pack3", ":z_value", 1000), 
        (val_add, ":pack3", ":z_rot"),
        (store_mul, ":pack4", ":particle_effect_id", 1000), 
        (val_add, ":pack4", ":burst_strength"),
        
        # and send it...
        (try_for_players, ":cur_player", 1),
          (player_is_active,":cur_player"),

          (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_return_particle_at_pos,":pack1",":pack2",":pack3",":pack4"),
        (try_end),
      (try_end),
    (try_end),
   ]),
   
  # script_client_get_my_agent
  # Input: 
  # Output: reg0 = agent_id_of_current_player
  ("client_get_my_agent",
   [
     (assign, ":player_agent", -1),
     (try_begin),
       (game_in_multiplayer_mode),
       (multiplayer_get_my_player, ":my_player_no"),
       (player_is_active,":my_player_no"),
       (player_get_agent_id, ":player_agent", ":my_player_no"),
     (else_try),
       (get_player_agent_no, ":player_agent"),  
     (try_end),
     
     (assign, reg0, ":player_agent"),
   ]),
   
  # script_cannon_instance_get_wheels
  # Input: arg1 = cannon_instance
  # Output: reg0 = barrel_instance
  ("cannon_instance_get_wheels",
   [
    (store_script_param, ":cannon_instance", 1),
    
    (assign,reg0,-1),
    (try_begin),
      (prop_instance_is_valid, ":cannon_instance"),
      
      (prop_instance_get_scene_prop_kind,":cannon_kind",":cannon_instance"),
      
      (assign,":wheel_type",-1), 
      (try_begin),
        (eq,":cannon_kind","spr_mm_cannon_12pdr_wood"),
        (assign,":wheel_type","spr_mm_cannon_12pdr_wheels"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
        (assign,":wheel_type","spr_mm_cannon_howitzer_wheels"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_fort_wood"),
        (assign,":wheel_type","spr_mm_cannon_fort_wheels"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_naval_wood"),
        (assign,":wheel_type","spr_mm_cannon_naval_wheels"), 
      (try_end),
      
      (call_script, "script_prop_instance_find_first_child_of_type", ":cannon_instance", ":wheel_type"),
    (try_end),
   ]),
   
  # script_cannon_instance_get_barrel
  # Input: arg1 = cannon_instance
  # Output: reg0 = barrel_instance
  ("cannon_instance_get_barrel",
   [
    (store_script_param, ":cannon_instance", 1),
    
    (assign,reg0,-1),
    (try_begin),
      (prop_instance_is_valid, ":cannon_instance"),
      
      (prop_instance_get_scene_prop_kind,":cannon_kind",":cannon_instance"),
      
      (assign,":barrel_type",-1), 
      (try_begin),
        (eq,":cannon_kind","spr_mm_cannon_12pdr_wood"),
        (assign,":barrel_type","spr_mm_cannon_12pdr_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
        (assign,":barrel_type","spr_mm_cannon_howitzer_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
        (assign,":barrel_type","spr_mm_cannon_mortar_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_fort_wood"),
        (assign,":barrel_type","spr_mm_cannon_fort_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_naval_wood"),
        (assign,":barrel_type","spr_mm_cannon_naval_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_carronade_wood"),
        (assign,":barrel_type","spr_mm_cannon_carronade_barrel"), 
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_swievel_wood"),
        (assign,":barrel_type","spr_mm_cannon_swievel_barrel"),
      (else_try),
        (eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
        (assign,":barrel_type","spr_mm_cannon_rocket_barrel"),
      (try_end),

      (call_script, "script_prop_instance_find_first_child_of_type", ":cannon_instance", ":barrel_type"),
    (try_end),
   ]),
   
  # script_cannon_child_find_cannon_instance
  # Input: arg1 = cannon_instance
  # Output: reg0 = barrel_instance
  ("cannon_child_find_cannon_instance",
   [
    (store_script_param, ":child_instance", 1),
    
    (assign,reg0,-1),
    (try_begin),
      (prop_instance_is_valid, ":child_instance"),
      
      (assign,":cannon_instance",-1),
      (scene_prop_get_slot,":cannon_instance",":child_instance",scene_prop_slot_parent_prop),
      #(gt,":cannon_instance",-1), #patch1115 fix 5/14
      (prop_instance_is_valid,":cannon_instance"), #patch1115 fix 18/28
      (prop_instance_get_scene_prop_kind, ":cannon_kind", ":cannon_instance"),
      (assign,":is_ok_cannon",0),
      (try_begin),
        (is_between, ":cannon_kind", mm_cannon_wood_types_begin, mm_cannon_wood_types_end),
        (assign,":is_ok_cannon",1),
      (else_try),
        (scene_prop_get_slot,":cannon_instance",":cannon_instance",scene_prop_slot_parent_prop), # get his parent..
        #(gt,":cannon_instance",-1), #patch1115 fix 5/15
        (prop_instance_is_valid,":cannon_instance"), #patch1115 fix 18/29
        (prop_instance_get_scene_prop_kind, ":cannon_kind", ":cannon_instance"),
        (is_between, ":cannon_kind", mm_cannon_wood_types_begin, mm_cannon_wood_types_end),
        (assign,":is_ok_cannon",1),
      (try_end),
      (eq,":is_ok_cannon",1),
      (assign,reg0,":cannon_instance"),
    (try_end),
   ]),
   
  # script_agent_take_cannonball
  # Input: arg1 = agent_id
  # Output: reg0 = used_item
  ("agent_take_cannonball",
  [
    (store_script_param, ":agent_id", 1),
    
    (assign,reg0,-1),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":agent_id"),
      
      (this_or_next|agent_has_item_equipped,":agent_id","itm_cannon_cartridge_round"),
      (this_or_next|agent_has_item_equipped,":agent_id","itm_cannon_cartridge_shell"),
      (this_or_next|agent_has_item_equipped,":agent_id","itm_cannon_cartridge_canister"),
      (this_or_next|agent_has_item_equipped,":agent_id","itm_cannon_cartridge_bomb"),
      (agent_has_item_equipped,":agent_id","itm_rockets"),
      
      (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
      (try_begin), # not wielding anything, wield the first thing we find.
        (neq, ":wielded_item", "itm_cannon_cartridge_round"),
        (neq, ":wielded_item", "itm_cannon_cartridge_shell"),
        (neq, ":wielded_item", "itm_cannon_cartridge_canister"),
        (neq, ":wielded_item", "itm_cannon_cartridge_bomb"),
        (neq, ":wielded_item", "itm_rockets"),
        (try_begin),
          (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_round"),  # what if we checked for ammo here, under different variables for each?
          (assign,":wielded_item","itm_cannon_cartridge_round"),
        (else_try),
          (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_shell"),
          (assign,":wielded_item","itm_cannon_cartridge_shell"),
        (else_try),
          (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_canister"),
          (assign,":wielded_item","itm_cannon_cartridge_canister"),
        (else_try),
          (agent_has_item_equipped,":agent_id","itm_cannon_cartridge_bomb"),
          (assign,":wielded_item","itm_cannon_cartridge_bomb"),
        (else_try),
          (agent_has_item_equipped,":agent_id","itm_rockets"),
          (assign,":wielded_item","itm_rockets"),
        (try_end),
        (agent_set_wielded_item,":agent_id",":wielded_item"),
      (try_end),      
      
      # determine ammo type here
      (assign,":ammo_type",0),
      (try_begin),
        (eq,":wielded_item","itm_cannon_cartridge_round"),
        (assign,":ammo_type",cannon_ammo_type_round),
      (else_try),
        (eq,":wielded_item","itm_cannon_cartridge_shell"),
        (assign,":ammo_type",cannon_ammo_type_shell),
      (else_try),
        (eq,":wielded_item","itm_cannon_cartridge_canister"),
        (assign,":ammo_type",cannon_ammo_type_canister),
      (else_try),
        (eq,":wielded_item","itm_cannon_cartridge_bomb"),
        (assign,":ammo_type",cannon_ammo_type_bomb),
      (else_try),
        (eq,":wielded_item","itm_rockets"),
        (assign,":ammo_type",cannon_ammo_type_rocket),
      (try_end),
      
	  
	    #patch1115 13/1 begin
      (agent_get_ammo,":ammo_count",":agent_id",1), #only wielded, assuming he is wielding it during load...  vanilla is 1, changed to 0
													#Set the above to 0, and you solve the issue with infinite ammo with 2 of the same ammo, but if you have one round and one cani then you get infinite ammo on those, BOTh are "wielded_item"
	    (try_begin),
        (eq,":ammo_count",1), 
        (agent_unequip_item,":agent_id",":wielded_item"),		
      (else_try),
        (eq,":wielded_item","itm_rockets"),
        (val_sub,":ammo_count",1),		
        (agent_set_ammo,":agent_id",":wielded_item",":ammo_count"),
      (else_try), #patch1115      ROCKETS ammo acts funny.
        (neq,":wielded_item","itm_rockets"),
        (agent_unequip_item,":agent_id",":wielded_item"),
        (val_sub,":ammo_count",1),
      (try_begin),
        (agent_equip_item,":agent_id",":wielded_item"),
        (eq, ":ammo_count", 2),
        (agent_equip_item,":agent_id",":wielded_item"),
        (eq, ":ammo_count", 3),
        (agent_equip_item,":agent_id",":wielded_item"),
      (try_end),
    (try_end),
	  

      (assign,reg0,":ammo_type"),
    (try_end), #patch1115 13/1 end
  ]),
  
  # script_push_flag_selection_to_player_if_needed
  # Input: 
  # Output: 
  ("push_flag_selection_to_player_if_needed",
  [
    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      
      (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
      
      (call_script, "script_client_get_my_agent"),
      (assign, ":player_agent", reg0),
      
      (assign,":continue",1),
      (try_begin),
        (agent_is_active,":player_agent"),
        (agent_is_alive, ":player_agent"), # I am dead?
        (assign,":continue",0),
      (try_end),
      (eq,":continue",1),
      
      #(player_get_slot,":flag_id",":player_no",slot_player_selected_flag),
      #(troop_get_slot,":flag_id","trp_flag_select_dummy", 222),
      (multiplayer_get_my_player, ":cur_player"),
      (player_get_team_no, ":player_team", ":cur_player"),
      (val_add,":player_team",1),
      
      (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_current_selected_flag"),
      (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),
      #(store_add,":player_team_plus_1",":player_team",1),
      
      (neq,":player_team",":current_owner"), # Oops his flag is taken...
      
      (neg|is_presentation_active,"prsnt_conquest_flag_select"),
      (start_presentation,"prsnt_conquest_flag_select"),
    (try_end),
  ]),
  
  # script_cf_agent_is_playing_music
  # Input: agent_id
  # Output: reg0 > yes/no 1/0
  ("cf_agent_is_playing_music",
  [
    (store_script_param, ":agent_id", 1),
    
    (agent_is_active,":agent_id"),
    
    (agent_get_animation,":cur_anim",":agent_id",1),
    (is_between,":cur_anim","anim_drum","anim_drum_end"), # Only when Playing music..
  ]),
  
  # script_cf_agent_is_playing_piano
  # Input: agent_id
  # Output: reg0 > yes/no 1/0
  ("cf_agent_is_playing_piano",
  [
    (store_script_param, ":agent_id", 1),

    (agent_is_active,":agent_id"),
    
    (agent_get_animation,":cur_anim",":agent_id",0),
    (eq,":cur_anim","anim_piano"), # Only when Playing music..
  ]),
  
  # script_cf_agent_is_taking_a_shit
  # Input: agent_id
  # Output: reg0 > yes/no 1/0
  ("cf_agent_is_taking_a_shit",
  [
    (store_script_param, ":agent_id", 1),

    (agent_is_active,":agent_id"),
    
    (agent_get_animation,":cur_anim",":agent_id",0),
    (eq,":cur_anim","anim_shitting"), 
  ]),
  
  # script_cf_agent_is_surrendering
  # Input: agent_id
  # Output: reg0 > yes/no 1/0
  ("cf_agent_is_surrendering",
  [
    (store_script_param, ":agent_id", 1),

    (agent_is_active,":agent_id"),
    
    (agent_get_animation,":cur_anim",":agent_id",1),
    (eq,":cur_anim","anim_surrender"), 
  ]),
  
  #script_get_playercounts_for_scoreboard
  # Input: 
  # Output: reg50 = total_player_count
  #         reg51 = team1_total
  #         reg52 = team1_alive
  #         reg53 = team1_dead
  #         reg54 = team2_total
  #         reg55 = team2_alive
  #         reg56 = team2_dead
  #         reg57 = spectator_count
  ("get_playercounts_for_scoreboard",
  [
    (try_begin),
      (assign, ":total_player_count", 0),
      (assign, ":team1_total", 0),
      (assign, ":team1_alive", 0),
      (assign, ":team1_dead", 0),
      (assign, ":team2_total", 0),
      (assign, ":team2_alive", 0),
      (assign, ":team2_dead", 0),
      (assign, ":spectator_count", 0),
      (try_for_players, ":cur_player", "$g_ignore_server"),
        (player_is_active, ":cur_player"),
        (val_add, ":total_player_count", 1),

        (assign,":is_alive",0),
        (try_begin),
          (player_get_agent_id,":player_agent",":cur_player"),
          (gt,":player_agent",-1),
          (agent_is_alive,":player_agent"),
          (assign,":is_alive",1),
        (try_end),
          
        (player_get_team_no, ":cur_player_team", ":cur_player"),
        (try_begin),
          (eq,":cur_player_team",0),
          
          (val_add,":team1_total",1),
          (try_begin),
            (eq,":is_alive",1),
            (val_add,":team1_alive",1),
          (else_try),
            (val_add,":team1_dead",1),
          (try_end),
        (else_try),
          (eq,":cur_player_team",1),
          
          (val_add,":team2_total",1),
          (try_begin),
            (eq,":is_alive",1),
            (val_add,":team2_alive",1),
          (else_try),
            (val_add,":team2_dead",1),
          (try_end),
        (else_try),
          (eq,":cur_player_team",multi_team_spectator),
          (val_add,":spectator_count",1),
        (try_end),
      (try_end),
    (try_end),
    
    (assign,reg50,":total_player_count"),
    (assign,reg51,":team1_total"),
    (assign,reg52,":team1_alive"),
    (assign,reg53,":team1_dead"),
    (assign,reg54,":team2_total"),
    (assign,reg55,":team2_alive"),
    (assign,reg56,":team2_dead"),
    (assign,reg57,":spectator_count"),
  ]),
  
  #script_get_playercounts_for_scoreboard_cb
  # Input: 
  # Output: reg51 = team1_total
  #         reg52 = team1_alive
  #         reg54 = team2_total
  #         reg55 = team2_alive
  #         reg57 = spectator_count
  ("get_playercounts_for_scoreboard_cb",
  [
    (assign, ":team1_total", 0),
    (assign, ":team1_alive", 0),
    (assign, ":team2_total", 0),
    (assign, ":team2_alive", 0),
    (assign, ":spectator_count", 0),
    (try_for_players, ":cur_player", "$g_ignore_server"),
      (player_is_active, ":cur_player"),
      (player_get_team_no, ":cur_player_team", ":cur_player"),
      (try_begin),
        (eq,":cur_player_team",0),
        (val_add,":team1_total",1),
      (else_try),
        (eq,":cur_player_team",1),
        (val_add,":team2_total",1),
      (else_try),
        (eq,":cur_player_team",multi_team_spectator),
        (val_add,":spectator_count",1),
      (try_end),
    (try_end),
    (try_for_agents,":cur_agent"),
      (agent_is_active,":cur_agent"), 
      (agent_is_alive,":cur_agent"),
      (agent_is_human,":cur_agent"),
      (agent_get_team,":cur_agent_team",":cur_agent"),
      (try_begin),
        (eq,":cur_agent_team",0),
        (val_add,":team1_alive",1),
      (else_try),
        (eq,":cur_agent_team",1),
        (val_add,":team2_alive",1),
      (try_end),
    (try_end),
    
    (assign,reg51,":team1_total"),
    (assign,reg52,":team1_alive"),
    (assign,reg54,":team2_total"),
    (assign,reg55,":team2_alive"),
    (assign,reg57,":spectator_count"),
  ]),
  
  
  
  # Vincenzo end

  # Beaver begin
  
  
  # script_get_music_track_names
  # Input: arg1 = track no
  # Output: s0 = track name
#  ("get_music_track_names",
#   [
#     (store_script_param, ":track_no", 1),
#     
#     (try_begin), 
#         (multiplayer_get_my_player, ":my_player_no"),
#         (gt, ":my_player_no", -1),
#         (player_get_agent_id, ":player_agent", ":my_player_no"),
#         (gt, ":player_agent", -1),
#         (player_get_troop_id, ":my_troop_no", ":my_player_no"),
#
#         (str_store_string,s0,"str_no_string"),
#     
#         (try_begin),
#             (eq,":my_troop_no","trp_french_infantry_nco"),
#             (try_begin),
#                 (eq,":track_no",1),
#                 (str_store_string,s0,"str_french_45_drum_1"),
#             (else_try),
#                 (eq,":track_no",2),
#                 (str_store_string,s0,"str_french_45_drum_2"),
#             (else_try),
#                 (eq,":track_no",3),
#                 (str_store_string,s0,"str_french_45_drum_3"),
#             (try_end),
#         (else_try),
#         (try_end),
#     (try_end),
#   ]), 
   
  
  # script_cf_common_kill_player_by_script
  # Input: arg1 = agent id
  # Input: arg2 = player no
   ("cf_common_kill_player_by_script",
   [
     (store_script_param, ":agent_id", 1),
     (store_script_param, ":player_no", 2),
     (store_script_param, ":dont_affect_score", 3),
     
     (try_begin),
       (agent_is_active,":agent_id"),
       (player_is_active,":player_no"),
       
       (agent_set_hit_points, ":agent_id", 0, 1),
       (agent_deliver_damage_to_agent, ":agent_id", ":agent_id","itm_admin_kill_dummy"), #kill him
        
       # only when set.
       (eq,":dont_affect_score",1),
       
       (player_get_kill_count, ":player_kill_count", ":player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for TKing himself
       (try_begin),
       	(neq, "$g_competitive_score_mode", 1),   #G:comp_score if ON don't compensate
      	(val_add, ":player_kill_count", 1),
       	(player_set_kill_count, ":player_no", ":player_kill_count"),
       (try_end),
     
       (player_get_death_count, ":player_death_count", ":player_no"),

       (player_get_score, ":player_score", ":player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for TKing himself
       (val_add, ":player_score", 1),
       (player_set_score, ":player_no", ":player_score"),
       
       (call_script,"script_multiplayer_server_send_player_score_kill_death", ":player_no", ":player_score", ":player_kill_count", ":player_death_count"),
     (try_end),
   ]), 
   
   
  #script_random_item_selection
  # Input: arg1 = troop_no
  #        arg2 = randomise_weapons
  #        arg3 = my_player_no
  # Output: none
  ("random_item_selection",
   [
     (store_script_param, ":troop_no", 1),
     (store_script_param, ":randomise_weapons", 2),
     (store_script_param, ":my_player_no", 3),    	 #":my_player_no"  #patch1115 fix 17/5
     
   (try_begin),
	   (player_is_active, ":my_player_no"),
     #(multiplayer_get_my_player, ":my_player_no"),
     (call_script, "script_multiplayer_clear_player_selected_items", ":my_player_no"),
     (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
     (assign, ":num_primary_weapons_plus_one",1),
     (assign, ":num_secondary_weapons_plus_one",1),
     (assign, ":num_colours_plus_one",1),
     (assign, ":num_bullets_plus_one",1),
     (assign, ":num_hats_plus_one",1),
     (assign, ":num_uniforms_plus_one",1),
     (assign, ":num_boots_plus_one",1),
     (assign, ":num_gloves_plus_one",1),
     (assign, ":num_horses_plus_one",1),
     (try_for_range, ":i_slot", 0, ":inv_cap"),
       (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
       (ge, ":item_id", 0),
       (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
       
       (try_begin),
         (this_or_next|eq, ":item_class", multi_item_class_type_gun),
         (this_or_next|eq, ":item_class", multi_item_class_type_lance),
         (eq, ":item_class", multi_item_class_type_instrument),
         (val_add, ":num_primary_weapons_plus_one",1),
       (else_try),
         (eq, ":item_class", multi_item_class_type_sword),
         (val_add, ":num_secondary_weapons_plus_one",1),
       (else_try),
         (this_or_next|eq, ":item_class", multi_item_class_type_flag),
         (eq, ":item_class", multi_item_class_type_misc),
         (val_add, ":num_colours_plus_one",1),
       (else_try),
         (eq, ":item_class", multi_item_class_type_bullet),
         (val_add, ":num_bullets_plus_one",1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (val_add, ":num_hats_plus_one",1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (val_add, ":num_uniforms_plus_one",1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (val_add, ":num_boots_plus_one",1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (val_add, ":num_gloves_plus_one",1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (val_add, ":num_horses_plus_one",1),
       (try_end),
     (try_end),
     (try_begin),
       (gt,":num_primary_weapons_plus_one",1),
       (store_random_in_range,":primary_weapon_no",1,":num_primary_weapons_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_secondary_weapons_plus_one",1),
       (store_random_in_range,":secondary_weapon_no",1,":num_secondary_weapons_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_colours_plus_one",1),
       (store_random_in_range,":colour_no",1,":num_colours_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_bullets_plus_one",1),
       #(store_random_in_range,":bullet_no",1,":num_bullets_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_hats_plus_one",1),
       (store_random_in_range,":hat_no",1,":num_hats_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_uniforms_plus_one",1),
       (store_random_in_range,":uniform_no",1,":num_uniforms_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_boots_plus_one",1),
       (store_random_in_range,":boot_no",1,":num_boots_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_gloves_plus_one",1),
       (store_random_in_range,":glove_no",1,":num_gloves_plus_one"),
     (try_end),
     (try_begin),
       (gt,":num_horses_plus_one",1),
       (store_random_in_range,":horse_no",1,":num_horses_plus_one"),
     (try_end),
     (assign, ":num_primary_weapons_plus_one",0),
     (assign, ":num_secondary_weapons_plus_one",0),
     (assign, ":num_colours_plus_one",0),
     (assign, ":num_bullets_plus_one",0),
     (assign, ":num_hats_plus_one",0),
     (assign, ":num_uniforms_plus_one",0),
     (assign, ":num_boots_plus_one",0),
     (assign, ":num_gloves_plus_one",0),
     (assign, ":num_horses_plus_one",0),
     (try_for_range, ":i_slot", 0, ":inv_cap"),
       (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
       (ge, ":item_id", 0),
       (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
       (item_get_slot, ":item_class22", ":item_id", slot_item_multiplayer_item_class2),
       (try_begin),
         (eq,":randomise_weapons",1),         
         (this_or_next|eq, ":item_class", multi_item_class_type_gun),
         (this_or_next|eq, ":item_class", multi_item_class_type_lance),
         (eq, ":item_class", multi_item_class_type_instrument),
         (val_add,":num_primary_weapons_plus_one",1),
         (eq,":num_primary_weapons_plus_one",":primary_weapon_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 1),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
         (try_begin),
           (eq,":item_class",multi_item_class_type_gun),
           
           (try_for_range, ":i_slot2", 0, ":inv_cap"),
             (troop_get_inventory_slot, ":item_id2", ":troop_no", ":i_slot2"),
             (ge, ":item_id2", 0),
             (item_get_slot, ":item_class2", ":item_id2", slot_item_multiplayer_item_class),
             (eq,":item_class2",multi_item_class_type_bullet),
             (item_get_slot, ":item_class23", ":item_id2", slot_item_multiplayer_item_class2),
             (eq,":item_class23",":item_class22"),
             (val_add,":num_bullets_plus_one",1),
           #  (eq,":num_bullets_plus_one",":bullet_no"),
             (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 3),
             (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id2"),
           (try_end),
         (try_end),
       (else_try),
         (eq,":randomise_weapons",1),
         (eq, ":item_class", multi_item_class_type_sword),
         (val_add,":num_secondary_weapons_plus_one",1),
         (eq,":num_secondary_weapons_plus_one",":secondary_weapon_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 2),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (eq,":randomise_weapons",1),
         (this_or_next|eq, ":item_class", multi_item_class_type_flag),
         (eq, ":item_class", multi_item_class_type_misc),
         (val_add,":num_colours_plus_one",1),
         (eq,":num_colours_plus_one",":colour_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 0),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (val_add,":num_hats_plus_one",1),
         (eq,":num_hats_plus_one",":hat_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 4),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (val_add,":num_uniforms_plus_one",1),
         (eq,":num_uniforms_plus_one",":uniform_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 5),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (val_add,":num_boots_plus_one",1),
         (eq,":num_boots_plus_one",":boot_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 6),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (val_add,":num_gloves_plus_one",1),
         (eq,":num_gloves_plus_one",":glove_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 7),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (eq, "$g_horses_are_avaliable", 1),
         (val_add,":num_horses_plus_one",1),
         (eq,":num_horses_plus_one",":horse_no"),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 8),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (try_end),
     (try_end),
     (try_begin),
       (eq,":randomise_weapons",0),
       (assign, ":cur_weapon_slot", 0),
       (try_for_range, ":i_slot", 0, ":inv_cap"),
         (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
         (ge, ":item_id", 0),
         (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
         (try_begin),
           (is_between, ":item_class", multi_item_class_type_weapons_begin, multi_item_class_type_weapons_end),
           (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, ":cur_weapon_slot"),
           (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
           (val_add, ":cur_weapon_slot", 1),
         (try_end),
       (try_end),
     (try_end),
   (try_end),
     ]),

  #script_quick_assign_item
  # Input: arg1 = item_no
  # Input: arg2 = player_no
  # Input: arg3 = troop_no
  ("quick_assign_item",
    [
    (store_script_param_1,":item_id"),
    (store_script_param_2,":my_player_no"),
     (try_begin),
       (ge, ":item_id", 0),
       (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
       (try_begin),
         (this_or_next|eq, ":item_class", multi_item_class_type_gun),
         (this_or_next|eq, ":item_class", multi_item_class_type_lance),
         (eq, ":item_class", multi_item_class_type_instrument),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 1),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
         (try_begin),
           (eq,":item_class",multi_item_class_type_gun), #if a gun, assign some bullets (mainly for opolchenyie)
           (store_script_param,":troop_no",3),
           (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
           (try_for_range, ":i_slot", 0, ":inv_cap"),
             (troop_get_inventory_slot, ":item_id2", ":troop_no", ":i_slot"),
             (ge, ":item_id2", 0),
             (item_get_slot, ":item_class2", ":item_id2", slot_item_multiplayer_item_class),
             (eq,":item_class2",multi_item_class_type_bullet),
             (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 3),
             (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id2"),
           (try_end),
         (try_end),
       (else_try),
         (eq, ":item_class", multi_item_class_type_sword),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 2),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (this_or_next|eq, ":item_class", multi_item_class_type_flag),
         (eq, ":item_class", multi_item_class_type_misc),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 0),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 4),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 5),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 6),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 7),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (eq, "$g_horses_are_avaliable", 1),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 8),
         (player_set_slot, ":my_player_no", ":selected_item_slot", ":item_id"),
       (try_end),
     (try_end),
    ]),
   
  #script_get_item_class_cur_item
  # Input: arg1 = item_class
  # Input: arg2 = player_no
  # Output: reg0 = cur_item
  ("get_item_class_cur_item",
    [
       (store_script_param_1,":item_class"),
       (store_script_param_2,":my_player_no"),
       (assign,":item_id",-1),
       (try_begin),
         (this_or_next|eq, ":item_class", multi_item_class_type_gun),
         (this_or_next|eq, ":item_class", multi_item_class_type_lance),
         (eq, ":item_class", multi_item_class_type_instrument),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 1),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (eq, ":item_class", multi_item_class_type_sword),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 2),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (this_or_next|eq, ":item_class", multi_item_class_type_flag),
         (eq, ":item_class", multi_item_class_type_misc),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 0),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 4),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 5),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 6),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 7),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 8),
         (player_get_slot, ":item_id", ":my_player_no", ":selected_item_slot"),
       (try_end),
       (assign,reg0,":item_id"),
    ]),
    
  #script_check_troop_availability
  # Input: arg1 = troop_no
  # Input: arg2 = player_no
  # Input: arg3 = store_messages
  # Output: reg3 = class_ok
  #         reg4 = fail message ID
  #          s22 = fail message
  ("check_troop_availability",
  [
    (store_script_param_1,":troop_no"),
    (store_script_param_2,":player_no"),
    (store_script_param,":store_messages",3),
    
    (assign, ":class_ok", 0),
    (assign, ":fail_message", -1),
    (try_begin),
      (player_is_active,":player_no"),
      (gt,":troop_no",-1),
     
      (player_get_team_no, ":player_team", ":player_no"),

      (troop_get_slot,":player_troop_class",":troop_no",slot_troop_class),
      (troop_get_slot,":player_troop_rank",":troop_no",slot_troop_rank),
      
      # loop through players and compare their current troop id to the selected.
      (assign, ":player_troop_class_to_use",":player_troop_class"),
      (try_begin), #Count light inf and riflemen as the same
        (eq,":player_troop_class",multi_troop_class_mm_rifle),
        (assign,":player_troop_class_to_use",multi_troop_class_mm_skirmisher),
      (try_end),
      (try_begin), #Count all cavalry as the same
        (this_or_next|eq,":player_troop_class",multi_troop_class_mm_lancer),
        (this_or_next|eq,":player_troop_class",multi_troop_class_mm_hussar),
        (this_or_next|eq,":player_troop_class",multi_troop_class_mm_dragoon),
        (this_or_next|eq,":player_troop_class",multi_troop_class_mm_cuirassier),
        (eq,":player_troop_class",multi_troop_class_mm_heavycav),
        (assign,":player_troop_class_to_use",multi_troop_class_mm_cavalry),
      (try_end),
      (try_begin),#hotfix
        (eq, "$g_groupfight_mode", 1),
        (this_or_next|eq,":troop_no","trp_russian_partizan"),
        (this_or_next|eq,":troop_no","trp_russian_opol"),
        (this_or_next|eq,":troop_no","trp_french_ship"),
        (eq,":troop_no","trp_british_ship"),
        (assign,":player_troop_class_to_use",multi_troop_class_mm_sapper),
      (try_end),
     #(else_try), #PATCH1115 fix 43/4 START
     #(try_begin),
      #(eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
      
	   # (this_or_next|eq,":troop_no", "trp_russian_partizan"),
	   # (this_or_next|eq,":troop_no", "trp_british_ship_captain"),
	   # (eq,":troop_no", "trp_french_ship_captain"),
	   # (assign,":player_troop_class_to_use",multi_troop_class_mm_sapper),
	        
    #(try_end), #PATCH1115 fix 43/4 end
      #(try_begin), #Count rockets and standard artillery as the same
      #  (eq,":player_troop_class",multi_troop_class_mm_rocket),
      #  (assign,":player_troop_class_to_use",multi_troop_class_mm_artillery),
      #(try_end),
      
      (assign, ":total_player_count", 0),
      (assign, ":total_team_player_count", 1),
      (assign, ":count_of_troop", 0),
      (assign, ":count_of_class", 0),
      (assign, ":count_of_sub_class", 0), #used for cavalry, artillery and skirmish troops
      (try_for_players, ":cur_player", "$g_ignore_server"),
        (player_is_active, ":cur_player"),
        (val_add, ":total_player_count", 1),
        
        (neq, ":cur_player", ":player_no"), # Not same player
        (player_get_team_no, ":cur_player_team", ":cur_player"),
        (eq, ":cur_player_team", ":player_team"),# In his team
        (val_add, ":total_team_player_count", 1),
        
        (player_get_troop_id, ":cur_player_troop", ":cur_player"),
        (gt, ":cur_player_troop", -1), # Has troop selected
        
        (troop_get_slot,":cur_player_troop_class",":cur_player_troop",slot_troop_class),
        
        (assign, ":cur_player_troop_class_to_use",":cur_player_troop_class"),
        (try_begin), #Count light inf and riflemen as the same
          (eq,":cur_player_troop_class",multi_troop_class_mm_rifle),
          (assign,":cur_player_troop_class_to_use",multi_troop_class_mm_skirmisher),
        (try_end),
        (try_begin), #Count all cavalry as the same
          (this_or_next|eq,":cur_player_troop_class",multi_troop_class_mm_lancer),
          (this_or_next|eq,":cur_player_troop_class",multi_troop_class_mm_hussar),
          (this_or_next|eq,":cur_player_troop_class",multi_troop_class_mm_dragoon),
          (this_or_next|eq,":cur_player_troop_class",multi_troop_class_mm_cuirassier),
          (eq,":cur_player_troop_class",multi_troop_class_mm_heavycav),
          (assign,":cur_player_troop_class_to_use",multi_troop_class_mm_cavalry),
        (try_end),
        (try_begin),#hotfix
          (eq, "$g_groupfight_mode", 1),
          (this_or_next|eq,":cur_player_troop","trp_russian_partizan"),
          (this_or_next|eq,":cur_player_troop","trp_russian_opol"),
          (this_or_next|eq,":cur_player_troop","trp_french_ship"),
          (eq,":cur_player_troop","trp_british_ship"),
          (assign,":cur_player_troop_class_to_use",multi_troop_class_mm_sapper),
        (try_end),
        #(try_begin), #Count rockets and standard artillery as the same
        #  (eq,":cur_player_troop_class",multi_troop_class_mm_rocket),
        #  (assign,":cur_player_troop_class_to_use",multi_troop_class_mm_artillery),
        #(try_end),
        
        (try_begin),
          (eq, ":cur_player_troop", ":troop_no"),
          (val_add, ":count_of_troop", 1),
        (try_end),
        
        (try_begin),
          (eq, ":cur_player_troop_class_to_use", ":player_troop_class_to_use"),
          (val_add, ":count_of_class", 1),
          (try_begin),
            (eq, ":cur_player_troop_class", ":player_troop_class"),
            (val_add, ":count_of_sub_class", 1),
          (try_end),
        (try_end),
      (try_end),

      # Calculate percent of team having current troop
      (assign, ":percent_of_team", 0),
      (assign, ":percent_of_team_sub", 0),
      (try_begin),
        (gt, ":count_of_class", 0),
        (gt, ":total_team_player_count", 1),
        
        (store_mul,":percent_of_team",":count_of_class", 100),
        (val_div, ":percent_of_team", ":total_team_player_count"),
        
        (gt, ":count_of_sub_class", 0),
        
        (store_mul,":percent_of_team_sub",":count_of_sub_class", 100),
        (val_div, ":percent_of_team_sub", ":count_of_class"),
        
        # (assign, reg30, ":percent_of_team"),
         #(assign, reg31, ":count_of_class"),
        # (assign, reg32, ":total_team_player_count"),
         #(assign, reg33, ":count_of_sub_class"),
        # (str_store_string, s34, "@method 1, percent_of_team: {reg30}   count_of_class: {reg31}   total_team_player_count: {reg32}  count_of_sub_class: {reg33}   "),
        # (display_message, s34),
      (try_end),
            
      #(assign, ":fail_type", 0),
      (try_begin),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_infantry),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_grenadier),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_skirmisher),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_sapper),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_surgeon),#patch1115 59/9
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_rocket),
        (this_or_next|eq, ":player_troop_class_to_use", multi_troop_class_mm_artillery),
        (eq, ":player_troop_class_to_use", multi_troop_class_mm_skirmisher),

        (eq,"$g_infantry_available_on_map",0),
        
        (assign, ":class_ok", 0),
      (else_try),
        (this_or_next|eq,":player_troop_class_to_use",multi_troop_class_mm_cavalry),
        (eq, ":player_troop_rank", mm_rank_general),
        (eq,"$g_cavalry_available_on_map",0),
        
        (assign, ":class_ok", 0),
      (else_try),
        (eq, ":player_troop_class", multi_troop_class_mm_artillery),
        (neg|is_between,"$g_artillery_available_on_map",1,3),
        (assign, ":class_ok", 0),
      (else_try),
        (eq, ":player_troop_class", multi_troop_class_mm_rocket),
        (this_or_next|eq,"$g_artillery_available_on_map",0),
        (eq,"$g_artillery_available_on_map",2),
        (assign, ":class_ok", 0),
      (else_try),
        # DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
        #(eq, 1, 0),
        (this_or_next|eq, "$g_use_class_limits", 0),
        (lt, ":total_player_count", "$g_use_class_limits_player_count"), # less than this number of people, don't use class limits
        (assign, ":class_ok", 1),
      (else_try),
        (try_begin), # check classes
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_infantry),
          (assign, ":class_ok", 1), # unlimited.
        (else_try),
          (eq, ":player_troop_class", multi_troop_class_mm_artillery),
          (try_begin),
            (is_between,"$g_artillery_available_on_map",1,3),
            (lt, ":percent_of_team", "$g_limit_artillery"),
            (assign, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class", multi_troop_class_mm_rocket),
          (try_begin),
            (this_or_next|eq,"$g_artillery_available_on_map",1),
            (eq,"$g_artillery_available_on_map",3),
            (lt, ":percent_of_team", "$g_limit_rocket"),
            (assign, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_grenadier),
          (try_begin),
            (lt, ":percent_of_team", "$g_limit_grenadier"),
            (assign, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_skirmisher),
          (try_begin),
            (lt, ":percent_of_team", "$g_limit_skirmisher"),
            (assign, ":class_ok", 1),
            (try_begin),
              (eq, ":player_troop_class", multi_troop_class_mm_rifle),
              (this_or_next|eq, "$g_limit_rifle", 0),
              (gt, ":percent_of_team_sub", "$g_limit_rifle"),
              (assign, ":class_ok", 0),
            (try_end),
            (eq, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_cavalry),
          (try_begin),
            (lt, ":percent_of_team", "$g_limit_cavalry"),
            (assign, ":class_ok", 1),
            (try_begin),
              (eq, ":player_troop_class", multi_troop_class_mm_lancer),
              (this_or_next|eq, "$g_limit_lancer", 0),
              (gt, ":percent_of_team_sub", "$g_limit_lancer"),
              (assign, ":class_ok", 0),
            (else_try),
              (eq, ":player_troop_class", multi_troop_class_mm_hussar),
              (this_or_next|eq, "$g_limit_hussar", 0),
              (gt, ":percent_of_team_sub", "$g_limit_hussar"),
              (assign, ":class_ok", 0),
            (else_try),
              (eq, ":player_troop_class", multi_troop_class_mm_dragoon),
              (this_or_next|eq, "$g_limit_dragoon", 0),
              (gt, ":percent_of_team_sub", "$g_limit_dragoon"),
              (assign, ":class_ok", 0),
            (else_try),
              (eq, ":player_troop_class", multi_troop_class_mm_cuirassier),
              (this_or_next|eq, "$g_limit_cuirassier", 0),
              (gt, ":percent_of_team_sub", "$g_limit_cuirassier"),
              (assign, ":class_ok", 0),
            (else_try),
              (eq, ":player_troop_class", multi_troop_class_mm_heavycav),
              (this_or_next|eq, "$g_limit_heavycav", 0),
              (gt, ":percent_of_team_sub", "$g_limit_heavycav"),
              (assign, ":class_ok", 0),
            (try_end),
            (eq, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_sapper),
          (try_begin),
            (lt, ":percent_of_team", "$g_limit_sapper"),
            (assign, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (eq, ":player_troop_class_to_use", multi_troop_class_mm_surgeon),#patch1115 59/10
          (try_begin),
            (lt, ":percent_of_team", "$g_limit_surgeon"),
            (assign, ":class_ok", 1),
          (else_try),
            (eq,":store_messages",1),
            #(assign, ":fail_type", 1),
            (str_store_troop_name_plural, s21, ":troop_no"),
            (assign, ":fail_message", "str_already_to_many_players_class_s21"),
          (try_end),
        (else_try),
          (assign, ":class_ok", 1),
        (try_end),
              
        (try_begin), # check Ranks
          (eq, ":class_ok", 1), # He selected an OK class, lets check the ranks.
          (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander), # don't need rank limits in commander battle
          (try_begin),
            (eq, ":player_troop_rank", mm_rank_musician),
            (try_begin),
              (ge, ":count_of_troop", "$g_limit_musician"),
              (assign, ":class_ok", 0),
              (eq,":store_messages",1),
              #(assign, ":fail_type", 2),
              (assign, ":fail_message", "str_already_to_many_players_rank_mus"),
            (try_end),
          (else_try),
            (eq, ":player_troop_rank", mm_rank_sergeant),
            (try_begin),
              (eq, ":player_troop_class", multi_troop_class_mm_artillery),#patch1115 65/8
              (this_or_next|eq, "$g_limit_arty_train", 0),
              (gt, ":percent_of_team", "$g_limit_arty_train"),#patch1115 65/1
              (assign, ":class_ok", 0),
              (eq,":store_messages",1),
              #(assign, ":fail_type", 2),
              (str_store_troop_name_plural, s21, ":troop_no"),
              (assign, ":fail_message", "str_already_to_many_players_rank_srg"),#patch1115 65/8 end
            (else_try),
              (ge, ":count_of_troop", "$g_limit_sergeant"),
              (assign, ":class_ok", 0),
              (eq,":store_messages",1),
              #(assign, ":fail_type", 2),
              (str_store_troop_name_plural, s21, ":troop_no"),
              (assign, ":fail_message", "str_already_to_many_players_rank_srg"),
            (try_end),
          (else_try),
            (eq, ":player_troop_rank", mm_rank_officer),
            (try_begin),
              (ge, ":count_of_troop", "$g_limit_officer"),
              (assign, ":class_ok", 0),
              (eq,":store_messages",1),
              #(assign, ":fail_type", 2),
              (str_store_troop_name_plural, s21, ":troop_no"),
              (assign, ":fail_message", "str_already_to_many_players_rank_off"),
            (try_end),
          (else_try),
            (eq, ":player_troop_rank", mm_rank_general),
            (try_begin),
              (ge, ":count_of_troop", "$g_limit_general"),
              (assign, ":class_ok", 0),
              (eq,":store_messages",1),
              #(assign, ":fail_type", 1),
              (str_store_troop_name_plural, s21, ":troop_no"),
              (assign, ":fail_message", "str_already_to_many_players_class_s21"),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
      #(this_or_next|eq,":troop_no","trp_russian_partizan"),
      #arthur: force partizan command
      (assign, reg10, ":player_no"),
      (assign, reg11, ":troop_no"),
      (lua_push_int, reg10),
      (lua_push_int, reg11),
      (lua_call, "@troopSelection", 2),
      (team_get_faction, ":faction_no", 1),
      (player_get_team_no, ":team_no", ":player_no"),
      (try_begin),
      	(eq, "$force_partisan", 1),
      	(eq, ":faction_no", "fac_russia"),
      	(eq, ":team_no", 1),
      	(try_begin),
      		(eq, ":troop_no", "trp_russian_partizan"),
      		(assign, ":class_ok", 1),
      		(assign, ":fail_message", -1),
      	(else_try),
      		(assign, ":class_ok", 0),
      		(str_store_troop_name_plural, s21, ":troop_no"),
      		(assign, ":fail_message", "str_already_to_many_players_class_s21"),
      	(try_end),
      (try_end),
      (try_begin),
        (gt,":fail_message",-1),
        (str_store_string, s22, ":fail_message"),
      (try_end),
      
      (assign,reg3,":class_ok"),
      (assign,reg4,":fail_message"),
    (try_end),
    ]),
     
  #script_get_num_players_of_troop
  # Input: arg1 = troop_no
  # Input: arg2 = team_no
  # Output: reg0 = num_players
  ("get_num_players_of_troop",
  [
    (store_script_param_1,":troop_no"),
    (store_script_param_2,":team_no"),
    
    (assign,":num_cur_players",0),
    (store_troop_faction,":faction_no",":troop_no"),
    (store_add,":other_ranks_faction_no",":faction_no",11),
    
    (try_for_players, ":cur_player", "$g_ignore_server"),
      (player_is_active, ":cur_player"),
      (player_get_team_no,":cur_team",":cur_player"),
      (eq,":cur_team",":team_no"),
      (player_get_troop_id,":cur_troop",":cur_player"),
      (gt,":cur_troop",-1),
      (store_troop_faction,":cur_faction",":cur_troop"),
      (try_begin),
        (eq,":cur_faction",":faction_no"),
        (eq,":cur_troop",":troop_no"),
        (val_add,":num_cur_players",1),
      (else_try),
        (eq,":cur_faction",":other_ranks_faction_no"),
        (assign,":base_troop",":cur_troop"),
        (assign,":end_cond",5),
        (try_for_range,":unused",0,":end_cond"),
          (val_sub,":base_troop",1),
          (store_troop_faction,":faction",":base_troop"),
          (eq,":faction",":faction_no"),
          (assign,":end_cond",0),
        (try_end),
        (eq,":base_troop",":troop_no"),
        (val_add,":num_cur_players",1),
      (try_end),
    (try_end),
    
    (assign,reg0,":num_cur_players"),
    ]),
     
  #script_get_num_players_of_troop_cb
  # Input: arg1 = troop_no
  # Input: arg2 = team_no
  # Output: reg0 = num_players
  ("get_num_players_of_troop_cb",
  [
    (store_script_param_1,":troop_no"),
    (store_script_param_2,":team_no"),
    
    (troop_get_slot,":player_troop_no",":troop_no",slot_troop_officer_troop),
    (assign,":num_cur_players",0),
    
    (try_for_players, ":cur_player", "$g_ignore_server"),
      (player_is_active, ":cur_player"),
      (player_get_team_no,":cur_team",":cur_player"),
      (eq,":cur_team",":team_no"),
      (player_get_troop_id,":cur_troop",":cur_player"),
      (gt,":cur_troop",-1),
      (eq,":cur_troop",":player_troop_no"),
      (val_add,":num_cur_players",1),
    (try_end),
    
    (assign,reg0,":num_cur_players"),
    ]),
  
  # script_conquest_get_flag_name
  # Input: arg1 = flag_id
  # Output: s0 = flag name
   ("conquest_get_flag_name",
   [
      (store_script_param, ":flag_id", 1),
      
      (try_begin),
        (neg|multiplayer_is_server),
        
        (store_add, ":troop_id", "trp_custom_string_1", ":flag_id"),
        
        (try_begin),
          (lt, ":troop_id", "trp_custom_strings_end"),
          
          (str_store_troop_name_plural, s0, ":troop_id"),
        (else_try),
          (assign, reg3, ":flag_id"),
          (str_store_string, s0, "str_flag_reg3"),
        (try_end),
      (else_try),
        (store_current_scene,":cur_scene"),
        (try_begin),
          (troop_get_slot, ":custom_name", "trp_flag_custom_strings_dummy", ":flag_id"),
          (gt, ":custom_name", -1),
          
          (store_add, ":string_id", "str_custom_flag_name_1", ":custom_name"),
          (lt, ":string_id", "str_custom_flag_names_end"),
          
          (str_store_string, s0, ":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_arabian_harbour"),
          (eq,":cur_scene","scn_mp_arabian_harbour_night"),
          (store_add,":string_id","str_mp_arabian_harbour_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_arabian_village_conq"),
          (eq,":cur_scene","scn_mp_arabian_village_conq_morning"),
          (store_add,":string_id","str_mp_arabian_village_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_ardennes"),
          (eq,":cur_scene","scn_mp_ardennes_morning"),
          (store_add,":string_id","str_mp_ardennes_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_avignon"),
          (eq,":cur_scene","scn_mp_avignon_morning"),
          (store_add,":string_id","str_mp_avignon_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_borodino"),
          (eq,":cur_scene","scn_mp_borodino_morn"),
          (store_add,":string_id","str_mp_borodino_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_columbia_hill_farm"),
          (eq,":cur_scene","scn_mp_columbia_farm_morning"),
          (store_add,":string_id","str_mp_columbia_hill_farm_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_european_city_summer"),
          (eq,":cur_scene","scn_mp_european_city_winter"),
          (store_add,":string_id","str_mp_european_city_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_french_farm"),
          (eq,":cur_scene","scn_mp_french_farm_storm"),
          (store_add,":string_id","str_mp_french_farm_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_hungarian_plains"),
          (eq,":cur_scene","scn_mp_hungarian_plains_cloud"),
          (store_add,":string_id","str_mp_hungarian_plains_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_landshut"),
          (eq,":cur_scene","scn_mp_landshut_night"),
          (store_add,":string_id","str_mp_landshut_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_minden"),
          (eq,":cur_scene","scn_mp_minden_night"),
          (store_add,":string_id","str_mp_minden_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_river_crossing"),
          (eq,":cur_scene","scn_mp_river_crossing_morning"),
          (store_add,":string_id","str_mp_river_crossing_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_roxburgh"),
          (eq,":cur_scene","scn_mp_roxburgh_raining"),
          (store_add,":string_id","str_mp_roxburgh_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_russian_village_conq"),
          (eq,":cur_scene","scn_mp_russian_village_conq_night"),
          (store_add,":string_id","str_mp_russian_village_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_schemmerbach"),
          (eq,":cur_scene","scn_mp_schemmerbach_storm"),
          (store_add,":string_id","str_mp_schemmerbach_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_slovenian_village"),
          (eq,":cur_scene","scn_mp_slovenian_village_raining"),
          (store_add,":string_id","str_mp_slovenian_village_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),        
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_champs_elysees"),
          (eq,":cur_scene","scn_mp_champs_elysees_rain"),
          (store_add,":string_id","str_mp_champs_elysees_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_fort_vincey"),
          (eq,":cur_scene","scn_mp_fort_vincey_storm"),
          (store_add,":string_id","str_mp_fort_vincey_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_oaksfield_day"),
          (eq,":cur_scene","scn_mp_oaksfield_storm"),
          (store_add,":string_id","str_mp_oaksfield_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_quatre_bras"),
          (eq,":cur_scene","scn_mp_quatre_bras_night"),
          (store_add,":string_id","str_mp_quatre_bras_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (eq,":cur_scene","scn_mp_swamp"),
          (store_add,":string_id","str_mp_swamp_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (this_or_next|eq,":cur_scene","scn_mp_walloon_farm"),
          (eq,":cur_scene","scn_mp_walloon_farm_night"),
          (store_add,":string_id","str_mp_walloon_farm_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
		    (else_try),
          (eq,":cur_scene","scn_mp_pyramids"),
          (store_add,":string_id","str_mp_pyramids_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
		    (else_try),
          (eq,":cur_scene","scn_mp_wissaudorf"),
          (store_add,":string_id","str_mp_wissaudorf_flag_1",":flag_id"),
          (str_store_string,s0,":string_id"),
        (else_try),
          (assign,reg3,":flag_id"),
          (str_store_string,s0,"str_flag_reg3"),
        (try_end),
      (try_end),
   ]), 
      
  # script_multiplayer_initalise_flags_common
  # Input: none
  # Output: none
  ("multiplayer_initalise_flags_common",
   [
           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
           (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
             (try_begin),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_red_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_blue_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_gray_headquarters_flag"),
             (try_end),
             (gt, ":num_instances_of_headquarters_flag", 0),
             (try_for_range, ":instance_no", 0, ":num_instances_of_headquarters_flag"),
               (scene_prop_get_instance, ":flag_id", ":headquarters_flag_no", ":instance_no"),
               (prop_instance_get_position, pos9, ":flag_id"),
        
               (set_spawn_position, pos9),
               (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),               
         
               #place other flags
               (try_for_range, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red", ":end_cond"),
                 (set_spawn_position, pos9),             
                 (try_begin),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red"),
                   (spawn_scene_prop, "$team_1_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_blue"),
                   (spawn_scene_prop, "$team_2_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_gray"),
                   (spawn_scene_prop, "spr_headquarters_flag_gray_code_only"),
                 (try_end),                         
               (try_end),

               #assign who owns this flag values
               (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
               (try_begin),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 0),
               (try_end),
               
               # storing variation id 1 for each flag. it defines which custom flag string to use
               (prop_instance_get_variation_id, ":custom_name", ":flag_id"),
               (val_sub, ":custom_name", 1),
               (troop_set_slot, "trp_flag_custom_strings_dummy", "$g_number_of_flags", ":custom_name"),
               
               (val_add, "$g_number_of_flags", 1),         
             (try_end),
           (try_end),

           (assign, "$g_number_of_initial_team_1_flags", 0),
           (assign, "$g_number_of_initial_team_2_flags", 0),

           (try_for_range, ":place_no", 0, "$g_number_of_flags"),
             (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":place_no"),
             (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),
         
             (try_begin),
               (eq, ":place_no", 0),
               (entry_point_get_position, pos9, multi_base_point_team_1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_1", ":flag_id"),
             (else_try),
               (eq, ":place_no", 1),
               (entry_point_get_position, pos9, multi_base_point_team_2),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_2", ":flag_id"),
             (else_try),
               (assign, ":flag_start_red", 2),
               (scene_prop_get_num_instances, ":num_initial_red_flags", "spr_headquarters_flag_red"),
               (store_add, ":flag_start_blue", ":flag_start_red", ":num_initial_red_flags"),
               (scene_prop_get_num_instances, ":num_initial_blue_flags", "spr_headquarters_flag_blue"),
               (store_add, ":flag_start_gray", ":flag_start_blue", ":num_initial_blue_flags"),
               (scene_prop_get_num_instances, ":num_initial_gray_flags", "spr_headquarters_flag_gray"),         
               (try_begin),
                 (ge, ":place_no", ":flag_start_red"),
                 (gt, ":num_initial_red_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_red"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_blue"),
                 (gt, ":num_initial_blue_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_blue"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_gray"),
                 (gt, ":num_initial_gray_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_gray"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
               (try_end),             
               (prop_instance_get_position, pos9, ":flag_id"),
             (try_end),

             (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":place_no"),
             (prop_instance_set_position, ":pole_id", pos9),
         
             (position_move_z, pos9, multi_headquarters_pole_height),           
             (try_begin),
               (eq, ":current_owner", 0),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 1),
             (else_try),
               (eq, ":current_owner", 1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_1_flags", 1),
             (else_try),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos9),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_2_flags", 1),
             (try_end),
           (try_end),
     ]),
     
  # Beaver end
  
  # script_get_prop_kind_size_and_shift
  # Input: prop_kind_id
  # Output: reg0 = is_ok
  #         reg1 = wall_height
  #         reg2 = wall_width
  #         reg3 = wall_length
  #         reg4 = move_height_to_center
  #         reg5 = move_width_to_center
  #         reg6 = move_length_to_center
  #         reg7 = rotate_z_90
  #         reg8 = wall_height_offset
  #         reg9 = wall_width_offset
  #         reg10= wall_length_offset
  #         reg11= inverse_width_movement
  #         reg12= max_length
  ("get_prop_kind_size_and_shift",
  [
    (store_script_param, ":prop_kind_id", 1),
    
    # assign defaults
    (assign,":is_ok",0),
    (assign,":wall_height",0),
    (assign,":wall_width",0),
    (assign,":wall_length",0),
    (assign,":wall_height_offset",0),
    (assign,":wall_width_offset",0),
    (assign,":wall_length_offset",0),
    (assign,":move_height_to_center",1),
    (assign,":move_width_to_center",0),
    (assign,":move_length_to_center",0),
    (assign,":rotate_z_90",0),
    (assign,":inverse_width_movement",0),
    (assign,":max_length",0),
    (try_begin),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (try_begin),
        (eq,":prop_kind_id","spr_door_destructible"),
        (assign,":wall_height",346),
        (assign,":wall_width",209),
        (assign,":wall_length",15),
        (assign,":move_height_to_center",0),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_castle_f_door_a"),
        (assign,":wall_height",328),
        (assign,":wall_width",137),
        (assign,":wall_length",20),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_castle_f_sally_door_a"),
        (assign,":wall_height",255),
        (assign,":wall_width",156),
        (assign,":wall_length",20),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_castle_e_sally_door_a"),
        (assign,":wall_height",247),
        (assign,":wall_width",150),
        (assign,":wall_length",16),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_earth_sally_gate_left"),
        (assign,":wall_height",602),
        (assign,":wall_width",304),
        (assign,":wall_length",40),
        (assign,":move_width_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_earth_sally_gate_right"),
        (assign,":wall_height",602),
        (assign,":wall_width",304),
        (assign,":wall_length",40),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_viking_keep_destroy_sally_door_right"),
        (assign,":wall_height",452),
        (assign,":wall_width",163),
        (assign,":wall_length",22),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_viking_keep_destroy_sally_door_left"),
        (assign,":wall_height",452),
        (assign,":wall_width",163),
        (assign,":wall_length",22),
        (assign,":move_width_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_castle_f_door_b"),
        (assign,":wall_height",248),
        (assign,":wall_width",150),
        (assign,":wall_length",16),
        (assign,":move_width_to_center",1),
        (assign,":inverse_width_movement",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_restroom_door"),
        (assign,":wall_height",218),
        (assign,":wall_width",16),
        (assign,":wall_length",111),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_stockade"),
        (eq,":prop_kind_id","spr_mm_stockade_cannon"),
        (assign,":wall_height",240),
        (assign,":wall_width",20),
        (assign,":wall_length",740),
        (assign,":move_width_to_center",1),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (is_between, ":prop_kind_id", "spr_mm_wall1", "spr_mm_stockade"),
        (assign,":wall_height",206),
        (assign,":wall_width",10),
        (assign,":wall_length",352),
        (assign,":move_width_to_center",1),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (is_between, ":prop_kind_id", "spr_mm_house_wall_1", "spr_mm_house_wall_11"),
        (assign,":wall_height",280),
        (assign,":wall_width",21),
        (assign,":wall_length",350),
        (assign,":is_ok",1),
      (else_try),
        (is_between, ":prop_kind_id", "spr_mm_house_wall_11", "spr_mm_wall1"),
        (assign,":wall_height",280),
        (assign,":wall_width",21),
        (assign,":wall_length",120),
        (assign,":is_ok",1),
      (else_try),
        (is_between, ":prop_kind_id", "spr_fortnew", "spr_fortnew_3"),
        (assign,":wall_height",980),
        (assign,":wall_width",1412),
        (assign,":wall_length",2841),
        (assign,":is_ok",1),
      (else_try),
        (is_between, ":prop_kind_id", "spr_fortnew_3", "spr_fortnew_4"),
        (assign,":wall_height",980),
        (assign,":wall_width",3735),
        (assign,":wall_length",2559),
        (assign,":is_ok",1),
      (else_try), 
        (eq,":prop_kind_id","spr_fortnew_4"),
        (assign,":wall_height",720),
        (assign,":wall_width",2312),
        (assign,":wall_length",1770),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_1_1", "spr_mm_new_wall_1_7"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_2_1", "spr_mm_new_wall_2_7"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_3_1", "spr_mm_new_wall_3_7"),
        (is_between, ":prop_kind_id", "spr_mm_woodenwall1", "spr_mm_stakes"),
        (assign,":wall_height",315),
        (assign,":wall_width",22),
        (assign,":wall_length",364),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_1_7", "spr_mm_new_wall_2_1"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_2_7", "spr_mm_new_wall_3_1"),
        (is_between, ":prop_kind_id", "spr_mm_new_wall_3_7", "spr_mm_woodenwall1"),
        (assign,":wall_height",315),
        (assign,":wall_width",22),
        (assign,":wall_length",182),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_stakes"),
        (eq,":prop_kind_id","spr_mm_stakes_destructible"),
        (assign,":wall_height",192),
        (assign,":wall_width",192),
        (assign,":wall_length",300),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stakes2_destructible"),
        (assign,":wall_height",123),
        (assign,":wall_width",190),
        (assign,":wall_length",200),
        (assign,":move_width_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_sandbags_destructible"),
        (assign,":wall_height",83),
        (assign,":wall_width",40),
        (assign,":wall_length",320),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_chevaux_de_frise_tri_destructible"),
        (assign,":wall_height",150),
        (assign,":wall_width",40),
        (assign,":wall_length",40),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_earthwork1_destructible"),
        (assign,":wall_height",200),
        (assign,":wall_width",300),
        (assign,":wall_length",600),
        (assign,":move_height_to_center",0),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_gabiondeploy_destructible"),
        (assign,":wall_height",100),
        (assign,":wall_width",30),
        (assign,":wall_length",30),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_fence1"),
        (assign,":wall_height",250),
        (assign,":wall_width",164),
        (assign,":wall_length",670),
        (assign,":move_width_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_plank_destructible"),
        (eq,":prop_kind_id","spr_plank_destructible2"),#patch1115 55/6
        (assign,":wall_height",4),
        (assign,":wall_width",40),
        (assign,":wall_length",400),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_short"),
        (assign,":wall_height",30),
        (assign,":wall_width",150),
        (assign,":wall_length",1000),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_med"),
        (assign,":wall_height",30),
        (assign,":wall_width",150),
        (assign,":wall_length",1500),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_long"),
        (assign,":wall_height",30),
        (assign,":wall_width",150),
        (assign,":wall_length",2000),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_watchtower"),
        (assign,":wall_height",670),
        (assign,":wall_width",300),
        (assign,":wall_length",300),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_dummy"),
        (assign,":wall_height",180),
        (assign,":wall_width",80),
        (assign,":wall_length",80),
        (assign,":is_ok",1),
      (else_try),
        (is_between,":prop_kind_id", "spr_mm_ship", "spr_mm_ship_schooner"),
        (assign,":wall_height",200),
        (assign,":wall_width",320),
        (assign,":wall_length",900),
        (assign,":move_height_to_center",0),
        (assign,":wall_height_offset",-33),
        (assign,":wall_length_offset",-150),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_ship_schooner"),
        (assign,":wall_height",800),
        (assign,":wall_width",900),
        (assign,":wall_length",3100),
        (assign,":move_height_to_center",0),
        (assign,":wall_length_offset",-550),
        (assign,":is_ok",1),
      (else_try),
        (is_between,":prop_kind_id","spr_crate_explosive_fra","spr_mm_bird"),
        (assign,":wall_height",74),
        (assign,":wall_width",78),
        (assign,":wall_length",78),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_poor_bridge1"),
        (assign,":wall_height",150),
        (assign,":wall_width",540),
        (assign,":wall_length",661),
        (assign,":move_height_to_center",0),
        (assign,":is_ok",1),
      # (else_try),
        # (eq,":prop_kind_id","spr_mm_sp_rich_bridge1"),
        # (assign,":wall_height",360),
        # (assign,":wall_width",680),
        # (assign,":wall_length",1454),
        # (assign,":move_length_to_center",1),
        # (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge2"),
        (assign,":wall_height",360),
        (assign,":wall_width",680),
        (assign,":wall_length",511),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge3"),
        (assign,":wall_height",360),
        (assign,":wall_width",680),
        (assign,":wall_length",440),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge4"),
        (assign,":wall_height",720),
        (assign,":wall_width",680),
        (assign,":wall_length",1320),
        (assign,":move_length_to_center",1),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_pontoon_bridge1"),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge2"),
        (assign,":wall_height",39),
        (assign,":wall_width",316),
        (assign,":wall_length",506),
        (assign,":is_ok",1),
      (else_try),
        (eq,":prop_kind_id","spr_mm_fence1"),
        (assign,":wall_height",115),
        (assign,":wall_width",35),
        (assign,":wall_length",661),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_palisade"),
        (eq,":prop_kind_id","spr_mm_palisaded"),
        (assign,":wall_height",239),
        (assign,":wall_width",19),
        (assign,":wall_length",197),
        (assign,":is_ok",1),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_barrier_20m"),
        (eq,":prop_kind_id","spr_mm_barrier_no_col_20m"),
        (assign,":wall_height",2000),
        (assign,":wall_length",2000),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_barrier_16m"),
        (eq,":prop_kind_id","spr_mm_barrier_no_col_16m"),
        (assign,":wall_height",252),
        (assign,":wall_length",1600),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_barrier_8m"),
        (eq,":prop_kind_id","spr_mm_barrier_no_col_8m"),
        (assign,":wall_height",252),
        (assign,":wall_length",800),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_barrier_4m"),
        (eq,":prop_kind_id","spr_mm_barrier_no_col_4m"),
        (assign,":wall_height",252),
        (assign,":wall_length",400),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_barrier_2m"),
        (eq,":prop_kind_id","spr_mm_barrier_no_col_2m"),
        (assign,":wall_height",252),
        (assign,":wall_length",200),
      (try_end),
      
      (try_begin),
        (is_between,":prop_kind_id","spr_mm_barrier_20m","spr_mm_house_wall_2dd"),
        (assign,":wall_width",2),
        (assign,":move_height_to_center",0),
        (assign,":rotate_z_90",1),
        (assign,":is_ok",1),
      (try_end),
      
      (try_begin),
        (eq,":is_ok",1),
        (assign,":max_length",0),
        (val_max,":max_length",":wall_height"),
        (val_max,":max_length",":wall_width"),
        (val_max,":max_length",":wall_length"),
      (try_end),
    (try_end),
    
    (assign,reg0,":is_ok"),
    (assign,reg1,":wall_height"),
    (assign,reg2,":wall_width"),
    (assign,reg3,":wall_length"),
    (assign,reg4,":move_height_to_center"),
    (assign,reg5,":move_width_to_center"),
    (assign,reg6,":move_length_to_center"),
    (assign,reg7,":rotate_z_90"),
    (assign,reg8,":wall_height_offset"),
    (assign,reg9,":wall_width_offset"),
    (assign,reg10,":wall_length_offset"),
    (assign,reg11,":inverse_width_movement"),
    (assign,reg12,":max_length"),
  ]),
  
  
  # script_get_prop_center
  # Input: prop_instance_id
  #  
  #        These only if set.. check by only fetching the height. Needed for optimisations.
  #      
  #        wall_height
  #        wall_width
  #        wall_length
  #        move_height_to_center
  #        move_width_to_center
  #        move_length_to_center
  #        rotate_z_90
  #
  # Output: pos42 = center_position
  # Output: pos43 = actual position
  #         reg1 = is_ok
  #         reg2 = wall_height
  #         reg3 = wall_width
  #         reg4 = wall_length
  # 
  # These not anymore! :)
  # #  #      reg5 = actual_height_div2
  # #  #      reg6 = actual_height_div2_min
  # #  #      reg7 = actual_width_div2
  # #  #      reg8 = actual_width_div2_min
  # #  #      reg9 = actual_length_div2
  # #  #      reg10 = actual_length_div2_min
  ("get_prop_center",
  [
    (store_script_param, ":prop_instance_id", 1),
    
    (assign,":is_ok",0),
    (assign,":wall_height",0),
    (assign,":wall_width",0),
    (assign,":wall_length",0),
    (assign,":wall_height_offset",0),
    (assign,":wall_width_offset",0),
    (assign,":wall_length_offset",0),
    (assign,":inverse_width_movement",0),
    (assign,":move_height_to_center",1),
    (assign,":move_width_to_center",0),
    (assign,":move_length_to_center",0),
    (assign,":rotate_z_90",0),
    
    (init_position,pos42),
    (init_position,pos43),
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      
      (scene_prop_get_slot,":cur_max_wall_length",":prop_instance_id",scene_prop_slot_destruct_max_length),
      
      (try_begin), # are the slots assigned yet?
        (gt,":cur_max_wall_length",0),
        (scene_prop_get_slot,":wall_height",":prop_instance_id",scene_prop_slot_destruct_wall_height),
        (scene_prop_get_slot,":wall_width",":prop_instance_id",scene_prop_slot_destruct_wall_width),
        (scene_prop_get_slot,":wall_length",":prop_instance_id",scene_prop_slot_destruct_wall_length),
        (scene_prop_get_slot,":move_height_to_center",":prop_instance_id",scene_prop_slot_destruct_move_height_to_center),
        (scene_prop_get_slot,":move_width_to_center",":prop_instance_id",scene_prop_slot_destruct_move_width_to_center),
        (scene_prop_get_slot,":move_length_to_center",":prop_instance_id",scene_prop_slot_destruct_move_length_to_center),
        (scene_prop_get_slot,":rotate_z_90",":prop_instance_id",scene_prop_slot_destruct_rotate_z_90),
        (scene_prop_get_slot,":wall_height_offset",":prop_instance_id",scene_prop_slot_destruct_wall_height_offset),
        (scene_prop_get_slot,":wall_width_offset",":prop_instance_id",scene_prop_slot_destruct_wall_width_offset),
        (scene_prop_get_slot,":wall_length_offset",":prop_instance_id",scene_prop_slot_destruct_wall_length_offset),
        (scene_prop_get_slot,":inverse_width_movement",":prop_instance_id",scene_prop_slot_destruct_inverse_width_movement),
      (else_try),
        # if not, then assign them.
        (prop_instance_get_scene_prop_kind, ":scene_prop_kind_id", ":prop_instance_id"),
        (call_script,"script_get_prop_kind_size_and_shift",":scene_prop_kind_id"),
        (eq,reg0,1), # is_ok :)
        (assign,":wall_height",reg1),
        (assign,":wall_width",reg2),
        (assign,":wall_length",reg3),
        (assign,":move_height_to_center",reg4),
        (assign,":move_width_to_center",reg5),
        (assign,":move_length_to_center",reg6),
        (assign,":rotate_z_90",reg7),
        (assign,":wall_height_offset",reg8),
        (assign,":wall_width_offset",reg9),
        (assign,":wall_length_offset",reg10),
        (assign,":inverse_width_movement",reg11),
       
        (call_script,"script_get_prop_scaled_size",":prop_instance_id"
            ,":wall_height", ":wall_width", ":wall_length"
            ,":wall_height_offset",":wall_width_offset",":wall_length_offset"),
        (eq,reg1,1), # is ok :)
        (assign,":wall_height",reg2),
        (assign,":wall_width",reg3),
        (assign,":wall_length",reg4),
        (assign,":cur_max_wall_length",reg5),
        (assign,":wall_height_offset",reg6),
        (assign,":wall_width_offset",reg7),
        (assign,":wall_length_offset",reg8),
         
        # assign the slots for next time.
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_height,":wall_height"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_width,":wall_width"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_length,":wall_length"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_height_to_center,":move_height_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_width_to_center,":move_width_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_move_length_to_center,":move_length_to_center"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_rotate_z_90,":rotate_z_90"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_height_offset,":wall_height_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_width_offset,":wall_width_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_wall_length_offset,":wall_length_offset"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_inverse_width_movement,":inverse_width_movement"),
        (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_destruct_max_length,":cur_max_wall_length"),
      (try_end),
      
      # We have values assigned now?
      (gt,":cur_max_wall_length",0),
      

      (prop_instance_get_position, pos42, ":prop_instance_id"),
      (copy_position,pos43,pos42), # copy to the orig pos
      # If needed rotate the position to fit in our hit detection system for the length/width on the right direction :)
      (try_begin), 
        (eq,":rotate_z_90",1),
        (position_rotate_z,pos42,90),
      (try_end),
      
      # move pos to center
      (try_begin),
        (this_or_next|eq,":move_length_to_center",1),
        (this_or_next|eq,":move_width_to_center",1),
        (eq,":move_height_to_center",1),
        
        (set_fixed_point_multiplier, 100),
        
        (try_begin),
          (neq,":wall_length_offset",0),
          (position_move_y,pos42,":wall_length_offset"),
        (try_end),
        (try_begin),
          (neq,":wall_width_offset",0),
          (position_move_x,pos42,":wall_width_offset"),
        (try_end),
        (try_begin),
          (neq,":wall_height_offset",0),
          (position_move_z,pos42,":wall_height_offset"),
        (try_end),
        
        (try_begin),
          (eq,":move_length_to_center",1),
          (store_div, ":actual_length_div2", ":wall_length", 2),
          (position_move_y,pos42,":actual_length_div2"),
        (try_end),
        (try_begin),
          (eq,":move_width_to_center",1),
          (store_div, ":actual_width_div2", ":wall_width", 2),
          (try_begin),
            (eq,":inverse_width_movement",1),
            (store_mul, ":actual_width_div2_min", ":actual_width_div2", -1), 
            (position_move_x,pos42,":actual_width_div2_min"),
          (else_try),
            (position_move_x,pos42,":actual_width_div2"),
          (try_end),
        (try_end),
        (try_begin),
          (eq,":move_height_to_center",1),
          (store_div, ":actual_height_div2", ":wall_height", 2),
          (position_move_z,pos42,":actual_height_div2"),
        (try_end),
      (try_end),
      
      (assign,":is_ok",1),
    (try_end),
    
    (assign,reg1,":is_ok"),
  ]),
  
  # script_get_prop_scaled_size
  # Input: prop_instance_id
  #  
  #        input
  #      
  #        wall_height
  #        wall_width
  #        wall_length
  #        move_height_to_center
  #        move_width_to_center
  #        move_length_to_center
  #        rotate_z_90

  #         reg1 = is_ok
  #         reg2 = wall_height
  #         reg3 = wall_width
  #         reg4 = wall_length
  #         reg5 = max_wall_length
  ("get_prop_scaled_size",
  [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":wall_height", 2),
    
    (assign,":is_ok",0),
    (assign,":wall_width",0),
    (assign,":wall_length",0),
    (assign,":max_wall_length",0),
    (assign,":wall_height_offset",0),
    (assign,":wall_width_offset",0),
    (assign,":wall_length_offset",0),
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      
      (try_begin),
        (gt,":wall_height",0),
        (store_script_param,":wall_width",3),
        (store_script_param,":wall_length",4),
        (store_script_param,":wall_height_offset",5),
        (store_script_param,":wall_width_offset",6),
        (store_script_param,":wall_length_offset",7),
      (else_try),
        (prop_instance_get_scene_prop_kind, ":scene_prop_kind_id", ":prop_instance_id"),
        (call_script,"script_get_prop_kind_size_and_shift",":scene_prop_kind_id"),
        (eq,reg0,1), # is_ok :)
        (assign,":wall_height",reg1),
        (assign,":wall_width",reg2),
        (assign,":wall_length",reg3),
        (assign,":wall_height_offset",reg8),
        (assign,":wall_width_offset",reg9),
        (assign,":wall_length_offset",reg10),
      (try_end),
      
      # We have values assigned now?
      (gt,":wall_height",0),

      (set_fixed_point_multiplier, 1000),
      
      # Resize wall to scale
      (prop_instance_get_scale, pos5, ":prop_instance_id"),
      (position_get_scale_x, ":width_scale", pos5),#x scale in meters * fixed point multiplier is returned
      (position_get_scale_y, ":length_scale", pos5),
      (position_get_scale_z, ":height_scale", pos5),  
      (val_abs,":width_scale"), # make positive so we can still hit a inverted wall.
      (val_abs,":length_scale"),
      (val_abs,":height_scale"),
      (val_mul, ":wall_width", ":width_scale"),            
      (val_mul, ":wall_length", ":length_scale"),
      (val_mul, ":wall_height", ":height_scale"),            
      (val_mul, ":wall_height_offset", ":height_scale"),
      (val_mul, ":wall_width_offset", ":width_scale"),
      (val_mul, ":wall_length_offset", ":length_scale"),
      (val_div, ":wall_width", 1000),
      (val_div, ":wall_length", 1000),
      (val_div, ":wall_height", 1000),
      (val_div, ":wall_height_offset", 1000),
      (val_div, ":wall_width_offset", 1000),
      (val_div, ":wall_length_offset", 1000),
      
      (assign,":max_wall_length",":wall_length"),
      (val_max,":max_wall_length",":wall_width"),
      (val_max,":max_wall_length",":wall_height"),
      
      (set_fixed_point_multiplier, 100),
      
      
      (assign,":is_ok",1),
    (try_end),
    
    (assign,reg1,":is_ok"),
    (assign,reg2,":wall_height"),
    (assign,reg3,":wall_width"),
    (assign,reg4,":wall_length"),
    (assign,reg5,":max_wall_length"),
    (assign,reg6,":wall_height_offset"),
    (assign,reg7,":wall_width_offset"), 
    (assign,reg8,":wall_length_offset"),
  ]),
  
  # script_deliver_damage_to_prop
  # Input: prop_instance_id
  #        damage
  #        use_pos47_particle (particle from pos47)
  #
  # Output: reg1 = is_ok
  ("deliver_damage_to_prop",
  [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":damage", 2),
    (store_script_param, ":use_pos47_particle", 3),
		(store_script_param, ":attacking_agent", 4),
    
    (assign,":is_ok",0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid,":prop_instance_id"),
      
      (scene_prop_get_slot,":health",":prop_instance_id",scene_prop_slot_health),
      (store_sub,":remaining_health",":health",":damage"),
      (val_max,":remaining_health",0),

      (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":prop_instance_id"),
      (try_begin),
				(eq, ":remaining_health", 0),
			  (this_or_next|eq, ":scene_prop_kind", "spr_plank_destructible2"),
				(eq, ":scene_prop_kind", "spr_plank_destructible"),
				(agent_is_active,":attacking_agent"),
				(agent_get_team,":team_no",":attacking_agent"),
				# planks are always 1, cost 2 to build.
				
				(try_begin),
					(eq,":team_no",0),
					(val_add,"$g_team_1_build_points",1),
				(else_try),
					(val_add,"$g_team_2_build_points",1),
				(try_end),     
				
				(call_script,"script_multiplayer_server_send_build_points"),
			(try_end),
      
      (try_begin),
        (neq,":scene_prop_kind","spr_earthwork1_destructible"), # not earthwork
        
        (assign,":run_else_clause",1),
        (assign,":limit_else",0),
        (try_begin),
          (is_between, ":scene_prop_kind", "spr_door_destructible", "spr_mm_barrier_20m"),
          (neg|scene_prop_slot_ge,":prop_instance_id",scene_prop_slot_health,1),
          (assign,":run_else_clause",0),
        (try_end),
        
        (try_begin),
          (gt, ":remaining_health", 0), # still health left
          (scene_prop_set_cur_hit_points, ":prop_instance_id", ":remaining_health"),
          (scene_prop_set_slot, ":prop_instance_id", scene_prop_slot_health, ":remaining_health"), # then write it back.
          
          (assign,":run_else_clause",0),
          
          (this_or_next|is_between, ":scene_prop_kind", "spr_fortnew", "spr_mm_new_wall_1_1"), # a fort
          (this_or_next|is_between, ":scene_prop_kind", "spr_mm_wall3", "spr_mm_palisade"), # old mm walls  #patch1115 fix 38/2
          (eq, ":scene_prop_kind", "spr_mm_ship_schooner"),

          
          (assign,":run_else_clause",1),
          (assign,":limit_else",1),
        (try_end),
        
        (try_begin),
          (eq,":run_else_clause",1),
          # were destroying this one.          
          (val_sub,":damage",":health"), # take the remaining health of this object from the damage.
          
          (prop_instance_get_position, pos48, ":prop_instance_id"),

          # (scene_prop_get_slot,":smoke_type",":prop_instance_id",scene_prop_slot_destruct_smoke_type),
          # (scene_prop_get_slot,":smoke_type2",":prop_instance_id",scene_prop_slot_destruct_smoke_type2),
          # (scene_prop_get_slot,":particles_type",":prop_instance_id",scene_prop_slot_destruct_particles_type),
          # (scene_prop_get_slot,":smoke_strength",":prop_instance_id",scene_prop_slot_destruct_smoke_strength),
          # (scene_prop_get_slot,":sound_id",":prop_instance_id",scene_prop_slot_destruct_sound_id),
          
          # pos60 is particle pos
          (try_begin),
            (eq,":use_pos47_particle",1),
            (copy_position,pos60,pos47), 
          (else_try),
            (copy_position,pos60,pos48), 
          (try_end),
          
          (call_script,"script_multiplayer_server_play_hit_effect",cannon_hit_effect_event_type_wall, ":scene_prop_kind"),

          
          (eq,":limit_else",0),
          
          (try_begin),
            (is_between,":scene_prop_kind", "spr_mm_ship", "spr_door_destructible"),
            
            (try_begin),
              (prop_instance_get_variation_id,":usable_boat",":prop_instance_id"),
              (eq,":usable_boat",1),
              
              (scene_prop_get_slot, ":bounce", ":prop_instance_id", scene_prop_slot_bounces),
              (neq, ":bounce", 1),  #patch1115 fix 39/1
              
              (set_fixed_point_multiplier,100),
              (copy_position,pos57,pos48),
              (position_get_distance_to_terrain,":dist",pos57),
              (val_mul,":dist",-1),
              (position_move_z,pos57,":dist"),
              (position_rotate_y,pos57,45),
              
              (call_script, "script_prop_instance_animate_to_position_with_childs", ":prop_instance_id", 1500,0,0),
              
              (store_mission_timer_a,":cur_time"),
              (scene_prop_set_slot, ":prop_instance_id", scene_prop_slot_time_left, ":cur_time"),
              (scene_prop_set_slot, ":prop_instance_id", scene_prop_slot_bounces, 1), # abuse bounces for destroyed
              
              (copy_position,pos56,pos48), # pos56 is sound pos.
              (call_script, "script_multiplayer_server_play_sound_at_position", "snd_boat_sinking"),
            (try_end),
          (else_try),  
            (is_between, ":scene_prop_kind", "spr_door_destructible", "spr_mm_barrier_20m"),
            
            (try_begin),
              (scene_prop_slot_ge,":prop_instance_id",scene_prop_slot_health,1),
              
              (prop_instance_get_position, pos8, ":prop_instance_id"),

              (assign,":rotation_change", 90),
              
              (prop_instance_get_variation_id,":combined_val",":prop_instance_id"),
              (store_div, ":reversed_rotation", ":combined_val", 10),
              
              (try_begin),
                (eq, ":reversed_rotation", 1),
                (val_mul,":rotation_change",-1),
              (try_end),
              
              (position_rotate_x, pos8, ":rotation_change"),
              (prop_instance_animate_to_position, ":prop_instance_id", pos8, 70), #animate to position 1 in 0.7 second
              
              (scene_prop_set_cur_hit_points, ":prop_instance_id", 0),
              (scene_prop_set_hit_points, ":prop_instance_id", 0),
              (scene_prop_set_slot, ":prop_instance_id", scene_prop_slot_health, 0),
              (prop_instance_enable_physics, ":prop_instance_id", 0),
              
              # On prop destruction set the health for clients
              (try_begin),
                (game_in_multiplayer_mode),
                
                (assign,":packed_value",":prop_instance_id"),
                (val_lshift,":packed_value",1),
                (val_add,":packed_value",1),
                
                (try_for_players, ":player_no3", 1),
                  (player_is_active, ":player_no3"),
                  (multiplayer_send_int_to_player, ":player_no3", multiplayer_event_return_destructible_prop_spawn_or_destroy, ":packed_value"),
                (try_end),
              (try_end),
            (try_end),
          (else_try),
            #fetch next kind
            (call_script,"script_get_next_stage_acording_to_damage",":prop_instance_id",":damage",scene_prop_slot_destruct_next_stage_1),
            (assign,":next_kind",reg1),
            (assign,":damage",reg2), # remaining damage for new object.
            
            (copy_position,pos49,pos48), # pos49 is prop pos.
            
            (set_fixed_point_multiplier, 100),
            (try_begin),
              (is_between,":next_kind","spr_mm_palisadedd","spr_crate_explosive"), # a construction object
              
              (call_script, "script_get_prop_kind_for_constr_kind", ":next_kind"),
              (store_mul,":x_offset",reg1,-1),
              (store_mul,":y_offset",reg2,-1),
              (store_mul,":z_offset",reg3,-1),
              
              (position_move_x,pos49,":x_offset"),
              (position_move_y,pos49,":y_offset"),
              (position_move_z,pos49,":z_offset"),
            (try_end),
            
            # (assign,":agents_to_teleport_count",0),
            # (try_for_agents,":cur_loop_agent"),
              # (agent_is_active,":cur_loop_agent"),
              # (agent_is_alive,":cur_loop_agent"),
              # (scene_prop_has_agent_on_it, ":prop_instance_id", ":cur_loop_agent"),
              # (troop_set_slot, "trp_agents_to_teleport_dummy", ":agents_to_teleport_count", ":cur_loop_agent"),
              
              # (agent_get_position,pos56,":cur_loop_agent"),
              # (position_get_x,":agent_x_pos",pos56),
              # (position_get_y,":agent_y_pos",pos56),
              # (position_get_z,":agent_z_pos",pos56),
              # (position_get_rotation_around_z,":agent_z_rot",pos56),
              # (agent_set_slot,":cur_loop_agent",slot_agent_teleport_pos_x,":agent_x_pos"),
              # (agent_set_slot,":cur_loop_agent",slot_agent_teleport_pos_y,":agent_y_pos"),
              # (agent_set_slot,":cur_loop_agent",slot_agent_teleport_pos_z,":agent_z_pos"),
              # (agent_set_slot,":cur_loop_agent",slot_agent_teleport_pos_z_rot,":agent_z_rot"),
              
              # (val_add,":agents_to_teleport_count",1),
            # (try_end),
            
            (try_begin),
              (scene_prop_slot_eq, ":prop_instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
              (scene_prop_get_slot,":width_scale",":prop_instance_id",scene_prop_slot_x_scale),
              (scene_prop_get_slot,":length_scale",":prop_instance_id",scene_prop_slot_y_scale),
              (scene_prop_get_slot,":height_scale",":prop_instance_id",scene_prop_slot_z_scale),
              
              (call_script, "script_find_or_create_scene_prop_instance", ":next_kind", 0, 0, 1, ":width_scale",":length_scale",":height_scale"),
            (else_try),
              (call_script, "script_find_or_create_scene_prop_instance", ":next_kind", 0, 0, 0),
            (try_end),
            (assign,":new_prop_instance_id",reg0),
            
           
            
            (scene_prop_get_slot,":pile_prop_begin",":prop_instance_id",scene_prop_slot_destruct_pile_prop_begin),
            (scene_prop_get_slot,":pile_prop_end",":prop_instance_id",scene_prop_slot_destruct_pile_prop_end),
            (scene_prop_get_slot,":linked_cannons_index",":prop_instance_id",scene_prop_slot_linked_prop),
            
            (try_begin),
              (this_or_next|is_between,":next_kind",mm_destroyed_props_begin,mm_destroyed_props_end), # This is the final stage.
              (eq,":next_kind","spr_fortnew8"),
              
              (try_begin),
                (neq,":linked_cannons_index",0), # not zero.
                
                (try_for_range,":cannon_type", mm_cannon_wood_types_begin, mm_cannon_wood_types_end),
                  (try_for_prop_instances, ":cur_instance_id", ":cannon_type", somt_temporary_object),
                    (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_is_spawned,1), # only spawned ones obviously want to be checked.
                    
                    (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_linked_prop,":linked_cannons_index"),  # This cannon has a link with this wall!
                    
                    (scene_prop_get_slot,":cannon_maper_placed",":cur_instance_id", scene_prop_slot_replacing), # get orig cannon its replacing
                    (try_begin),
                      (prop_instance_is_valid,":cannon_maper_placed"),
                      
                      (scene_prop_set_slot,":cannon_maper_placed", scene_prop_slot_replaced_by, -1), # set to not replaced for respawn next round
                    (try_end),
                    
                    (call_script, "script_clean_up_prop_instance_with_childs", ":cur_instance_id"), # Then clean that bitch up.
                  (try_end), 
                (try_end),
                
                (try_for_range,":door_type", "spr_door_destructible", "spr_mm_barrier_20m"),
                  (try_for_prop_instances, ":cur_instance_id", ":door_type", somt_object),

                    (scene_prop_slot_eq,":cur_instance_id",scene_prop_slot_linked_prop,":linked_cannons_index"),  # This cannon has a link with this wall!
                    
                    (scene_prop_slot_ge,":cur_instance_id",scene_prop_slot_health,1),
                    
                    (prop_instance_get_position, pos8, ":cur_instance_id"),

                   # (assign, ":rotate_side", 88),
                    
                    #(copy_position,pos37,pos8),

                   # (call_script,"script_get_hightest_pos_and_angle_from_pos",100,0,0),
                    #(assign,":is_ok",reg0),

                    #(eq,":is_ok",1),
                  #  (copy_position,pos8,pos37),
                    
                    
                    #(init_position, pos3),
                    # (copy_position,pos3,pos8),
                    
                    # (position_move_y, pos3, -100),
                    # (position_move_x, pos3, -50),
                    # (position_move_z, pos3, 100),
                    # (position_get_distance_to_ground_level, ":height_to_terrain", pos3),
                    # (val_sub, ":height_to_terrain", 100),
                   ##(assign, ":z_difference", ":height_to_terrain"),
                    # (val_div, ":height_to_terrain", 3),
                    # (val_add, ":rotate_side", ":height_to_terrain"),
                    
                    # (position_transform_position_to_parent, pos4, pos8, pos3),
                    # 
                    # (position_get_distance_to_ground_level, ":height_to_terrain", pos4),
                    # (val_sub, ":height_to_terrain", 100),
                    # (assign, ":z_difference", ":height_to_terrain"),
                    # (val_div, ":z_difference", 3),

                    # (val_add, ":rotate_side", ":z_difference"),
                    
                    (assign,":rotation_change", 90),
                    
                    (prop_instance_get_variation_id,":combined_val",":cur_instance_id"),
                    (store_div, ":reversed_rotation", ":combined_val", 10),
                    
                    (try_begin),
                      (eq, ":reversed_rotation", 1),
                      (val_mul,":rotation_change",-1),
                    (try_end),
                    
                    (position_rotate_x, pos8, ":rotation_change"),
                    (prop_instance_animate_to_position, ":cur_instance_id", pos8, 70), #animate to position 1 in 0.7 second
                    
                    (scene_prop_set_cur_hit_points, ":cur_instance_id", 0),
                    (scene_prop_set_hit_points, ":cur_instance_id", 0),
                    (scene_prop_set_slot, ":cur_instance_id", scene_prop_slot_health, 0),
                    (prop_instance_enable_physics, ":cur_instance_id", 0),
                    # On prop destruction set the health for clients
                    (try_begin),
                      (game_in_multiplayer_mode),
                      
                      (assign,":packed_value",":cur_instance_id"),
                      (val_lshift,":packed_value",1),
                      (val_add,":packed_value",1),
                      
                      (try_for_players, ":player_no6", 1),
                        (player_is_active, ":player_no6"),
                        (multiplayer_send_2_int_to_player, ":player_no6", multiplayer_event_return_destructible_prop_spawn_or_destroy, ":packed_value"),
                      (try_end),
                    (try_end),
                  (try_end),
                (try_end),      
              (try_end),
              
            (else_try),
              (prop_instance_is_valid,":new_prop_instance_id"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_linked_prop,":linked_cannons_index"),
              
              # assign destructable prop slots to this new one.
              (scene_prop_get_slot,":cur_wall_height",":prop_instance_id",scene_prop_slot_destruct_wall_height),
              (scene_prop_get_slot,":cur_wall_width",":prop_instance_id",scene_prop_slot_destruct_wall_width),
              (scene_prop_get_slot,":cur_wall_length",":prop_instance_id",scene_prop_slot_destruct_wall_length),
              (scene_prop_get_slot,":move_height_to_center",":prop_instance_id",scene_prop_slot_destruct_move_height_to_center),
              (scene_prop_get_slot,":move_width_to_center",":prop_instance_id",scene_prop_slot_destruct_move_width_to_center),
              (scene_prop_get_slot,":move_length_to_center",":prop_instance_id",scene_prop_slot_destruct_move_length_to_center),
              (scene_prop_get_slot,":rotate_z_90",":prop_instance_id",scene_prop_slot_destruct_rotate_z_90),
              (scene_prop_get_slot,":cur_wall_height_offset",":prop_instance_id",scene_prop_slot_destruct_wall_height_offset),
              (scene_prop_get_slot,":cur_wall_width_offset",":prop_instance_id",scene_prop_slot_destruct_wall_width_offset),
              (scene_prop_get_slot,":cur_wall_length_offset",":prop_instance_id",scene_prop_slot_destruct_wall_length_offset),
              (scene_prop_get_slot,":inverse_width_movement",":prop_instance_id",scene_prop_slot_destruct_inverse_width_movement),
              (scene_prop_get_slot,":cur_max_wall_length",":prop_instance_id",scene_prop_slot_destruct_max_length),
              
              (scene_prop_get_slot,":width_scale",":prop_instance_id",scene_prop_slot_x_scale),
              (scene_prop_get_slot,":length_scale",":prop_instance_id",scene_prop_slot_y_scale),
              (scene_prop_get_slot,":height_scale",":prop_instance_id",scene_prop_slot_z_scale),
              (scene_prop_get_slot,":has_scale",":prop_instance_id", scene_prop_slot_is_scaled),
              
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_height,":cur_wall_height"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_width,":cur_wall_width"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_length,":cur_wall_length"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_move_height_to_center,":move_height_to_center"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_move_width_to_center,":move_width_to_center"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_move_length_to_center,":move_length_to_center"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_rotate_z_90,":rotate_z_90"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_height_offset,":cur_wall_height_offset"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_width_offset,":cur_wall_width_offset"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_wall_length_offset,":cur_wall_length_offset"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_inverse_width_movement,":inverse_width_movement"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_max_length,":cur_max_wall_length"),
              
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_x_scale,":width_scale"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_y_scale,":length_scale"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_z_scale,":height_scale"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_is_scaled,":has_scale"),
              
              # (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_smoke_type,":smoke_type"),
              # (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_smoke_type2,":smoke_type2"),
              # (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_particles_type,":particles_type"),
              # (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_smoke_strength,":smoke_strength"),
              # (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_sound_id,":sound_id"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_pile_prop_begin,":pile_prop_begin"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_destruct_pile_prop_end,":pile_prop_end"),
              
              #Shift the values for next stage.
              (assign,":next_kind2",":next_kind"),
              (try_for_range,":cur_index",1,10), # 9 loops
                (gt,":next_kind2",-1),
                (store_add,":slot_index",":cur_index",scene_prop_slot_destruct_next_stage_1),
                (scene_prop_get_slot,":next_kind2",":prop_instance_id",":slot_index"),
                (gt,":next_kind2",-1),
                
                (val_sub,":slot_index",1), # sub one from the index.
                (scene_prop_set_slot,":new_prop_instance_id",":slot_index",":next_kind2"),
              (try_end),
              
              (gt, ":damage", 0), # still damage left?
              (scene_prop_get_slot, ":health", ":new_prop_instance_id", scene_prop_slot_health),
              (store_sub,":remaining_health",":health",":damage"),
              (scene_prop_set_cur_hit_points, ":new_prop_instance_id", ":remaining_health"),
              (scene_prop_set_slot,":new_prop_instance_id",scene_prop_slot_health, ":remaining_health"), # then add to the new prop.
            (try_end),  
            
            (try_begin),
              (gt,":pile_prop_begin",-1),
              (gt,":pile_prop_end",-1),
              
              (store_random_in_range, ":pile_ammount", 2, 4), # between 2 and 3 piles.
              
              (try_for_range,":unused",0,":pile_ammount"),
                (store_random_in_range, ":pile_prop_type", ":pile_prop_begin", ":pile_prop_end"),
                (copy_position,pos8,pos48),
                
                (try_begin), # move a bit for this walls since their not centered :))
                  (is_between,":scene_prop_kind","spr_mm_wall1","spr_mm_stockade"),
                 
                  (position_move_x,pos8,5),
                  (position_move_y,pos8,176),
                (try_end),
                
                # (copy_position,pos49,pos8),
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_ctf_flag_kingdom_1", 0, 0, 0),
                
                # (position_move_x,pos49,101),
                # (position_move_y,pos49,121),
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_ctf_flag_kingdom_2", 0, 0, 0),
                
                # (position_move_x,pos49,-202),
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_ctf_flag_kingdom_3", 0, 0, 0),
                
                # (position_move_y,pos49,-242),
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_ctf_flag_kingdom_4", 0, 0, 0),
                
                # (position_move_x,pos49,202),
                # (call_script, "script_find_or_create_scene_prop_instance", "spr_ctf_flag_kingdom_5", 0, 0, 0),
                
                (store_random_in_range, ":front", 0, 2),
                
                (assign,":x_position",0),
                (try_begin),
                  (eq,":front",1),
                  (store_random_in_range, ":x_position", 37, 101),
                (else_try),
                  (store_random_in_range, ":x_position", -101, -37),
                (try_end),
                (store_random_in_range, ":y_position", -121, 121),
                
                
                (position_move_x,pos8,":x_position"),
                (position_move_y,pos8,":y_position"),
                (position_move_z,pos8,-20),
                (position_set_z_to_ground_level,pos8),
                
                (init_position,pos37),
                (position_copy_origin,pos37,pos8),
                
                (call_script,"script_get_angle_of_ground_at_pos",0, ":scene_prop_kind"),
                (assign,":x_rot",reg0),
                (assign,":y_rot",reg1),
                (store_random_in_range, ":z_rot", 0, 360),                
                (val_min,":x_rot",45),
                (val_max,":x_rot",-45),
                (val_min,":y_rot",45),
                (val_max,":y_rot",-45),
                
                (position_rotate_y,pos37,":y_rot"),
                (position_rotate_x,pos37,":x_rot"),
                (position_rotate_z,pos37,":z_rot"),
                
                (copy_position,pos49,pos37),
                (call_script, "script_find_or_create_scene_prop_instance", ":pile_prop_type", 0, 0, 0),
              (try_end),
              # (store_random_in_range, ":pile_prop_back", ":pile_prop_begin", ":pile_prop_end"),
              
              # (try_begin),
                # (copy_position,pos8,pos48),
                # (position_move_x,pos8,-100),
                # (position_move_z,pos8,-20),
                # (position_set_z_to_ground_level,pos8),
                ##(position_move_x,pos8,100),
                # (position_rotate_z,pos8,180), # rotate 180 degrees :)
                # (copy_position,pos49,pos8), # pos49 is prop pos.
                # (call_script, "script_find_or_create_scene_prop_instance", ":pile_prop_front", 0, 1, 0),
              # (try_end),
              
              # (try_begin),
                # (copy_position,pos9,pos48),
                # (position_move_x,pos9,100),
                # (position_move_z,pos9,-20),
                # (position_set_z_to_ground_level,pos9),
                ##(position_move_x,pos9,-100),
                # (copy_position,pos49,pos9), # pos49 is prop pos.
                # (call_script, "script_find_or_create_scene_prop_instance", ":pile_prop_back", 0, 1, 0),
              # (try_end),
            (try_end),
      
            # Clean up old prop
            # (try_begin), # only sink it if its close to the ground, else will look weird for anything below it.
              # (gt,":sink_speed",0),
              # (position_get_distance_to_terrain,":dist",pos48),
              # (gt,":dist",50),
              # (assign,":sink_speed",0),
            # (try_end),
            
            (position_set_z,pos48,-3000),
            (try_begin),
              (prop_instance_is_animating, ":animating", ":prop_instance_id"),
              (eq,":animating",1),
              (prop_instance_stop_animating, ":prop_instance_id"),
            (try_end),
            # (try_begin),
              # (gt,":sink_speed",0),
              # (prop_instance_animate_to_position, ":prop_instance_id", pos48, ":sink_speed"),
            # (else_try),
            (prop_instance_set_position,":prop_instance_id",pos48),
            #(try_end),
            
            (scene_prop_get_slot, ":window_instance", ":prop_instance_id", scene_prop_slot_child_prop1),
            (try_begin),
              (prop_instance_is_valid,":window_instance"),
              (scene_prop_set_slot,":prop_instance_id",scene_prop_slot_child_prop1,-1),
              (call_script, "script_clean_up_prop_instance", ":window_instance"),
            (try_end),
            
            
            
            # (try_for_range,":cur_slot_index",0,":agents_to_teleport_count"),
              # (troop_get_slot,":cur_loop_agent","trp_agents_to_teleport_dummy",":cur_slot_index"),
              # (agent_is_active,":cur_loop_agent"),
              # (agent_is_alive,":cur_loop_agent"),
              
             ## (assign,reg22,":cur_loop_agent"),
            ##  (display_message,"@moved agent: {reg22}"),
             
              # (agent_get_slot, ":agent_x_pos", ":cur_loop_agent", slot_agent_teleport_pos_x),
              # (agent_get_slot, ":agent_y_pos", ":cur_loop_agent", slot_agent_teleport_pos_y),
              # (agent_get_slot, ":agent_z_pos", ":cur_loop_agent", slot_agent_teleport_pos_z),
              # (agent_get_slot, ":agent_z_rot", ":cur_loop_agent", slot_agent_teleport_pos_z_rot),
              
              # (init_position,pos56),
              # (position_set_x,pos56,":agent_x_pos"),
              # (position_set_y,pos56,":agent_y_pos"),
              # (position_set_z,pos56,":agent_z_pos"),
              # (position_rotate_z,pos56,":agent_z_rot"),
              
              # (agent_set_position,":cur_loop_agent",pos56),
            # (try_end),
            
          (try_end),
        (try_end),
        
      (else_try),
        # for earthworks we do something totally difirent :)
        (scene_prop_get_slot,":ground_offset",":prop_instance_id", scene_prop_slot_ground_offset),
        
        (neq,":ground_offset",-100), # it is not below 1 meter underground then lower it.

        (val_max,":remaining_health",1),
        
        (scene_prop_set_slot, ":prop_instance_id", scene_prop_slot_health, ":remaining_health"), # then write it back.
        (scene_prop_set_cur_hit_points, ":prop_instance_id", ":remaining_health"),
        
        (store_div,":z_change",":damage",-2),
        # (assign,":z_change",-2),
        
        (val_add,":ground_offset",":z_change"), # lower it by that value
        (assign,":old_ground_offset",":ground_offset"),
        (val_max,":ground_offset",-100), # not below -100 centimeters.
        
        (val_sub,":old_ground_offset",":ground_offset"),# change z_change due to val_max
        (val_sub,":z_change",":old_ground_offset"),
        
        (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_ground_offset, ":ground_offset"),
        
        (prop_instance_get_position,pos48,":prop_instance_id"),
        (position_move_z,pos48,":z_change"),
        (prop_instance_animate_to_position, ":prop_instance_id", pos48, 10),
      (try_end),
      
      (assign,":is_ok",1),
    (try_end),
    
    (assign,reg1,":is_ok"),
  ]),
  
  # script_get_destruction_properties_of_object
  # Input: prop_kind_id
  # Output: reg1 = is_ok
  #         reg0 = smoke_type
  #         reg1 = smoke_type2
  #         reg2 = particles_type
  #         reg3 = smoke_strength
  #         reg4 = sound_id
  #         reg5 = pile_prop_begin
  #         reg6 = pile_prop_end
  ("get_destruction_properties_of_object",
  [
    (store_script_param, ":prop_kind_id", 1),
    
    (assign,":smoke_type",-1),
    (assign,":smoke_type2",-1),
    (assign,":particles_type",-1),
    (assign,":smoke_strength", 80),
    (assign,":sound_id", -1),
    (assign,":pile_prop_begin",-1),
    (assign,":pile_prop_end",-1),
    #(assign,":sink_speed",0), # speed in ms to sink 30 meters # new default 0 due to buggsss
    (try_begin),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (try_begin),  
        (this_or_next|eq,":prop_kind_id","spr_mm_stockade"),
        (eq,":prop_kind_id","spr_mm_stockade_cannon"),
        (assign,":smoke_type","psys_dummy_smoke_big"),
        (assign,":sound_id","snd_dummy_destroyed"),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_wall1", "spr_mm_walldesert1"),
        (is_between, ":prop_kind_id", "spr_mm_wall3", "spr_mm_stockade"),
        
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_wallhit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        (assign,":pile_prop_begin","spr_mm_wall_stones1"),
        (assign,":pile_prop_end","spr_mm_wall_stonesdesert1"),
      (else_try),
        (is_between, ":prop_kind_id", "spr_mm_walldesert1", "spr_mm_wallwood1"),
        
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_walldeserthit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        (assign,":pile_prop_begin","spr_mm_wall_stonesdesert1"),
        (assign,":pile_prop_end","spr_mm_wallgate"),
      (else_try), 
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_house_wall_1", "spr_mm_house_wall_11"),
        (is_between, ":prop_kind_id", "spr_mm_new_wall_1_1", "spr_mm_woodenwall1"),
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_wallhit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        (assign,":pile_prop_begin","spr_mm_wall_stones1"),
        (assign,":pile_prop_end","spr_mm_wall_stonesdesert1"),
      (else_try), 
        (is_between, ":prop_kind_id", "spr_mm_house_wall_11", "spr_mm_wall1"),
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_wallhit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        (assign,":pile_prop_begin","spr_mm_wall_stones1"),
        (assign,":pile_prop_end","spr_mm_wall_stonesdesert1"),
      (else_try), 
        # The stage before end destruction of cannon has difirent particles.
        (this_or_next|eq,":prop_kind_id","spr_fortnew8"),
        (this_or_next|eq,":prop_kind_id","spr_fortnew_110"),
        (this_or_next|eq,":prop_kind_id","spr_fortnew_28"),
        (this_or_next|eq,":prop_kind_id","spr_fortnew_38"),
        (eq,":prop_kind_id","spr_fortnew_4"),
        
        (assign,":smoke_type", "psys_fort_complete_wallhit_smoke"),
        (assign,":smoke_type2","psys_fort_complete_wallhit_smoke2"),
        (assign,":particles_type","psys_fort_complete_wallhit_particles"),
        (assign,":smoke_strength", 80),
        (assign,":sound_id","snd_cannon_hit_wall"),
        #(assign,":sink_speed",0),
      (else_try),
        (is_between, ":prop_kind_id", "spr_fortnew", "spr_mm_new_wall_1_1"),
        (assign,":smoke_type", "psys_fort_wallhit_smoke"),
        (assign,":smoke_type2","psys_fort_wallhit_smoke2"),
        (assign,":particles_type","psys_fort_wallhit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        #(assign,":sink_speed",0),
        #(assign,":pile_prop_begin","spr_mm_wall_stones1"),
        #(assign,":pile_prop_end","spr_mm_wall_stonesdesert1"),
      (else_try), 
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_wallwood1", "spr_mm_wall3"),
        (is_between, ":prop_kind_id", "spr_mm_woodenwall1", "spr_mm_sp_rich_bridge4"),
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_woodwallhit_particles"),
        (assign,":smoke_strength", 100),
        (assign,":sound_id","snd_cannon_hit_wood_wall"),
        (assign,":pile_prop_begin","spr_mm_wall_wood_planks1"),
        (assign,":pile_prop_end","spr_mm_wall_stones1"),
      (else_try), 
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_sp_rich_bridge4", "spr_mm_stakes"),
        (eq, ":prop_kind_id", "spr_fortnew"),
        (assign,":smoke_type", "psys_fort_wallhit_smoke"),
        (assign,":smoke_type2","psys_fort_wallhit_smoke2"),
        (assign,":particles_type","psys_fort_wallhit_particles"),
        (assign,":smoke_strength", 60),
        (assign,":sound_id","snd_cannon_hit_wall"),
        #(assign,":sink_speed",0),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_door_destructible", "spr_mm_barrier_20m"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_stakes", "spr_mm_dummy"),
        (eq,":prop_kind_id","spr_mm_dummy"),
        (assign,":smoke_type","psys_dummy_smoke"),
        (assign,":smoke_strength",100),
        (assign,":sound_id", "snd_dummy_destroyed"),
      (else_try),
        (is_between,":prop_kind_id", "spr_mm_ship", "spr_door_destructible"),
        
        (assign,":smoke_type", "psys_wallhit_smoke"),
        (assign,":smoke_type2","psys_wallhit_smoke2"),
        (assign,":particles_type","psys_woodwallhit_particles"),
        (assign,":smoke_strength", 100),
        (assign,":sound_id", "snd_dummy_destroyed"),
      (try_end),
    (try_end),
    
    (assign,reg0,":smoke_type"),
    (assign,reg1,":smoke_type2"),
    (assign,reg2,":particles_type"),
    (assign,reg3,":smoke_strength"),
    (assign,reg4,":sound_id"),
    (assign,reg5,":pile_prop_begin"),
    (assign,reg6,":pile_prop_end"),
    #(assign,reg7,":sink_speed"),
  ]),
  
  # script_get_next_stage_acording_to_damage
  # Input: prop_instance_id
  #        damage
  #        cur_index
  #
  # Output: reg1 = next_kind
  # Output: reg2 = damage left for new object
  ("get_next_stage_acording_to_damage",
  [
    (store_script_param, ":prop_orig_instance", 1),
    (store_script_param, ":damage", 2),
    (store_script_param, ":cur_index", 3),
    
    (assign,":next_kind",-1),
    (try_begin),
      #(is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      (prop_instance_is_valid,":prop_orig_instance"),
      (le,":cur_index",scene_prop_slot_destruct_next_stage_10),
      
      (scene_prop_get_slot,":next_kind",":prop_orig_instance",":cur_index"),
      
      # (call_script,"script_get_next_destruction_stage_prop_kind",":prop_kind_id"),
      # (assign,":next_kind",reg1),
      
      (gt,":next_kind",-1),
      (try_begin),
        (neg|is_between,":next_kind",mm_destroyed_props_begin,mm_destroyed_props_end),
        
        # (call_script,"script_get_default_health_for_prop_kind",":next_kind"),
        # (assign,":max_health",reg1),
        (scene_prop_get_slot,":max_health",":prop_orig_instance",scene_prop_slot_max_health),
        (gt,":max_health",0), # only when the prop even has health.
        
        (val_sub,":damage",":max_health"), # Take the new health from the remaining damage.
        (try_begin),
          (ge,":damage",0), # We still have damage left after substracting a whole new object.. Damnit! lets get the next one.
          (val_add,":cur_index",1),
          (le,":cur_index",scene_prop_slot_destruct_next_stage_10),
          (call_script,"script_get_next_stage_acording_to_damage",":prop_orig_instance",":damage",":cur_index"),
          (assign,":next_kind",reg1),
          (assign,":damage",reg2),
        (try_end),
      (else_try),
        (assign,":damage",0),
      (try_end),
    (try_end),
    
    (assign,reg1,":next_kind"),
    (assign,reg2,":damage"),
  ]),
  
  # script_get_next_destruction_stage_prop_kind
  # Input: prop_instance_id
  #        damage
  #
  # Output: reg1 = next_kind
  ("get_next_destruction_stage_prop_kind",
  [
    (store_script_param, ":prop_kind_id", 1),
    
    (assign,":next_kind",-1),
    (try_begin),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (try_begin),
        (eq,":prop_kind_id","spr_mm_wall1"),
        (troop_set_slot, "trp_destroyed_props_dummy", 1, "spr_mm_wall1d"),
        (troop_set_slot, "trp_destroyed_props_dummy", 2, "spr_mm_wall1dd"),
        (store_random_in_range, ":slot", 1, 3),
        (troop_get_slot, ":next_kind", "trp_destroyed_props_dummy", ":slot"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_walldesert1"),
        (troop_set_slot, "trp_destroyed_props_dummy", 1, "spr_mm_walldesert1d"),
        (troop_set_slot, "trp_destroyed_props_dummy", 2, "spr_mm_walldesert1dd"),
        (store_random_in_range, ":slot", 1, 3),
        (troop_get_slot, ":next_kind", "trp_destroyed_props_dummy", ":slot"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_wallwood1"),
        (troop_set_slot, "trp_destroyed_props_dummy", 1, "spr_mm_wallwood1d"),
        (troop_set_slot, "trp_destroyed_props_dummy", 2, "spr_mm_wallwood1dd"),
        (store_random_in_range, ":slot", 1, 3),
        (troop_get_slot, ":next_kind", "trp_destroyed_props_dummy", ":slot"),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_wall1d"),
        (this_or_next|eq,":prop_kind_id","spr_mm_wall1dd"),
        (this_or_next|eq,":prop_kind_id","spr_mm_wall3"),
        (this_or_next|eq,":prop_kind_id","spr_mm_wall4"),
        (eq,":prop_kind_id","spr_mm_wall5"),
        (assign,":next_kind","spr_mm_wall2"),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_walldesert1d"),
        (eq,":prop_kind_id","spr_mm_walldesert1dd"),
        (assign,":next_kind","spr_mm_walldesert2"),
      (else_try),
        (this_or_next|eq,":prop_kind_id","spr_mm_wallwood1d"),
        (eq,":prop_kind_id","spr_mm_wallwood1dd"),
        (assign,":next_kind","spr_mm_wallwood2"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stakes"),
        (assign,":next_kind","spr_mm_stakes_destroyed"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stakes_destructible"),
        (assign,":next_kind","spr_mm_stakes_construct"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stakes2_destructible"),
        (assign,":next_kind","spr_mm_stakes2_construct"),
      (else_try),
        (eq,":prop_kind_id","spr_sandbags_destructible"),
        (assign,":next_kind","spr_sandbags_construct"),
      (else_try),
        (eq,":prop_kind_id","spr_chevaux_de_frise_tri_destructible"),
        (assign,":next_kind","spr_chevaux_de_frise_tri_construct"),
      (else_try),
        (eq,":prop_kind_id","spr_gabiondeploy_destructible"),
        (assign,":next_kind","spr_gabiondeploy_construct"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_fence1"),
        (assign,":next_kind","spr_mm_fence1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_short"),
        (assign,":next_kind","spr_mm_constr_pontoon_short"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_med"),
        (assign,":next_kind","spr_mm_constr_pontoon_med"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_pontoon_bridge_long"),
        (assign,":next_kind","spr_mm_constr_pontoon_long"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_watchtower"),
        (assign,":next_kind","spr_mm_constr_watchtower"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_dummy"),
        (assign,":next_kind","spr_mm_dummy_destroyed"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stockade"),
        (assign,":next_kind","spr_mm_stockade_destroyed"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_stockade_cannon"),
        (assign,":next_kind","spr_mm_stockade_cannon_destroyed"),
      (else_try), # New walls
        (eq,":prop_kind_id","spr_mm_house_wall_1"),
        (troop_set_slot, "trp_destroyed_props_dummy", 1, "spr_mm_house_wall_1d"),
        (troop_set_slot, "trp_destroyed_props_dummy", 2, "spr_mm_house_wall_7d"),
        (store_random_in_range, ":slot", 1, 3),
        (troop_get_slot, ":next_kind", "trp_destroyed_props_dummy", ":slot"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_1d"),
        (troop_set_slot, "trp_destroyed_props_dummy", 1, "spr_mm_house_wall_2dd"),
        (troop_set_slot, "trp_destroyed_props_dummy", 2, "spr_mm_house_wall_2ddd"),
        (troop_set_slot, "trp_destroyed_props_dummy", 3, "spr_mm_house_wall_7ddd"),
        (store_random_in_range, ":slot", 1, 4),
        (troop_get_slot, ":next_kind", "trp_destroyed_props_dummy", ":slot"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_2"),
        (assign,":next_kind","spr_mm_house_wall_2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_2d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_2dd", "spr_mm_house_wall_3dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_3"),
        (assign,":next_kind","spr_mm_house_wall_3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_3d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_3dd", "spr_mm_house_wall_4dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_4"),
        (assign,":next_kind","spr_mm_house_wall_4d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_4d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_4dd", "spr_mm_house_wall_5dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_5"),
        (assign,":next_kind","spr_mm_house_wall_5d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_5d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_5dd", "spr_mm_house_wall_6dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_6"),
        (assign,":next_kind","spr_mm_house_wall_6d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_6d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_6dd", "spr_mm_house_wall_7dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_7"),
        (assign,":next_kind","spr_mm_house_wall_7d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_7d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_7dd", "spr_mm_house_wall_11dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_11"),
        (assign,":next_kind","spr_mm_house_wall_11d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_11d"),
        (assign,":next_kind","spr_mm_house_wall_11ddd"), # fix to not spawn broken mesh with invisible hole #patch1115 fix 36/1
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_21"),
        (assign,":next_kind","spr_mm_house_wall_21d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_21d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_21dd", "spr_mm_house_wall_31dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_31"),
        (assign,":next_kind","spr_mm_house_wall_31d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_31d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_31dd", "spr_mm_house_wall_41dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_41"),
        (assign,":next_kind","spr_mm_house_wall_41d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_41d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_41dd", "spr_mm_house_wall_51dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_51"),
        (assign,":next_kind","spr_mm_house_wall_51d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_51d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_51dd", "spr_mm_house_wall_61dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_61"),
        (assign,":next_kind","spr_mm_house_wall_61d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_61d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_61dd", "spr_mm_house_wall_71dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_71"),
        (assign,":next_kind","spr_mm_house_wall_71d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_house_wall_71d"),
        (store_random_in_range, ":next_kind", "spr_mm_house_wall_71dd", "spr_mm_wall2"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew"),
        (assign,":next_kind","spr_fortnew1"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew1"),
        (assign,":next_kind","spr_fortnew2"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew2"),
        (assign,":next_kind","spr_fortnew3"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew3"),
        (assign,":next_kind","spr_fortnew4"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew4"),
        (assign,":next_kind","spr_fortnew5"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew5"),
        (assign,":next_kind","spr_fortnew6"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew6"),
        (assign,":next_kind","spr_fortnew7"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew7"),
        (assign,":next_kind","spr_fortnew8"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew8"),
        (assign,":next_kind","spr_fortnew9"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_1"),
        (assign,":next_kind","spr_fortnew_12"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_12"),
        (assign,":next_kind","spr_fortnew_13"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_13"),
        (assign,":next_kind","spr_fortnew_14"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_14"),
        (assign,":next_kind","spr_fortnew_15"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_15"),
        (assign,":next_kind","spr_fortnew_16"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_16"),
        (assign,":next_kind","spr_fortnew_17"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_17"),
        (assign,":next_kind","spr_fortnew_18"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_18"),
        (assign,":next_kind","spr_fortnew_19"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_19"),
        (assign,":next_kind","spr_fortnew_110"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_110"),
        (assign,":next_kind","spr_fortnew_111"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_2"),
        (assign,":next_kind","spr_fortnew_21"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_21"),
        (assign,":next_kind","spr_fortnew_22"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_22"),
        (assign,":next_kind","spr_fortnew_23"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_23"),
        (assign,":next_kind","spr_fortnew_24"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_24"),
        (assign,":next_kind","spr_fortnew_25"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_25"),
        (assign,":next_kind","spr_fortnew_26"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_26"),
        (assign,":next_kind","spr_fortnew_27"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_27"),
        (assign,":next_kind","spr_fortnew_28"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_28"),
        (assign,":next_kind","spr_fortnew_29"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_3"),
        (assign,":next_kind","spr_fortnew_31"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_31"),
        (assign,":next_kind","spr_fortnew_32"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_32"),
        (assign,":next_kind","spr_fortnew_33"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_33"),
        (assign,":next_kind","spr_fortnew_34"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_34"),
        (assign,":next_kind","spr_fortnew_35"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_35"),
        (assign,":next_kind","spr_fortnew_36"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_36"),
        (assign,":next_kind","spr_fortnew_37"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_37"),
        (assign,":next_kind","spr_fortnew_38"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_38"),
        (assign,":next_kind","spr_fortnew_39"),
      (else_try),
        (eq,":prop_kind_id","spr_fortnew_4"),
        (assign,":next_kind","spr_fortnew_41"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_1"),
        (assign,":next_kind","spr_mm_new_wall_1_1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_1d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_1dd", "spr_mm_new_wall_1_2dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_2"),
        (assign,":next_kind","spr_mm_new_wall_1_2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_2d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_2dd", "spr_mm_new_wall_1_3dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_3"),
        (assign,":next_kind","spr_mm_new_wall_1_3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_3d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_3dd", "spr_mm_new_wall_1_4dd"),
	    (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_4"),
        (assign,":next_kind","spr_mm_new_wall_1_4d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_4d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_4dd", "spr_mm_new_wall_1_5dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_5"),
        (assign,":next_kind","spr_mm_new_wall_1_5d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_5d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_5dd", "spr_mm_new_wall_1_6dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_6"),
        (assign,":next_kind","spr_mm_new_wall_1_6d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_6d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_6dd", "spr_mm_new_wall_1_7dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_7"),
        (assign,":next_kind","spr_mm_new_wall_1_7d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_7d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_7dd", "spr_mm_new_wall_1_8dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_8"),
        (assign,":next_kind","spr_mm_new_wall_1_8d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_8d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_8dd", "spr_mm_new_wall_1_9dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_9"),
        (assign,":next_kind","spr_mm_new_wall_1_9d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_9d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_9dd", "spr_mm_new_wall_1_10dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_10"),
        (assign,":next_kind","spr_mm_new_wall_1_10d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_10d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_10dd", "spr_mm_new_wall_1_11dd"),
        (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_11"),
        (assign,":next_kind","spr_mm_new_wall_1_11d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_1_11d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_1_11dd", "spr_mm_new_wall_2_1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_1"),
        (assign,":next_kind","spr_mm_new_wall_2_1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_1d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_1dd", "spr_mm_new_wall_2_2dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_2"),
        (assign,":next_kind","spr_mm_new_wall_2_2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_2d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_2dd", "spr_mm_new_wall_2_3dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_3"),
        (assign,":next_kind","spr_mm_new_wall_2_3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_3d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_3dd", "spr_mm_new_wall_2_4dd"),
	    (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_4"),
        (assign,":next_kind","spr_mm_new_wall_2_4d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_4d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_4dd", "spr_mm_new_wall_2_5dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_5"),
        (assign,":next_kind","spr_mm_new_wall_2_5d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_5d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_5dd", "spr_mm_new_wall_2_6dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_6"),
        (assign,":next_kind","spr_mm_new_wall_2_6d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_6d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_6dd", "spr_mm_new_wall_2_7dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_7"),
        (assign,":next_kind","spr_mm_new_wall_2_7d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_7d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_7dd", "spr_mm_new_wall_2_8dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_8"),
        (assign,":next_kind","spr_mm_new_wall_2_8d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_8d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_8dd", "spr_mm_new_wall_2_9dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_9"),
        (assign,":next_kind","spr_mm_new_wall_2_9d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_9d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_9dd", "spr_mm_new_wall_2_10dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_10"),
        (assign,":next_kind","spr_mm_new_wall_2_10d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_10d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_10dd", "spr_mm_new_wall_2_11dd"),
        (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_11"),
        (assign,":next_kind","spr_mm_new_wall_2_11d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_2_11d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_2_11dd", "spr_mm_new_wall_3_1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_1"),
        (assign,":next_kind","spr_mm_new_wall_3_1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_1d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_1dd", "spr_mm_new_wall_3_2dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_2"),
        (assign,":next_kind","spr_mm_new_wall_3_2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_2d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_2dd", "spr_mm_new_wall_3_3dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_3"),
        (assign,":next_kind","spr_mm_new_wall_3_3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_3d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_3dd", "spr_mm_new_wall_3_4dd"),
	    (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_4"),
        (assign,":next_kind","spr_mm_new_wall_3_4d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_4d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_4dd", "spr_mm_new_wall_3_5dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_5"),
        (assign,":next_kind","spr_mm_new_wall_3_5d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_5d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_5dd", "spr_mm_new_wall_3_6dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_6"),
        (assign,":next_kind","spr_mm_new_wall_3_6d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_6d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_6dd", "spr_mm_new_wall_3_7dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_7"),
        (assign,":next_kind","spr_mm_new_wall_3_7d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_7d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_7dd", "spr_mm_new_wall_3_8dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_8"),
        (assign,":next_kind","spr_mm_new_wall_3_8d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_8d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_8dd", "spr_mm_new_wall_3_9dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_9"),
        (assign,":next_kind","spr_mm_new_wall_3_9d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_9d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_9dd", "spr_mm_new_wall_3_10dd"),
		  (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_10"),
        (assign,":next_kind","spr_mm_new_wall_3_10d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_10d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_10dd", "spr_mm_new_wall_3_11dd"),
        (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_11"),
        (assign,":next_kind","spr_mm_new_wall_3_11d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_new_wall_3_11d"),
        (store_random_in_range, ":next_kind", "spr_mm_new_wall_3_11dd", "spr_mm_woodenwall1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall1"),
        (assign,":next_kind","spr_mm_woodenwall1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall1d"),
        (assign,":next_kind","spr_mm_woodenwall1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall2"),
        (assign,":next_kind","spr_mm_woodenwall2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall2d"),
        (assign,":next_kind","spr_mm_woodenwall1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall3"),
        (assign,":next_kind","spr_mm_woodenwall3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwall3d"),
        (assign,":next_kind","spr_mm_woodenwall1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy1"),
        (assign,":next_kind","spr_mm_woodenwallsnowy1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy1d"),
        (assign,":next_kind","spr_mm_woodenwallsnowy1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy2"),
        (assign,":next_kind","spr_mm_woodenwallsnowy2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy2d"),
        (assign,":next_kind","spr_mm_woodenwallsnowy1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy3"),
        (assign,":next_kind","spr_mm_woodenwallsnowy3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_woodenwallsnowy3d"),
        (assign,":next_kind","spr_mm_woodenwallsnowy1dd"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_poor_bridge1"),
        (assign,":next_kind","spr_mm_sp_poor_bridge1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge2"),
        (assign,":next_kind","spr_mm_sp_rich_bridge2d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge3"),
        (assign,":next_kind","spr_mm_sp_rich_bridge3d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge4"),
        (assign,":next_kind","spr_mm_sp_rich_bridge4d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_fence1"),
        (assign,":next_kind","spr_mm_fence1d"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_palisade"),
        (assign,":next_kind","spr_mm_palisaded"),
      (else_try),
        (eq,":prop_kind_id","spr_mm_palisaded"),
        (assign,":next_kind","spr_mm_palisadedd"),
      (try_end),
    (try_end),
    
    (assign,reg1,":next_kind"),
  ]),
  
  # script_get_default_health_for_prop_kind
  # Input: prop_kind_id
  #
  # Output: reg1 = max health
  # Output: reg2 = health
  ("get_default_health_for_prop_kind",
  [
    (store_script_param, ":prop_kind_id", 1),
    
    (assign,":max_health",0),
    (assign,":health",0),
    (try_begin),
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"),
      
    # Why even check specific lol.
      # (this_or_next|is_between, ":prop_kind_id", mm_destructible_props_begin, mm_destructible_props_end),
      # (this_or_next|is_between,":prop_kind_id","spr_mm_window1_poor","spr_mm_window1d_poor"),
      # (this_or_next|is_between,":prop_kind_id","spr_mm_window3_poor","spr_mm_window3d_poor"),
      # (is_between,":prop_kind_id","spr_mm_palisadedd","spr_crate_explosive"),
      
      (try_begin),
        (this_or_next|is_between,":prop_kind_id","spr_mm_palisadedd","spr_crate_explosive"), # a construction object
        (eq,":prop_kind_id","spr_earthwork1_destructible"),
        (try_begin),
          (eq,":prop_kind_id","spr_chevaux_de_frise_tri_construct"),
          (assign,":max_health",100),
        (else_try),
          (eq,":prop_kind_id","spr_mm_stakes2_construct"),
          (assign,":max_health",160),
        (else_try),
          (eq,":prop_kind_id","spr_mm_constr_pontoon_short"),
          (assign,":max_health",300),
        (else_try),
          (eq,":prop_kind_id","spr_mm_constr_pontoon_med"),
          (assign,":max_health",450),
        (else_try),
          (this_or_next|eq,":prop_kind_id","spr_mm_constr_pontoon_long"),
          (eq,":prop_kind_id","spr_mm_constr_watchtower"),
          (assign,":max_health",600),
        (else_try),
          (assign,":max_health",200),
        (try_end),
        (assign,":health",1),
      (else_try),
        (this_or_next|is_between,":prop_kind_id","spr_mm_window1_poor","spr_mm_window1d_poor"),
        (this_or_next|is_between,":prop_kind_id","spr_mm_window3_poor","spr_mm_window3d_poor"),
        (eq,":prop_kind_id","spr_mm_bird"),
        (assign,":max_health",1),
        (assign,":health",1),
      (else_try), 
        (this_or_next|is_between,":prop_kind_id","spr_mm_pontoon_bridge_short","spr_mm_dummy"),
        (is_between,":prop_kind_id", "spr_mm_ship", "spr_mm_ship_schooner"),
        (assign,":max_health",400),
        (assign,":health",400),
      (else_try),
        (eq,":prop_kind_id","spr_mm_ship_schooner"),
        (assign,":max_health",1200),
        (assign,":health",1200),
      (else_try),
        (eq,":prop_kind_id","spr_mm_dummy"),
        (assign,":max_health",70),
        (assign,":health",70),
      (else_try), # override for the is_between 2 elses later.
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_wall3", "spr_mm_palisade"),
        (this_or_next|eq,":prop_kind_id","spr_mm_sp_poor_bridge1"),
        (this_or_next|eq,":prop_kind_id","spr_mm_pontoon_bridge1"),
        (this_or_next|eq,":prop_kind_id","spr_mm_pontoon_bridge2"),
        (eq,":prop_kind_id","spr_mm_palisaded"),
        (assign,":max_health",400),
        (assign,":health",400),
      (else_try), # override for the next is_between.
        (this_or_next|eq,":prop_kind_id","spr_mm_sp_rich_bridge2"),
        (this_or_next|eq,":prop_kind_id","spr_mm_sp_rich_bridge3"),
        (eq,":prop_kind_id","spr_mm_sp_rich_bridge4"),
        (assign,":max_health",800),
        (assign,":health",800),
      (else_try),
        (is_between, ":prop_kind_id", "spr_fortnew", "spr_mm_new_wall_1_1"),
        (assign,":max_health",400),
        (assign,":health",400),
      (else_try),
        (eq,":prop_kind_id","spr_plank_destructible2"),#patch1115 55/7
        (assign,":max_health",100),#patch1115 53/3
        (assign,":health",100),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_house_wall_1", "spr_mm_wall1"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_new_wall_1_1", "spr_mm_stakes"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_wall1", "spr_mm_wall3"),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_stakes", "spr_mm_barrier_20m"),#normal planks are in here
        (eq,":prop_kind_id","spr_mm_fence1"),
        (assign,":max_health",200),
        (assign,":health",200),     
      (else_try),
        (eq,":prop_kind_id","spr_mm_palisade"),
        (assign,":max_health",600),
        (assign,":health",600),
      (else_try),
        (this_or_next|is_between, ":prop_kind_id", "spr_mm_barrier_20m", "spr_mm_house_wall_2dd"),
        (this_or_next|eq,":prop_kind_id","spr_mm_sp_rich_bridge1"),
        (eq,":prop_kind_id","spr_mm_earthwork1"),
        (assign,":max_health",99999999),
        (assign,":health",99999999),
      (try_end),
    (try_end),
    
    (assign,reg1,":max_health"),
    (assign,reg2,":health"),
  ]),
  
  # script_get_prop_instance_scale
  # Input: prop_instance_id
  #
  # Output: reg0 = x_scale
  #         reg1 = y_scale
  #         reg2 = z_scale
  #         reg3 = is_scaled
  ("get_prop_instance_scale",
  [
    (store_script_param, ":prop_instance_id", 1),
    
    (set_fixed_point_multiplier, 1000),
    
    (assign, ":x_scale", 1000),
    (assign, ":y_scale", 1000),
    (assign, ":z_scale", 1000),
    (assign, ":is_scaled",0),
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      
      (prop_instance_get_scale, pos59, ":prop_instance_id"),
      (position_get_scale_x, ":x_scale", pos59),#x scale in meters * fixed point multiplier is returned
      (position_get_scale_y, ":y_scale", pos59),
      (position_get_scale_z, ":z_scale", pos59),  
      
      (this_or_next|neq,":x_scale",1000),
      (this_or_next|neq,":y_scale",1000),
                   (neq,":z_scale",1000),
      (assign, ":is_scaled",1),
    (try_end),
    
    (set_fixed_point_multiplier, 100),
    
    (assign,reg0,":x_scale"),
    (assign,reg1,":y_scale"),
    (assign,reg2,":z_scale"),
    (assign,reg3,":is_scaled"),
  ]),
  
  # script_explosion_at_position
  # Input: shooter_agent_no
  #        max_damage points
  #        range  in cm
  #        pos47 = position
  # Output: none
  ("explosion_at_position", 
  [
    (store_script_param, ":shooter_agent_no", 1),
    (store_script_param, ":max_damage", 2),
    (store_script_param, ":range", 3),

    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),		

      (copy_position,pos60,pos47),
      (call_script,"script_multiplayer_server_play_hit_effect",cannon_hit_effect_event_type_explosion, 0),
      
      (set_fixed_point_multiplier,100),
      (store_add,":search_range",":range",90),
      (try_for_agents, ":agent_no",pos47,":search_range"), 
        (agent_is_active,":agent_no"),
        (agent_is_alive,":agent_no"),
        (agent_get_position,pos46,":agent_no"),
        (position_move_z,pos46,90), # Move 90 centimeter up (center of body) for better hit detection
        (get_distance_between_positions,":cur_dist",pos46,pos47),

        (lt, ":cur_dist", ":range"), # We are in range. lets calculate damage.. see here: for example.
        
        # Calculate damage 100-25% of damage according to range
        # Damage = damage_max * (1 - ((0.75*distance)/range))   for our example:   40 * (1 - ((0.75*500)/800)) = 21.25  damage
        (store_mul,":damage",":cur_dist",750),
        (val_div,":damage",":range"),
        (store_sub,":damage",1000,":damage"),
        (val_mul,":damage",":max_damage"),
        (val_div,":damage",1000),
        
        # Calculate damage 100-0% of damage according to range
        # (store_mul,":damage",":cur_dist",1000), # distance 5 meter = 500000
        # (val_div,":damage",":range"), # distance 5 meter range 10 meter = 500
        # (val_mul,":damage",":max_damage"), # 500 * lets say 40 damage = 20000
        # (val_div,":damage",1000), # 20000 / 1000 = 20 damage
        # (store_sub,":damage",":max_damage",":damage"),
        
        (try_begin), # If we have no shooter killed himself then.
          (neg|agent_is_active,":shooter_agent_no"),
          (assign,":shooter_agent_no",":agent_no"),
        (try_end),
        
        (agent_deliver_damage_to_agent_advanced, ":unused", ":shooter_agent_no", ":agent_no", ":damage","itm_cannon_explosion_dummy"),

        (agent_is_alive,":agent_no"), # still alive? if not then do all this animation and sounds; otherwise the death will trigger those.
        
        # 56 is sound pos.
        (copy_position,pos56,pos46),
        (try_begin),
          (agent_is_human,":agent_no"),
          (call_script,"script_multiplayer_server_play_sound_at_position","snd_man_hit"),
          (agent_get_horse, ":horse", ":agent_no"),
          (try_begin),
            (le, ":horse", 0), # No horse so play the fall animation
            (agent_set_animation, ":agent_no", "anim_strike_fall_back_rise"),
          (try_end),
        (else_try),
          (call_script,"script_multiplayer_server_play_sound_at_position","snd_neigh"),
          (agent_set_animation, ":agent_no", "anim_horse_rear"),
        (try_end),
      (try_end), 	
      
      #prop_instance_receive_damage
      (assign,":end_wall_cond",mm_destructible_props_end),
      (try_for_range_backwards,":wall_type",mm_destructible_props_begin,":end_wall_cond"),
        (neg|is_between,":wall_type",mm_explosive_props_begin, mm_explosive_props_end),

        (try_for_prop_instances, ":wall_id", ":wall_type", somt_object),
					
          # Get the longest dimension of the prop and see that as the range addition of the explosion (to hit this thing)
          (scene_prop_get_slot,":range_adition",":wall_id",scene_prop_slot_destruct_max_length),
          (try_begin),
            (gt,":range_adition",0),
            
            # make range adition 75 % for balance/tweaking.
            (val_mul, ":range_adition", 75), 
            (val_div, ":range_adition", 100),
            
            # devide the longest dimension by 2 since were calculating from center of prop.
            (store_div,":divved_range_adition",":range_adition",2),
          (try_end),
          
          (store_add,":range_awall", ":range",":range_adition"),
          
          # only get shit that is close to this ball
          (prop_instance_get_position, pos46, ":wall_id"),
          (get_distance_between_positions, ":distance_explosion_wall", pos46, pos47),
          (le, ":distance_explosion_wall", ":range_awall"),
          
          (call_script,"script_get_prop_center",":wall_id"),
          (eq,reg1,1), # is ok :)
          
          # pos42 is the center pos.
          (get_distance_between_positions, ":cur_dist", pos47, pos42),
          # substract the wall size from the distance to get the "real" distance to the prop.
          (val_sub,":cur_dist",":divved_range_adition"), 
          
          (le, ":cur_dist", ":range"),
          
          # Damage = damage_max * (1 - ((0.75*distance)/range))   for our example:   40 * (1 - ((0.75*500)/800)) = 21.25  damage          
          (store_mul,":damage",":cur_dist",750),
          (val_div,":damage",":range"),
          (store_sub,":damage",1000,":damage"),
          (val_mul,":damage",":max_damage"),
          (val_div,":damage",1000),
         
          (call_script,"script_deliver_damage_to_prop",":wall_id",":damage", 0, ":shooter_agent_no"),
        (try_end),
        
				(try_for_prop_instances, ":wall_id", ":wall_type", somt_temporary_object),
						
          # Get the longest dimension of the prop and see that as the range addition of the explosion (to hit this thing)
          (scene_prop_get_slot,":range_adition",":wall_id",scene_prop_slot_destruct_max_length),
          (try_begin),
            (gt,":range_adition",0),
            
            # make range adition 75 % for balance/tweaking.
            (val_mul, ":range_adition", 75), 
            (val_div, ":range_adition", 100),
            
            # devide the longest dimension by 2 since were calculating from center of prop.
            (store_div,":divved_range_adition",":range_adition",2),
          (try_end),
          
          (store_add,":range_awall", ":range",":range_adition"),
          
          # only get shit that is close to this ball
          (prop_instance_get_position, pos46, ":wall_id"),
          (get_distance_between_positions, ":distance_explosion_wall", pos46, pos47),
          (le, ":distance_explosion_wall", ":range_awall"),
          
          (call_script,"script_get_prop_center",":wall_id"),
          (eq,reg1,1), # is ok :)
          
          # pos42 is the center pos.
          (get_distance_between_positions, ":cur_dist", pos47, pos42),
          # substract the wall size from the distance to get the "real" distance to the prop.
          (val_sub,":cur_dist",":divved_range_adition"), 
          
          (le, ":cur_dist", ":range"),
          
          # Damage = damage_max * (1 - ((0.75*distance)/range))   for our example:   40 * (1 - ((0.75*500)/800)) = 21.25  damage          
          (store_mul,":damage",":cur_dist",750),
          (val_div,":damage",":range"),
          (store_sub,":damage",1000,":damage"),
          (val_mul,":damage",":max_damage"),
          (val_div,":damage",1000),
         
          (call_script,"script_deliver_damage_to_prop",":wall_id",":damage", 0, ":shooter_agent_no"),
        (try_end),  
      (try_end),  
       
      
      #destroyed pioneer props can disapear completely and give build points.
      (try_for_range,":pioneer_build_type","spr_mm_stakes_construct","spr_plank_construct_dummy"),
        (try_for_prop_instances, ":pioneer_prop_id", ":pioneer_build_type"),
          (prop_instance_get_position, pos46, ":pioneer_prop_id"),
          (get_distance_between_positions, ":cur_dist", pos47, pos46),
          
          (le, ":cur_dist", ":range"),
                   
          (particle_system_burst, "psys_dummy_straw", pos46, 20),
          (particle_system_burst, "psys_dummy_smoke", pos46, 50),

          (call_script, "script_clean_up_prop_instance", ":pioneer_prop_id"),
          
          (store_add,":cost_index",construct_costs_offset,":pioneer_build_type"),
          (val_sub,":cost_index",mm_construct_props_begin),
          (troop_get_slot,":prop_cost","trp_track_select_dummy",":cost_index"),
          (val_sub,":prop_cost",1), #Return prop cost -1 build points when deconstructing
          
          (agent_is_active,":shooter_agent_no"),
          (agent_get_team,":team_no",":shooter_agent_no"),
          (try_begin),
            (eq,":team_no",0),
            (val_add,"$g_team_1_build_points",":prop_cost"),
          (else_try),
            (val_add,"$g_team_2_build_points",":prop_cost"),
          (try_end),     
          
          (call_script,"script_multiplayer_server_send_build_points"),
        (try_end),
      (try_end),
      
      (try_for_range,":explosive_type", mm_explosive_props_begin, mm_explosive_props_end),
        (try_for_prop_instances, ":instance_id", ":explosive_type", somt_object),
          #(scene_prop_slot_eq, ":instance_id", scene_prop_slot_in_use, 1),
          
          (prop_instance_get_position,pos7,":instance_id"),
          (get_distance_between_positions,":cur_dist",pos7,pos47),
          
          # add 50 cm to range due to box size.
          (val_sub,":cur_dist",50), 
          
          (lt, ":cur_dist", ":range"),
          
          #Changed below to be consecutive - not instant
          (scene_prop_set_slot, ":instance_id", scene_prop_slot_time,1),
          (scene_prop_set_slot, ":instance_id", scene_prop_slot_user_agent,":shooter_agent_no"),
          
          #(prop_instance_get_position, pos47, ":instance_id"), 
          #(call_script, "script_clean_up_prop_instance", ":instance_id"),
          
          #(call_script,"script_explosion_at_position",":shooter_agent_no",1000,500), # Input: shooter_agent_no, max_damage points, range in cm
        (try_end),
				(try_for_prop_instances, ":instance_id", ":explosive_type", somt_temporary_object),
          #(scene_prop_slot_eq, ":instance_id", scene_prop_slot_in_use, 1),
          
          (prop_instance_get_position,pos7,":instance_id"),
          (get_distance_between_positions,":cur_dist",pos7,pos47),
          
          # add 50 cm to range due to box size.
          (val_sub,":cur_dist",50), 
          
          (lt, ":cur_dist", ":range"),
          
          #Changed below to be consecutive - not instant
          (scene_prop_set_slot, ":instance_id", scene_prop_slot_time,1),
          (scene_prop_set_slot, ":instance_id", scene_prop_slot_user_agent,":shooter_agent_no"),
          
          #(prop_instance_get_position, pos47, ":instance_id"), 
          #(call_script, "script_clean_up_prop_instance", ":instance_id"),
          
          #(call_script,"script_explosion_at_position",":shooter_agent_no",1000,500), # Input: shooter_agent_no, max_damage points, range in cm
        (try_end),
      (try_end),
      
      # make a crator at the explosion position
      (try_begin),
        (position_get_distance_to_terrain, ":height_to_terrain", pos47),
        (lt,":height_to_terrain",200),
        (copy_position,pos49,pos47), # pos49 is prop pos.
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_explosion"),
      (try_end),
    (try_end),  		
  ]),
  
  # script_get_angle_of_ground_at_pos
  # Input: pos37
  #        z_rot
  #        prop_kind
  # Output: reg0 = x_rot
  #         reg1 = y_rot
  ("get_angle_of_ground_at_pos",
  [
    (store_script_param, ":z_rot", 1),
    (store_script_param, ":prop_kind", 2),
  
    (assign, ":x_rot", 0),
    (assign, ":y_rot", 0),    
    (try_begin),
      (init_position,pos38),
      (position_copy_origin,pos38,pos37),
      (position_rotate_z,pos38,":z_rot"),
      (position_set_z_to_ground_level,pos38),
      #(position_move_z,pos38,500), # 5 meter is middle height
      
      # Getting rotation around X
      (set_fixed_point_multiplier,100000),
      (position_move_y,pos38,15), # 15 cm forwards
      (try_begin),
        (eq, ":prop_kind", "spr_earthwork1_destructible"),
        (position_get_distance_to_terrain, ":height_to_terrain_front", pos38),
      (else_try),
        (position_get_distance_to_ground_level, ":height_to_terrain_front", pos38),
      (try_end),
      (position_move_y,pos38,-30), # 30 cm back
      (try_begin),
        (eq, ":prop_kind", "spr_earthwork1_destructible"),
        (position_get_distance_to_terrain, ":height_to_terrain_back", pos38),
      (else_try),
        (position_get_distance_to_ground_level, ":height_to_terrain_back", pos38),
      (try_end),
      (store_sub,":height_difference",":height_to_terrain_front",":height_to_terrain_back"),
      (store_div,":x_rot",":height_difference",30), # 30 cm
      (set_fixed_point_multiplier,1000),
      (store_atan,":x_rot",":x_rot"), # get the angle
      (val_div,":x_rot",1000),
      (val_mul,":x_rot",-1),
      (position_move_y,pos38,15), # 15 cm forward
       
      # Getting rotation around Y
      (set_fixed_point_multiplier,100000),
      (position_move_x,pos38,15), # 15 cm right
      (try_begin),
        (eq, ":prop_kind", "spr_earthwork1_destructible"),
        (position_get_distance_to_terrain, ":height_to_terrain_right", pos38),
      (else_try),
        (position_get_distance_to_ground_level, ":height_to_terrain_right", pos38),
      (try_end),
      (position_move_x,pos38,-30), # 30 cm
      (try_begin),
        (eq, ":prop_kind", "spr_earthwork1_destructible"),
        (position_get_distance_to_terrain, ":height_to_terrain_left", pos38),
      (else_try),
        (position_get_distance_to_ground_level, ":height_to_terrain_left", pos38),
      (try_end),
      (store_sub,":height_difference",":height_to_terrain_right",":height_to_terrain_left"),
      (store_div,":y_rot",":height_difference",30), # 30 cm
      (set_fixed_point_multiplier,1000),
      (store_atan,":y_rot",":y_rot"), # get the angle
      (val_div,":y_rot",1000),
      (position_move_x,pos38,15), # 15 cm left
    (try_end),
    
    (set_fixed_point_multiplier,100),
    
    (assign,reg0,":x_rot"),
    (assign,reg1,":y_rot"),
  ]),
  
  # script_get_hightest_pos_and_angle_from_pos
  # Input: pos37  
  #        object_length
  #        z_rot_addition
  #        limit_height
  # Output: pos37 origion position for move/spawn of prop.
  ####         reg0 = x_rot
  ####         reg1 = y_rot
  ("get_hightest_pos_and_angle_from_pos",
  [
    (store_script_param, ":object_length", 1),
    (store_script_param, ":z_rot_addition", 2),
    (store_script_param, ":limit_height", 3),
  
    (set_fixed_point_multiplier,100),

    (assign,":can_place_here",1),
    (assign, ":x_rot", 0),
    (try_begin),
      (position_get_rotation_around_z,":z_rot",pos37),
      (val_add,":z_rot",":z_rot_addition",),
      (init_position,pos38),
      (position_copy_origin,pos38,pos37),
      (position_rotate_z,pos38,":z_rot"),
      
      # reset origional pos for perfect spawn.
      (copy_position,pos37,pos38),
      
      (assign,":max_rotation_height",160),
      (try_begin),
        (eq,":limit_height",1),
        (val_min,":max_rotation_height",":object_length"), # take either max or the value of length
      (else_try),
        # no limit, just assign the length then.
        (assign,":max_rotation_height",":object_length"),
      (try_end),
      
      (position_set_z_to_ground_level,pos38),
      (position_get_z,":orig_ground_z_val",pos38),
      (position_move_z,pos38,":object_length"), 
      (position_get_z,":orig_z_val",pos38),
      
      (assign,":step_count",40),# 40 steps.
      (store_div,":stepsize",":object_length",":step_count"),
      (val_add,":step_count",1),
      #(store_mul,":hightest_z",":object_length",-1), 
      (store_sub,":hightest_z",":orig_ground_z_val",":object_length"), # lowest is - length
      
      (assign,":point_distance",":stepsize"),
      
      (assign,":step_ignore_count",0),
      (store_mul,":ignore_size",":stepsize",":step_ignore_count"),
      (position_move_y,pos38,":ignore_size"),
      
      #(assign,":dist_to_max",0),
      (try_for_range,":cur_step",":step_ignore_count",":step_count"),
        (position_move_y,pos38,":stepsize"),
        (copy_position,pos39,pos38),
        (position_set_z_to_ground_level,pos39),
        (position_move_z,pos39,":object_length"), # 1 meter up
        (position_get_z,":cur_z",pos39),
        (gt,":cur_z",":hightest_z"),
        (assign,":hightest_z",":cur_z"),
        (store_mul,":point_distance",":cur_step",":stepsize"),
      (try_end),
      
      
      # again from the other side now.
      (store_sub,":hightest_z_2",":orig_ground_z_val",":object_length"), # lowest is - length
      #(store_mul,":hightest_z_2",":object_length",-1), # lowest is - length
      (assign,":point_distance_2",":stepsize"),
      
      (position_rotate_z,pos38,180),
      
      (position_move_y,pos38,":ignore_size"),
      
      (assign,":first_back_dist",0),
      
      (try_for_range,":cur_step",":step_ignore_count",":step_count"),
        (position_move_y,pos38,":stepsize"),
        (copy_position,pos39,pos38),
        (position_set_z_to_ground_level,pos39),
        
        # if floor is miles away go to the next point (end of plank is on a gap)
        (try_begin),
          (eq,":first_back_dist",0),

          (position_get_z,":cur_z",pos39),
          (gt, ":cur_z", ":hightest_z_2"),
          (store_mul,":first_back_dist",":cur_step",":stepsize"),
          (store_add,":orig_z_val_2",":cur_z",":object_length"),
          
          (try_begin),
            (store_div,":half_stepcount",":step_count",2),
            (gt,":cur_step",":half_stepcount"),
            
            (assign,":can_place_here",0),
          (try_end),
        (try_end),

        (position_move_z,pos39,":object_length"), # 1 meter up
        (position_get_z,":cur_z",pos39),
        (gt,":cur_z",":hightest_z_2"),
        (assign,":hightest_z_2",":cur_z"),
        (store_mul,":point_distance_2",":cur_step",":stepsize"),
        (val_sub,":point_distance_2",":first_back_dist"),
      (try_end),
      
      (assign,":reversed_pos_as_base",0),
      (assign,":height_difference",0),      
      (try_begin), # if distance from origional pos is larger as from back to forwards take that as the base point, otherwise we do crazy stuff.
        (gt,":point_distance",":point_distance_2"),
        (store_sub,":height_difference",":hightest_z",":orig_z_val"),
      (else_try),
        (store_sub,":height_difference",":hightest_z_2",":orig_z_val_2"),
        (assign,":point_distance",":point_distance_2"),
        (assign,":reversed_pos_as_base",1),
      (try_end),
      
      (val_max,":point_distance",1),
      
      (val_mul,":height_difference",1000),# make fixed point
      (store_div,":x_rot",":height_difference",":point_distance"), # diference / distance
      (set_fixed_point_multiplier,1000),
      (store_atan,":x_rot",":x_rot"), # get the angle
      (val_div,":x_rot",1000),
      #(val_mul,":x_rot",-1),
      
      (set_fixed_point_multiplier,100),
      
      (try_begin), # normal pos.
        (eq,":reversed_pos_as_base",0),
        (position_rotate_x,pos37,":x_rot"),
        
        (try_begin),
         # (position_get_z,":object_z",pos37),
          (store_sub,":object_z",":hightest_z",":orig_z_val"),
          (gt,":object_z",":max_rotation_height"),
          (assign,":can_place_here",0),
        (else_try),
          (copy_position,pos38,pos37),
          (position_move_y,pos38,":object_length"),
          (position_get_distance_to_ground_level,":distance",pos38),
          (store_mul,":allowed_height",":object_length",100),
          (val_div,":allowed_height",150),
          (gt,":distance",":allowed_height"),
          (assign,":can_place_here",0),
        (try_end),
      (else_try),
        # else, move to the desired start position and start moving object length away from it
        # in the right angle, Then as we reach the perfect point there, we set this as the place to spawn/move to
        # this way we get the angle perfect and the start of plank/tree sticking out how it should be.
        
        (store_sub,":move_dist",":object_length",":first_back_dist"),
        (position_move_y,pos37,":move_dist"),
        (position_set_z_to_ground_level,pos37),
        
        # turn around
        (position_rotate_z,pos37,180),
        
        # rotate the object upwards
       # (val_mul,":x_rot",-1),
        (position_rotate_x,pos37,":x_rot"),
        
        # move objectlength forward.
        (position_move_y,pos37,":object_length"),
        
        # turn around again
        (position_rotate_z,pos37,180),
        
        
        (store_sub,":object_z",":hightest_z_2",":orig_z_val_2"),
        (gt,":object_z",":max_rotation_height"),
        (assign,":can_place_here",0),
      (try_end),
      
    (try_end),
    
    (set_fixed_point_multiplier,100),
    
    (assign,reg0,":can_place_here"),
  ]),
  
  #script_custom_battle_set_division_names
  # INPUT: none
  # OUTPUT: none
  ("custom_battle_set_division_names",
   [
     (try_begin),
       (assign,":class_no",0),
       (try_for_range,":value",0,9),
        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":value"),
        (gt,":troop_value",0),
        (assign,":cur_troop_value",1),
        (assign,":end_cond",multiplayer_ai_troops_end),
        (try_for_range_backwards,":troop_no",multiplayer_ai_troops_begin,":end_cond"),
          (store_troop_faction,":faction_no",":troop_no"),
          (eq,":faction_no","$g_quick_battle_team_1_faction"),
      
          (troop_get_slot,":troop_class",":troop_no",slot_troop_class),
          (neq,":troop_class",multi_troop_class_mm_rocket),
          (neq,":troop_class",multi_troop_class_mm_artillery),
          
          (try_begin),
            (eq,":troop_value",":cur_troop_value"),
            (str_store_troop_name_plural,s32,":troop_no"),
            (assign,":end_cond",0),
          (try_end),
          (val_add,":cur_troop_value",1),
        (try_end),
        (class_set_name, ":class_no", s32),
        (val_add,":class_no",1),
       (try_end),
      (try_end),
      (try_for_range,":troop_no",multiplayer_ai_troops_begin,multiplayer_ai_troops_end),
       (troop_set_class, ":troop_no", 8),
      (try_end),
     ]),
     
  #script_custom_battle_assign_agent_division
  # INPUT: arg1 = agent_no
  # OUTPUT: none
#  ("custom_battle_assign_agent_division",
#   [
#     (store_script_param,":agent_no",1),
#     (agent_get_troop_id,":troop_id",":agent_no"),
#     (agent_get_team,":team_no",":agent_no"),
#     (store_troop_faction,":faction_id",":troop_id"),
#     (try_begin),
#      (eq,":team_no",0),
#      (assign,":begin_cond",0),
#      (assign,":end_cond",9),
#     (else_try),
#      (assign,":begin_cond",10),
#      (assign,":end_cond",19),
#     (try_end),
#     (try_begin),
#       (assign,":class_no",0),
#       (try_for_range,":value",":begin_cond",":end_cond"),
#        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":value"),
#        (gt,":troop_value",0),
#        (assign,":cur_troop_value",1),
#        (assign,":end_cond2",multiplayer_ai_troops_end),
#        (try_for_range,":troop_no",multiplayer_ai_troops_begin,":end_cond2"),
#          (store_troop_faction,":faction_no",":troop_no"),
#          (eq,":faction_no",":faction_id"),
#          (try_begin),
#            (eq,":cur_troop_value",":troop_value"),
#            (assign,":cur_troop_no",":troop_no"),
#            (assign,":end_cond2",0),
#          (else_try),
#            (val_add,":cur_troop_value",1),
#          (try_end),
#        (try_end),
#        (try_begin),
#          (eq,":cur_troop_no",":troop_id"),
#          (store_add,":num_troops_slot",":value",20),
#          (troop_get_slot,":num_troops","trp_custom_battle_dummy",":num_troops_slot"),
#          (gt,":num_troops",0),
#          (val_sub,":num_troops",1),
#          (troop_set_slot,"trp_custom_battle_dummy",":num_troops_slot",":num_troops"),
#          (assign,":end_cond",0),
#        (else_try),
#          (val_add,":class_no",1),
#        (try_end),
#       (try_end),
#       (agent_set_division, ":agent_no", ":class_no"),
#     (try_end),
#     ]),
     
  #script_custom_battle_deployment
  # INPUT: none
  # OUTPUT: none
  ("custom_battle_deployment",
   [
    (try_for_range,":team_no",0,2),
      (set_show_messages,0),
      (try_for_range,":division",0,9), #Check through divisions
        (call_script,"script_division_get_average_position",":team_no",":division"),
        (team_give_order, ":team_no", ":division", mordr_hold),
        (team_set_order_position, ":team_no", ":division", pos0),
        (team_give_order, ":team_no", ":division", mordr_fire_at_my_command),
      (try_end),
      (set_show_messages,1),
    (try_end),
     ]),
           
  #script_correct_num_troops_in_formation
  # INPUT: arg1 = agent_no  arg2 = num_troops_to_add
  # OUTPUT: none
  ("correct_num_troops_in_formation",
   [
    (store_script_param_1,":agent_no"),
    (store_script_param_2,":num_troops_to_add"), # 1 or -1
    (try_begin),
      (agent_get_team,":agent_team",":agent_no"),
      (try_begin),
        (eq,":agent_team",0),
        (assign,":begin_slot",slot_troops_in_division_begin_team1),
      (else_try),
        (eq,":agent_team",1),
        (assign,":begin_slot",slot_troops_in_division_begin_team2),
      (try_end),
      (agent_get_division,":agent_division",":agent_no"),
      (store_add,":division_slot",":begin_slot",":agent_division"),
      (troop_get_slot,":num_troops_in_division","trp_custom_battle_dummy",":division_slot"),
      (val_add,":num_troops_in_division",":num_troops_to_add"),
      (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":num_troops_in_division"),
    (try_end),
     ]),
       
  #script_give_mm_order
  # INPUT: arg1 = order_type  arg2 = order  arg3 = team  pos23 = order position
  # OUTPUT: none
  ("give_mm_order",
   [
    (store_script_param,":order_type",1),
    (store_script_param,":order",2),
    (store_script_param,":team",3),
    (try_begin),
      (eq,":order_type",mm_order_type_formation),
      (try_begin),
        (eq,":team",0),
        (assign,":begin_slot",slot_formation_order_begin_team1),
      (else_try),
        (eq,":team",1),
        (assign,":begin_slot",slot_formation_order_begin_team2),
      (try_end),
    (else_try),
      (eq,":order_type",mm_order_type_fire),
      (try_begin),
        (eq,":team",0),
        (assign,":begin_slot",slot_fire_order_begin_team1),
      (else_try),
        (eq,":team",1),
        (assign,":begin_slot",slot_fire_order_begin_team2),
      (try_end),
    (else_try),
      (eq,":order_type",mm_order_type_move),
      (try_begin),
        (eq,":team",0),
        (assign,":begin_slot",slot_move_order_begin_team1),
      (else_try),
        (eq,":team",1),
        (assign,":begin_slot",slot_move_order_begin_team2),
      (try_end),
    (try_end),
    (try_for_range,":division",0,9),
      (class_is_listening_order,":team",":division"),
      (store_add,":division_slot",":begin_slot",":division"),
      
      (assign,":continue",1),
      (try_begin),
        (eq, "$g_is_quick_battle", 1),
        (try_begin),
          (eq,":team",0),
          (store_add,":division_slot2",slot_troop_no_begin_team1,":division"),
        (else_try),
          (store_add,":division_slot2",slot_troop_no_begin_team2,":division"),
        (try_end),
        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":division_slot2"),
        (gt,":troop_value",0),
      
        (try_begin),
          (eq,":team",0),
          (assign,":team_faction","$g_quick_battle_team_1_faction"),
        (else_try),
          (assign,":team_faction","$g_quick_battle_team_2_faction"),
        (try_end),
        (assign,":cur_troop_value",1),
        (assign,":end_cond",multiplayer_ai_troops_end),
        (try_for_range,":troop_no",multiplayer_ai_troops_begin,":end_cond"),
          (store_troop_faction,":faction_no",":troop_no"),
          (eq,":faction_no",":team_faction"),
          (try_begin),
            (eq,":troop_value",":cur_troop_value"),
            (str_store_troop_name_plural,s32,":troop_no"),
            (assign,":end_cond",0),
          (else_try),
            (val_add,":cur_troop_value",1),
          (try_end),
        (try_end),
      (else_try),
        (neq, "$g_is_quick_battle", 1),
        (try_begin),
          (eq,":team",0),
          (store_add,":division_slot2",slot_troops_in_division_begin_team1,":division"),
        (else_try),
          (store_add,":division_slot2",slot_troops_in_division_begin_team2,":division"),
        (try_end),
        (troop_get_slot,":troop_value","trp_custom_battle_dummy",":division_slot2"),
        (gt,":troop_value",0),
        (str_store_string,s32,"@THISISAPLACEHOLDERSTRING"),
      (else_try),
        (assign,":continue",0),
      (try_end),
      (eq,":continue",1),
      
      (assign,":reform",0),
      #(assign,":wheel",0),
      (try_begin),
        (eq,":order_type",mm_order_type_move),
        (try_begin),
          (eq,":order",mm_order_hold),
          #(team_give_order,":team",":division",mordr_hold),
          #(team_set_order_position, ":team", ":division", pos23),
          
          (try_begin),
            (eq,":team",1),
            (store_add,":division_no",":division",10),
          (else_try),
            (assign,":division_no",":division"),
          (try_end),
          (scene_prop_get_instance,":instance","spr_formation_locator",":division_no"),
          (prop_instance_animate_to_position,":instance",pos23,0),
          
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (assign,":reform",1),
          (display_message,"@{s32}, hold this position!"),
        (else_try),
          (eq,":order",mm_order_follow),
          #(team_give_order,":team",":division",mordr_follow),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, follow me!"),
        (else_try),
          (eq,":order",mm_order_charge),
          (team_give_order,":team",":division",mordr_charge),
          (try_for_agents,":cur_agent"),
            (agent_is_active,":cur_agent"),
            (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
            (agent_is_alive,":cur_agent"),
            (agent_get_team,":agent_team",":cur_agent"),
            (eq,":agent_team",":team"),
            (agent_get_division,":agent_div",":cur_agent"),
            (eq,":agent_div",":division"), 
            (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
            #Cancel scripted destination for charge:
            (agent_clear_scripted_mode,":cur_agent"),
          (try_end),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, charge!"),
        (else_try),
          (eq,":order",mm_order_advance),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"), #The rest is handled in the update script
          (display_message,"@{s32}, advance!"),
        (else_try),
          (eq,":order",mm_order_halt),
          (try_begin),
            (eq,":team",1),
            (store_add,":division_no",":division",10),
          (else_try),
            (assign,":division_no",":division"),
          (try_end),
          (scene_prop_get_instance,":instance","spr_formation_locator",":division_no"),
          (call_script,"script_division_get_average_position",":team",":division"),
          (prop_instance_animate_to_position,":instance",pos0,0),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",mm_order_hold),
          (assign,":reform",1),
          (display_message,"@{s32}, halt!"),
        (else_try),
          (eq,":order",mm_order_fallback),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"), #The rest is handled in the update script
          (display_message,"@{s32}, fall back!"),
        (else_try),
          (eq,":order",mm_order_retreat),
          (team_give_order,":team",":division",mordr_retreat),  #This makes them all rout
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, retreat!"),
        (else_try),
          (eq,":order",mm_order_slow),
          (try_for_agents,":cur_agent"),
            (agent_is_active,":cur_agent"),
            (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
            (agent_is_alive,":cur_agent"),
            (agent_get_team,":agent_team",":cur_agent"),
            (eq,":agent_team",":team"),
            (agent_get_division,":agent_div",":cur_agent"),
            (eq,":agent_div",":division"), 
            (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
            #Set speed:
            (agent_set_speed_limit,":cur_agent",5), #Walk - should change to faster for cavalry later
          (try_end),
          (display_message,"@{s32}, slow pace!"),
        (else_try),
          (eq,":order",mm_order_quick),
          (try_for_agents,":cur_agent"),
            (agent_is_active,":cur_agent"),
            (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
            (agent_is_alive,":cur_agent"),
            (agent_get_team,":agent_team",":cur_agent"),
            (eq,":agent_team",":team"),
            (agent_get_division,":agent_div",":cur_agent"),
            (eq,":agent_div",":division"), 
            (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
            #Set speed:
            (agent_set_speed_limit,":cur_agent",100), #Run
          (try_end),
          (display_message,"@{s32}, quick pace!"),
        (try_end),
      (else_try),
        (eq,":order_type",mm_order_type_formation),
        (try_begin),
          (eq,":order",mm_order_line),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, form line!"),
          (assign,":reform",1),
        (else_try),
          (eq,":order",mm_order_column),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, form column!"),
          (assign,":reform",1),
        (else_try),
          (eq,":order",mm_order_square),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, form square!"),
          (assign,":reform",1),
        (else_try),
          (eq,":order",mm_order_skirmish),
          (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
          (display_message,"@{s32}, skirmish order!"),
          (assign,":reform",1),
        (else_try),
          (eq,":order",mm_order_wheelleft),
          (assign,"$g_wheel",1),
          (assign,":reform",1),
          (display_message,"@{s32}, wheel left!"),
        (else_try),
          (eq,":order",mm_order_wheelright),
          (assign,"$g_wheel",2),
          (assign,":reform",1),
          (display_message,"@{s32}, wheel right!"),
        (else_try),
          (eq,":order",mm_order_adjust),
          (assign,"$g_wheel",3),
          (assign,":reform",1),
          (display_message,"@{s32}, adjust formation!"),
        (try_end),
      (else_try),
        (eq,":order_type",mm_order_type_fire),
        (troop_set_slot,"trp_custom_battle_dummy",":division_slot",":order"),
      (try_end),
      (try_begin),
        (eq,":reform",1),
        (eq,0,1), #Close
        (team_get_movement_order, ":cur_movement_order", ":team", ":division"),
        (eq,":cur_movement_order",mordr_hold),
        (team_get_order_position, pos1, ":team", ":division"),
          
        (try_begin),
          (eq,":team",0),
          (assign,":begin_slot",20),
          (assign,":begin_slot2",40),
        (else_try),
          (eq,":team",1),
          (assign,":begin_slot",30),
          (assign,":begin_slot2",50),
        (try_end),
        (store_add,":division_slot",":begin_slot",":division"),
        (troop_get_slot,":num_troops_in_division","trp_custom_battle_dummy",":division_slot"),
        (gt,":num_troops_in_division",0),
        (store_add,":formation_slot",":begin_slot2",":division"),
        (troop_get_slot,":formation_type","trp_custom_battle_dummy",":formation_slot"),
        (store_add,":fire_slot",":formation_slot",20),
        (troop_get_slot,":fire_order","trp_custom_battle_dummy",":fire_slot"),
          
        (try_begin), #Form a line!
          (eq,":formation_type",mm_order_line),
          (assign,":soldier_spacing",100),
          (assign,":rank_offset",0),
          (try_begin),
            (gt,":num_troops_in_division",59),
            (store_div,":troops_in_front_rank",":num_troops_in_division",4),
          (else_try),
            (gt,":num_troops_in_division",29),
            (store_div,":troops_in_front_rank",":num_troops_in_division",3),
          (else_try),
            (gt,":num_troops_in_division",5),
            (store_div,":troops_in_front_rank",":num_troops_in_division",2),
          (else_try),
            (assign,":troops_in_front_rank",":num_troops_in_division"),
          (try_end),
        (else_try), #Form a column!
          (eq,":formation_type",mm_order_column),
          (assign,":soldier_spacing",100),
          (assign,":rank_offset",0),
          (try_begin),
            (gt,":num_troops_in_division",59),
            (assign,":troops_in_front_rank",4),
          (else_try),
            (gt,":num_troops_in_division",29),
            (assign,":troops_in_front_rank",3),
          (else_try),
            (gt,":num_troops_in_division",5),
            (assign,":troops_in_front_rank",2),
          (else_try),
            (assign,":troops_in_front_rank",1),
          (try_end),
        (else_try), #Form a square!
          (eq,":formation_type",mm_order_square),
          (assign,":soldier_spacing",100),
          (assign,":rank_offset",0),
          (set_fixed_point_multiplier,1),
          (store_sqrt,":troops_in_front_rank",":num_troops_in_division"),
          (set_fixed_point_multiplier,100),
        (else_try), #Form skirmish line!
          (eq,":formation_type",mm_order_skirmish),
          (assign,":soldier_spacing",200),
          (assign,":rank_offset",100),
          (try_begin),
            (gt,":num_troops_in_division",59),
            (store_div,":troops_in_front_rank",":num_troops_in_division",4),
          (else_try),
            (gt,":num_troops_in_division",29),
            (store_div,":troops_in_front_rank",":num_troops_in_division",3),
          (else_try),
            (gt,":num_troops_in_division",5),
            (store_div,":troops_in_front_rank",":num_troops_in_division",2),
          (else_try),
            (assign,":troops_in_front_rank",":num_troops_in_division"),
          (try_end),
        (try_end),
          
        #Commons:
        (store_mul,":soldier_spacing_neg",":soldier_spacing",-1),
        (store_mul,":rank_length",":troops_in_front_rank",":soldier_spacing_neg"),
          
        (store_div,":rank_centre_offset",":troops_in_front_rank",2),
        (val_mul,":rank_centre_offset",":soldier_spacing_neg"),
        (position_move_x,pos1,":rank_centre_offset",0),
        
        #Put agents in formation
        (assign,":agents_in_rank",0),
        (assign,":offset_next_rank",1),
        #(assign,":is_first",1),
        (try_for_agents,":cur_agent"),
          (agent_is_active,":cur_agent"),
          (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
          (agent_is_alive,":cur_agent"),
          (agent_get_team,":agent_team",":cur_agent"),
          (eq,":agent_team",":team"),
          (agent_get_division,":agent_div",":cur_agent"),
          (eq,":agent_div",":division"), 
          (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
          
          
          #Start assigning positions
          (try_begin), # Using no_attack when not at fire at will for now
            (eq,":fire_order",mm_order_fireatwill),
            (agent_set_scripted_destination,":cur_agent",pos1,1),
          (else_try),
            (agent_set_scripted_destination_no_attack,":cur_agent",pos1,1),
          (try_end),
          (position_move_x,pos1,":soldier_spacing",0),
          (val_add,":agents_in_rank",1),
          #(assign,":is_first",0),
          (try_begin),
            (ge,":agents_in_rank",":troops_in_front_rank"),
            (position_move_x,pos1,":rank_length",0),
            (position_move_y,pos1,":soldier_spacing_neg",0),
            (try_begin),
              (eq,":offset_next_rank",1),
              (position_move_x,pos1,":rank_offset"),
              (assign,":offset_next_rank",0),
            (else_try),
              (assign,":offset_next_rank",1),
            (try_end),
            (assign,":agents_in_rank",0),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
     ]),
        
  #script_volley_fire
  # INPUT: none
  # OUTPUT: none
  ("volley_fire",
   [
    (try_for_range,":team",0,2),
      (try_begin),
        (eq,":team",0),
        (assign,":begin_slot",slot_fire_order_begin_team1),
        (assign,":begin_slot2",slot_volley_state_begin_team1),
      (else_try),
        (eq,":team",1),
        (assign,":begin_slot",slot_fire_order_begin_team2),
        (assign,":begin_slot2",slot_volley_state_begin_team2),
      (try_end),
      (try_for_range,":division",0,9), #Check through divisions
        (store_add,":volley_slot",":begin_slot",":division"),
        (troop_slot_eq,"trp_custom_battle_dummy",":volley_slot",mm_order_volley),
        (store_add,":volley_state_slot",":begin_slot2",":division"),
        (troop_get_slot,":volley_state","trp_custom_battle_dummy",":volley_state_slot"),
        (try_begin), 
          (eq,":volley_state",0),
          (assign,":volley_ready",1),
        (try_end),
        (try_for_agents,":cur_agent"),
          (agent_is_active,":cur_agent"),
          (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
          (agent_is_alive,":cur_agent"),
          (agent_get_team,":agent_team",":cur_agent"),
          (eq,":agent_team",":team"),
          (agent_get_division,":agent_div",":cur_agent"),
          (eq,":agent_div",":division"), 
          (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
          (try_begin),
            #Ready for volley?
            (eq,":volley_state",0),
            (try_begin),
              (agent_get_wielded_item,":cur_weapon",":cur_agent",0),
              (assign,":continue",1),
              (try_begin),
                (ge,":cur_weapon",0),
                (item_slot_eq,":cur_weapon",slot_item_multiplayer_item_class, multi_item_class_type_gun),
              (else_try),
                (agent_get_troop_id,":troop_id", ":cur_agent"),
                (troop_get_inventory_capacity,":end_cond",":troop_id"),
                (try_for_range,":inv_slot",0,":end_cond"),
                  (troop_get_inventory_slot, ":item_id", ":troop_id", ":inv_slot"),
                  (ge,":item_id",0),
                  (item_slot_eq,":item_id",slot_item_multiplayer_item_class, multi_item_class_type_gun),
                  (agent_set_wielded_item,":cur_agent",":item_id"),
                  (assign,":volley_ready",0),
                  (assign,":end_cond",0),
                (try_end),
                (assign,":continue",0),
              (try_end),
              (eq,":continue",0),
            (else_try),
              (agent_get_scripted_destination, pos23, ":cur_agent"),
              (agent_get_position,pos22,":cur_agent"),
              (get_distance_between_positions,":dist",pos22,pos23),
              (gt,":dist",100),
            (else_try),
              (agent_get_attack_action, ":attack_action", ":cur_agent"),
              (eq,":attack_action",5),
              (assign,":volley_ready",0),
            (else_try),
              (agent_set_attack_action, ":cur_agent", 0, 1),
            (try_end),
          (else_try),
            (eq,":volley_state",1),
            (try_begin),
              (agent_get_scripted_destination, pos23, ":cur_agent"),
              (agent_get_position,pos22,":cur_agent"),
              (get_distance_between_positions,":dist",pos22,pos23),
              (gt,":dist",100),
            (else_try),
              (agent_set_attack_action, ":cur_agent", 0, 0),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (eq,":volley_state",0),
          (eq,":volley_ready",1),
          (assign,":new_volley_state",1),
        (else_try),
          (assign,":new_volley_state",0),
        (try_end),
        (troop_set_slot,"trp_custom_battle_dummy",":volley_state_slot",":new_volley_state"),
      (try_end),
    (try_end),         
     ]),
     
  #script_deploy_division_via_teleport
  # INPUT: arg1 = team arg2 = division
  # OUTPUT: none
  ("deploy_division_via_teleport",
   [
      (store_script_param_1,":team"),
      (store_script_param_2,":division"),
      (try_begin),
        #Assign formation specifics
        (assign,":continue",1),
        
        (try_begin),  #Checking movement orders
          (eq,":team",0),
          (assign,":begin_slot",slot_move_order_begin_team1),
        (else_try),
          (eq,":team",1),
          (assign,":begin_slot",slot_move_order_begin_team2),
        (try_end),
        (store_add,":movement_slot",":begin_slot",":division"),
        (troop_get_slot,":cur_move_order","trp_custom_battle_dummy",":movement_slot"),
          
        (try_begin),
          (this_or_next|eq, ":cur_move_order", mm_order_hold),
          (this_or_next|eq, ":cur_move_order", mm_order_follow),
          (this_or_next|eq,":cur_move_order",mm_order_advance),
          (eq,":cur_move_order",mm_order_fallback),
          (try_begin),
            (eq,":team",1),
            (store_add,":division_no",":division",10),
          (else_try),
            (assign,":division_no",":division"),
          (try_end),
          (try_begin),
            (eq, ":cur_move_order", mm_order_follow),
            (get_player_agent_no,":player_agent"),
            (agent_get_position,pos43,":player_agent"),
            (position_move_y,pos43,-50,0),
            (scene_prop_get_instance,":instance","spr_formation_locator",":division_no"),
            (prop_instance_animate_to_position,":instance",pos43,0),
          (else_try),
            (this_or_next|eq,":cur_move_order",mm_order_advance),
            (eq,":cur_move_order",mm_order_fallback),
            (try_begin),
              (eq,":cur_move_order",mm_order_fallback),
              (assign,":direction",-1),
            (else_try),
              (assign,":direction",1),
            (try_end),
            (store_mul,":movement",180,":direction"),
          
            (try_begin),
              (eq,":team",1),
              (store_add,":division_no",":division",10),
            (else_try),
              (assign,":division_no",":division"),
            (try_end),
            (scene_prop_get_instance,":instance","spr_formation_locator",":division_no"),
            (prop_instance_get_position,pos43,":instance"),
            (position_move_y,pos43,":movement",0),
            (position_set_z_to_ground_level,pos43),
            (prop_instance_animate_to_position,":instance",pos43,0),
          (try_end),
          
          (scene_prop_get_instance,":instance","spr_formation_locator",":division_no"),
          (prop_instance_get_position,pos43,":instance"),
          
          #For wheeling
          (try_begin),
            (gt,"$g_wheel",0),
            (try_begin),
              (eq,"$g_wheel",1),
              (assign,":turn",45),
            (else_try),
              (eq,"$g_wheel",2),
              (assign,":turn",-45),
            (else_try),
              (set_fixed_point_multiplier,1),
              (call_script,"script_team_get_average_position_of_enemies",":team"),
              (copy_position,pos42,pos0),
              (get_angle_between_positions, ":rotation", pos43, pos42),
              (assign,":turn",":rotation"),
              (set_fixed_point_multiplier,100),
            (try_end),
            (position_rotate_z,pos43,":turn",0),
            (prop_instance_animate_to_position,":instance",pos43,0),
            (assign,"$g_wheel",0),
          (try_end),
          
          (try_begin),
            (eq,":team",0),
            (assign,":begin_slot",slot_troops_in_division_begin_team1),
            (assign,":begin_slot2",slot_formation_order_begin_team1),
          (else_try),
            (eq,":team",1),
            (assign,":begin_slot",slot_troops_in_division_begin_team2),
            (assign,":begin_slot2",slot_formation_order_begin_team2),
          (try_end),
          (store_add,":division_slot",":begin_slot",":division"),
          (troop_get_slot,":num_troops_in_division","trp_custom_battle_dummy",":division_slot"),
          (gt,":num_troops_in_division",0),
          (store_add,":formation_slot",":begin_slot2",":division"),
          (troop_get_slot,":formation_type","trp_custom_battle_dummy",":formation_slot"),
          
          (store_add,":volley_slot",":formation_slot",20),
          (neg|troop_slot_eq,"trp_custom_battle_dummy",":volley_slot",mm_order_volley),
          
          (try_begin), #Form a line!
            (eq,":formation_type",mm_order_line),
            (assign,":soldier_spacing",100),
            (assign,":rank_offset",0),
            (try_begin),
              (gt,":num_troops_in_division",59),
              (store_div,":troops_in_front_rank",":num_troops_in_division",4),
            (else_try),
              (gt,":num_troops_in_division",29),
              (store_div,":troops_in_front_rank",":num_troops_in_division",3),
            (else_try),
              (gt,":num_troops_in_division",5),
              (store_div,":troops_in_front_rank",":num_troops_in_division",2),
            (else_try),
              (assign,":troops_in_front_rank",":num_troops_in_division"),
            (try_end),
          (else_try), #Form a column!
            (eq,":formation_type",mm_order_column),
            (assign,":soldier_spacing",100),
            (assign,":rank_offset",0),
            (try_begin),
              (gt,":num_troops_in_division",59),
              (assign,":troops_in_front_rank",4),
            (else_try),
              (gt,":num_troops_in_division",29),
              (assign,":troops_in_front_rank",3),
            (else_try),
              (gt,":num_troops_in_division",5),
              (assign,":troops_in_front_rank",2),
            (else_try),
              (assign,":troops_in_front_rank",1),
            (try_end),
          (else_try), #Form a square!
            (eq,":formation_type",mm_order_square),
            (assign,":soldier_spacing",80),
            (assign,":rank_offset",0),
            ### NEW SQUARE BEGIN
            (store_div,":troops_in_front_rank",":num_troops_in_division",4),
            (val_add,":troops_in_front_rank",1),
            (try_begin),
              (gt,":troops_in_front_rank",6),
              (assign,":troops_in_front_rank",6),
            (try_end),
            ### NEW SQUARE END
            #(set_fixed_point_multiplier,1),
            #(store_sqrt,":troops_in_front_rank",":num_troops_in_division"),
            #(set_fixed_point_multiplier,100),
          (else_try), #Form skirmish line!
            (eq,":formation_type",mm_order_skirmish),
            (assign,":soldier_spacing",200),
            (assign,":rank_offset",100),
            (try_begin),
              (gt,":num_troops_in_division",59),
              (store_div,":troops_in_front_rank",":num_troops_in_division",4),
            (else_try),
              (gt,":num_troops_in_division",29),
              (store_div,":troops_in_front_rank",":num_troops_in_division",3),
            (else_try),
              (gt,":num_troops_in_division",5),
              (store_div,":troops_in_front_rank",":num_troops_in_division",2),
            (else_try),
              (assign,":troops_in_front_rank",":num_troops_in_division"),
            (try_end),
          (try_end),
          
          #Commons:
          (store_mul,":soldier_spacing_neg",":soldier_spacing",-1),
          (store_mul,":rank_length",":troops_in_front_rank",":soldier_spacing_neg"),
          
          (store_div,":rank_centre_offset",":troops_in_front_rank",2),
          ### NEW SQUARE BEGIN
          (try_begin),
            (eq,":formation_type",mm_order_square),
            (position_move_y,pos43,":rank_centre_offset",0),
            (assign,":rank_no",1),
          (try_end),
          ### NEW SQUARE END
          (val_mul,":rank_centre_offset",":soldier_spacing_neg"),
          (position_move_x,pos43,":rank_centre_offset",0),
        (else_try),
          (eq, ":cur_move_order", mm_order_charge),
          (try_for_agents,":cur_agent"),
            (agent_is_active,":cur_agent"),
            (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
            (agent_is_alive,":cur_agent"),
            (agent_get_team,":agent_team",":cur_agent"),
            (eq,":agent_team",":team"),
            (agent_get_division,":agent_div",":cur_agent"),
            (eq,":agent_div",":division"), 
            (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
            #Cancel scripted destination for charge:
            (agent_clear_scripted_mode,":cur_agent"),
          (try_end),
          (assign,":continue",0),
        (else_try),
          (assign,":continue",0),
        (try_end),
        (eq,":continue",1),
          
        #Put agents in formation
        (assign,":agents_in_rank",0),
        (assign,":offset_next_rank",1),
        (try_for_agents,":cur_agent"),
          (agent_is_active,":cur_agent"),
          (agent_is_human,":cur_agent"), #Run a bunch of agent checks...
          (agent_is_alive,":cur_agent"),
          (agent_get_team,":agent_team",":cur_agent"),
          (eq,":agent_team",":team"),
          (agent_get_division,":agent_div",":cur_agent"),
          (eq,":agent_div",":division"), 
          (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
          
          #Start assigning positions
          (agent_clear_scripted_mode,":cur_agent"),
          (try_begin), # Using no_attack when not at fire at will for now
            (try_begin),
              (eq,":team",0),
              (store_add,":fire_slot",":division",slot_fire_order_begin_team1),
            (else_try),
              (store_add,":fire_slot",":division",slot_fire_order_begin_team2),
            (try_end),
            (troop_slot_eq,"trp_custom_battle_dummy",":fire_slot",mm_order_fireatwill),
            (agent_set_scripted_destination,":cur_agent",pos43,1),
          (else_try),
            (agent_set_scripted_destination_no_attack,":cur_agent",pos43,1),
          (try_end),
          ##### Addition for teleport script BEGIN #####
          (assign,":move_agent",":cur_agent"),
          (agent_get_horse, ":horse_agent", ":cur_agent"),
          (try_begin),
            (ge, ":horse_agent", 0),
            (assign, ":move_agent", ":horse_agent"),
          (try_end),
          (agent_set_position,":move_agent",pos43),
          ##### Addition for teleport script END #####
          (position_move_x,pos43,":soldier_spacing",0),
          (val_add,":agents_in_rank",1),
          (try_begin),
            (ge,":agents_in_rank",":troops_in_front_rank"),
            ### NEW SQUARE BEGIN
            (try_begin),
              (eq,":formation_type",mm_order_square),
              (position_rotate_z,pos43,90),
              (position_move_x,pos43,":soldier_spacing",0),
              (val_add,":rank_no",1),
              (try_begin),
                (ge,":rank_no",4),
                (val_sub,":troops_in_front_rank",1),
                (assign,":rank_no",1),
              (try_end),
            ### NEW SQUARE END
            (else_try),
              (position_move_x,pos43,":rank_length",0),
              (position_move_y,pos43,":soldier_spacing_neg",0),
            (try_end),
            (try_begin),
              (eq,":offset_next_rank",1),
              (position_move_x,pos43,":rank_offset"),
              (assign,":offset_next_rank",0),
            (else_try),
              (assign,":offset_next_rank",1),
            (try_end),
            (assign,":agents_in_rank",0),
          (try_end),
        (try_end),
      (try_end),
     ]),
          
  # script_division_get_average_position
  # Input: arg1: team_no  arg2: division
  # Output: pos0: average position. reg0: num_agents_in_division
  ("division_get_average_position",
    [
      (store_script_param_1, ":team_no"),
      (store_script_param_2, ":division"),
      (init_position, pos0),
      (assign, ":num_agents", 0),
      (assign, ":accum_x", 0),
      (assign, ":accum_y", 0),
      (assign, ":accum_z", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_active, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (eq, ":team_no", ":agent_team"),
        (agent_get_division,":agent_division",":cur_agent"),
        (eq, ":division", ":agent_division"),
        (agent_slot_eq,":cur_agent",slot_agent_is_running_away,0),
      
        (agent_get_position, pos62, ":cur_agent"),
      
        (position_get_x, ":x", pos62),
        (position_get_y, ":y", pos62),
        (position_get_z, ":z", pos62),
      
        (val_add, ":accum_x", ":x"),
        (val_add, ":accum_y", ":y"),
        (val_add, ":accum_z", ":z"),
        (val_add, ":num_agents", 1),
      (try_end),
      
      (assign,":num_agents_real",":num_agents"),
      (try_begin), #to avoid division by zeros at below division part.
        (le, ":num_agents", 0),
        (assign, ":num_agents", 1),
      (try_end),
      
      (store_div, ":average_x", ":accum_x", ":num_agents"),
      (store_div, ":average_y", ":accum_y", ":num_agents"),
      (store_div, ":average_z", ":accum_z", ":num_agents"),

      (position_set_x, pos0, ":average_x"),
      (position_set_y, pos0, ":average_y"),
      (position_set_z, pos0, ":average_z"),
      
      (assign, reg0, ":num_agents_real"),
  ]),
     
        
  # script_spawn_crator_on_pos
  # Input: arg1 = prop_kind_id
  # Input: pos49 = pos of crator.
  # Output: reg0 = prop_instance_id
  ("spawn_crator_on_pos",
   [
    (store_script_param, ":prop_kind_id", 1),
    
    (set_fixed_point_multiplier,100),
    
    (assign,":instance_id",-1),
    (init_position,pos36),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (is_between,":prop_kind_id","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (position_copy_origin,pos36,pos49),
      (position_set_z_to_ground_level,pos36),
      (position_get_distance_to_terrain,":dist",pos36),

      # Check if the ground level is terrain, if so then we are on top of the ground and not a prop. spawn that crator!
      (le,":dist",2),
      
      (call_script, "script_find_or_create_scene_prop_instance", ":prop_kind_id", 0, 1, 0),
      (assign,":instance_id",reg0),
    (try_end),
    
    (assign,reg0,":instance_id"),
   ]),
  
  # script_multiplayer_handle_prop_effect
  # Input: prop_instance_id
  #        effect_type
  #        effect_id
  #        handle
  ("multiplayer_handle_prop_effect",
  [
    (store_script_param, ":prop_instance_id", 1),
    (store_script_param, ":effect_type", 2),
    (store_script_param, ":effect_id", 3), # 0 = all 
    (store_script_param, ":handle", 4),
    
    
    # (assign,reg22,":prop_instance_id"),
    # (assign,reg23,":effect_type"),
    # (assign,reg24,":effect_id"),
    # (assign,reg25,":handle"),
    # (display_message,"@in params:  prop_instance_id: {reg22}  effect_type: {reg23}  effect_id: {reg24}  handle: {reg25}"),
    
    
    (try_begin),
      (prop_instance_is_valid,":prop_instance_id"),
      (is_between,":effect_type",prop_effect_types_begin,prop_effect_types_end),
      (gt,":effect_id",-1), 
      (is_between,":handle",prop_effect_handles_begin,prop_effect_handles_end),
      
      # (display_message,"@params are fine."),
      
      (assign,":need_to_update",0),
      (try_begin),
        (eq,":effect_type",prop_effect_type_stop_all),
        (try_begin),
          (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_sound_effect, 0),
          (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect1, 0),
          (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect2, 0),
          (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect3, 0),
          (scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect4, 0),
          
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_sound_effect, -1),
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect1, -1),
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect2, -1),
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect3, -1),
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect4, -1),
          
          (assign,":need_to_update",1),
          
          (neg|multiplayer_is_dedicated_server),
          
          (prop_instance_stop_sound, ":prop_instance_id"),
          (prop_instance_stop_all_particle_systems, ":prop_instance_id"),
        (try_end),
      (else_try),
        (eq,":effect_type",prop_effect_type_sound),
        (try_begin),
          (eq,":handle",prop_effect_handle_start),
          (gt,":effect_id",0), # start only a value above 0
          
          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_sound_effect, ":effect_id"),
          
          (assign,":need_to_update",1),
          
          (neg|multiplayer_is_dedicated_server), # play only for clients
          (prop_instance_play_sound, ":prop_instance_id", ":effect_id"),
        (else_try),
          (eq,":handle",prop_effect_handle_stop),
          (scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_sound_effect, 0),

          (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_sound_effect, -1),
          
          (assign,":need_to_update",1),
          
          (neg|multiplayer_is_dedicated_server), # stop only for clients
          (prop_instance_stop_sound, ":prop_instance_id"),
        (try_end),
      (else_try),
        (eq,":effect_type",prop_effect_type_particle),
        #(display_message,"@we has particles!"),
        (init_position,pos33),
        (try_begin),
          (eq,":handle",prop_effect_handle_start),
          (gt,":effect_id",0), # start only a value above 0
          
         # (display_message,"@particle params are good."),
          
          (assign,":end_cond",scene_prop_slot_parent_prop),
          (try_for_range,":cur_slot",scene_prop_slot_particle_effect1,":end_cond"),
            (scene_prop_slot_eq, ":prop_instance_id",":cur_slot", -1),
            (scene_prop_set_slot,":prop_instance_id", ":cur_slot", ":effect_id"),
          #  (display_message,"@found a slut and assigned."),
            (assign,":end_cond",0),
          (try_end),
          
          (assign,":need_to_update",1),
          
          (neg|multiplayer_is_dedicated_server), # play only for clients
          
         # (display_message,"@adding ze effect.."),
          
          (prop_instance_add_particle_system, ":prop_instance_id", ":effect_id", pos33),
        (else_try),
          (eq,":handle",prop_effect_handle_stop),
          (try_begin),
            (neg|multiplayer_is_dedicated_server), # stop only for clients
            (prop_instance_stop_all_particle_systems, ":prop_instance_id"),
          (try_end),
          
          (try_begin),
            (eq,":effect_id",0), # 0 = all!
            (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect1, 0),
            (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect2, 0),
            (this_or_next|scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect3, 0),
            (scene_prop_slot_ge, ":prop_instance_id", scene_prop_slot_particle_effect4, 0),

            (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect1, -1),
            (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect2, -1),
            (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect3, -1),
            (scene_prop_set_slot,":prop_instance_id", scene_prop_slot_particle_effect4, -1),
            
            (assign,":need_to_update",1),
          (else_try),
            (try_for_range,":cur_slot",scene_prop_slot_particle_effect1,scene_prop_slot_parent_prop),
              (neg|scene_prop_slot_eq, ":prop_instance_id",":cur_slot", -1),
              (try_begin),
                (scene_prop_slot_eq, ":prop_instance_id",":cur_slot", ":effect_id"),
                (scene_prop_set_slot,":prop_instance_id", ":cur_slot", -1),
                (assign,":need_to_update",1),
              (else_try),
                (neg|multiplayer_is_dedicated_server), # start the other particles again only for clients
                (prop_instance_add_particle_system, ":prop_instance_id", ":effect_id", pos33),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
      
      (try_begin),
        (multiplayer_is_server),
        (eq,":need_to_update",1),
        
        # pack it up.
        (assign,":packed_value", ":prop_instance_id"),
        (val_lshift,":packed_value",10), # free up space for effect id.
        (val_add,":packed_value",":effect_id"),
        (val_lshift,":packed_value",2), # free up space for effect type.
        (val_add,":packed_value",":effect_type"),
        (val_lshift,":packed_value",1), # free up space for handle
        (val_add,":packed_value",":handle"), 
        
        (try_for_players, ":player_no", 1),
          (player_is_active, ":player_no"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_prop_effects, ":packed_value"),
        (try_end),
      (try_end),
    (try_end),
  ]),
  
  # script_sp_common_before_mission_start
  # Input: 
  ("sp_common_before_mission_start",
  [
    (assign,"$g_sp_money_gained",0),
    (assign,"$g_sp_allies_lost",0),
    (assign,"$g_sp_companions_lost",0),
    (assign,"$g_sp_enemies_killed",0),
    (assign,"$g_sp_personal_kills",0),
  ]),
  
  # script_sp_process_death_for_battle_results
  # Input: dead_agent_no
  #        killer_agent_no
  ("sp_process_death_for_battle_results",
  [
    (store_script_param, ":dead_agent_no", 1),
    (store_script_param, ":killer_agent_no", 2),
    
    (try_begin),
      (agent_is_active,":dead_agent_no"),
      (agent_get_team,":dead_agent_team",":dead_agent_no"),
      
      (try_begin),
        (eq,":dead_agent_team",0),
        (val_add,"$g_sp_allies_lost",1),
        (try_begin),
          (agent_get_troop_id,":dead_agent_troop",":dead_agent_no"),
          (is_between,":dead_agent_troop",companions_begin, companions_end),
          (val_add,"$g_sp_money_gained",-10),
          (val_add,"$g_sp_companions_lost",1),
        (else_try),
          (val_add,"$g_sp_money_gained",-5),
        (try_end),
      (else_try),
        (val_add,"$g_sp_enemies_killed",1),
        (try_begin),
          (agent_is_active,":killer_agent_no"),
          (get_player_agent_no,":player_agent"),
          (eq,":killer_agent_no",":player_agent"),
          (val_add,"$g_sp_money_gained",20),
          (val_add,"$g_sp_personal_kills",1),
        (else_try),
          (val_add,"$g_sp_money_gained",10),
        (try_end),
      (try_end),
    (try_end),
  ]),
        
  # script_sp_camp_set_merchandise
  # Input:  None
  # Output: None
  ####
  ("sp_camp_set_merchandise",
  [
      (try_begin),
        (reset_item_probabilities,100),
        (set_merchandise_modifier_quality,150),
        #(party_get_slot, ":cur_faction", ":cur_town", slot_center_original_faction), #We should use factional stuff later
        (call_script,"script_store_vince_random_in_range",12,20,0),
        (troop_add_merchandise,"trp_camp_armorer",itp_type_body_armor,reg0),
        (call_script,"script_store_vince_random_in_range",12,20,0),
        (troop_add_merchandise,"trp_camp_armorer",itp_type_head_armor,reg0),
        (call_script,"script_store_vince_random_in_range",4,10,0),
        (troop_add_merchandise,"trp_camp_armorer",itp_type_foot_armor,reg0),
        #(call_script,"script_store_vince_random_in_range",0,6,0),
        #(troop_add_merchandise,"trp_camp_armorer",itp_type_hand_armor,reg0),
        (troop_ensure_inventory_space,"trp_camp_armorer",merchant_inventory_space),
        (troop_sort_inventory, "trp_camp_armorer"),
        (store_troop_gold,":gold","trp_camp_armorer"),
        (troop_remove_gold,"trp_camp_armorer",":gold"),
        (call_script,"script_store_vince_random_in_range",1000,5000,0),
        (troop_add_gold,"trp_camp_armorer",reg0),
        
        (reset_item_probabilities,100),
        (set_merchandise_modifier_quality,150),
        #(party_get_slot, ":cur_faction", ":cur_town", slot_center_original_faction), #We should use factional stuff later
        (call_script,"script_store_vince_random_in_range",4,10,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_pistol,reg0),
        (call_script,"script_store_vince_random_in_range",8,20,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_crossbow,reg0),
        (call_script,"script_store_vince_random_in_range",8,20,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_one_handed_wpn,reg0),
        (call_script,"script_store_vince_random_in_range",4,8,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_bolts,reg0),
        (call_script,"script_store_vince_random_in_range",2,6,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_bullets,reg0),
        (call_script,"script_store_vince_random_in_range",0,2,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_thrown,reg0),
        (call_script,"script_store_vince_random_in_range",8,15,0),
        (troop_add_merchandise,"trp_camp_weaponsmith",itp_type_polearm,reg0),
        (troop_ensure_inventory_space,"trp_camp_weaponsmith",merchant_inventory_space),
        (troop_sort_inventory, "trp_camp_weaponsmith"),
        (store_troop_gold,":gold","trp_camp_weaponsmith"),
        (troop_remove_gold,"trp_camp_weaponsmith",":gold"),
        (call_script,"script_store_vince_random_in_range",1000,5000,0),
        (troop_add_gold,"trp_camp_weaponsmith",reg0),
        
        (reset_item_probabilities,100),
        (set_merchandise_modifier_quality,150),
        #(party_get_slot, ":cur_faction", ":cur_town", slot_center_original_faction), #We should use factional stuff later
        (call_script,"script_store_vince_random_in_range",5,20,0),
        (troop_add_merchandise,"trp_camp_horse_merchant",itp_type_horse,reg0),
        (troop_ensure_inventory_space,"trp_camp_horse_merchant",merchant_inventory_space),
        (troop_sort_inventory, "trp_camp_horse_merchant"),
        (store_troop_gold,":gold","trp_camp_horse_merchant"),
        (troop_remove_gold,"trp_camp_horse_merchant",":gold"),
        (call_script,"script_store_vince_random_in_range",1000,5000,0),
        (troop_add_gold,"trp_camp_horse_merchant",reg0),
      (try_end),
  ]),
        
        
        
        # #define M1 2147483647
# #define M2 2147483399
# #define A1 40015
# #define A2 40692
# #define Q1 ( M1 / A1 )
# #define Q2 ( M2 / A2 )
# #define R1 ( M1 % A1 )
# #define R2 ( M2 % A2 )

# static int seed1 = 1, seed2 = 1;

# /* Dual-Phase Linear Congruential Generator */
# int jsw_rand(void)
# {
    # int result;

    # seed1 = A1 * (seed1 % Q1) - R1 * (seed1 / Q1);
    # seed2 = A2 * (seed2 % Q2) - R2 * (seed2 / Q2);

    # if (seed1 <= 0)
    # {
        # seed1 += M1;
    # }

    # if (seed2 <= 0)
    # {
        # seed2 += M2;
    # }

    # result = seed1 - seed2;

    # if (result < 1)
    # {
        # result += M1 - 1;
    # }

    # return result;
# }

  # script_store_vince_random_in_range
  # Input: low_value
  #        high_value
  #        random_seed, if value 0 uses mission time.
  # 
  # Output: reg0 = randomised value
  ("store_vince_random_in_range",
  [
    (store_script_param, ":low_value", 1),
    (store_script_param, ":high_value", 2),
    #(store_script_param, ":random_seed", 3),
    
    (assign,":result",-1),
    (try_begin),
      (set_fixed_point_multiplier,1), # were working in integers only because well overflows and stuff.
    
      # randomer_const_m1      = 2147483647
      # randomer_const_m2      = 2147483399
      # randomer_const_a1      = 40015
      # randomer_const_a2      = 40692
      # randomer_const_q1      = 53667  # (store_div,":Q1",":M1",":A1"),
      # randomer_const_q2      = 52774  # (store_div,":Q2",":M2",":A2"),
      # randomer_const_r1      = 38657  # (store_mod,":R1",":M1",":A1"),
      # randomer_const_r2      = 3791   # (store_mod,":R2",":M2",":A2"),
      # randomer_const_m1_sub1 = 2147483646
      
      
      (assign,":seed1","$g_randomer_seed1"),
      (assign,":seed2","$g_randomer_seed2"),
      
      # seed1 = A1 * (seed1 % Q1) - R1 * (seed1 / Q1);
      # calc new first seed
      (store_mod,":moddedseed1",":seed1",randomer_const_q1),
      (store_mul,":newseed1",randomer_const_a1,":moddedseed1"),
      (store_div,":divvedseed1",":seed1",randomer_const_q1),
      (store_mul,":subvalue1",randomer_const_r1,":divvedseed1"),
      (store_sub,":seed1",":newseed1",":subvalue1"),
      
      # calc new second seed
      (store_mod,":moddedseed2",":seed2",randomer_const_q2),
      (store_mul,":newseed2",randomer_const_a2,":moddedseed2"),
      (store_div,":divvedseed2",":seed2",randomer_const_q2),
      (store_mul,":subvalue2",randomer_const_r2,":divvedseed2"),
      (store_sub,":seed2",":newseed2",":subvalue2"),
      
      
      (try_begin),
        (le,":seed1",0),
        (val_add,":seed1",randomer_const_m1),
      (try_end),
      
      (try_begin),
        (le,":seed2",0),
        (val_add,":seed2",randomer_const_m2),
      (try_end),
      
      # store back the global seeds
      (assign,"$g_randomer_seed1",":seed1"),
      (assign,"$g_randomer_seed2",":seed2"),
      
      (store_sub,":result",":seed1",":seed2"),
      
      (try_begin),
        (le,":result",0),
        (val_add,":result",randomer_const_m1_sub1),
      (try_end),
      
      (assign,":mod_highvalue",":high_value"),
      (try_begin),
        (gt,":low_value",0), # higher than 0. 
        
        (store_sub,":mod_highvalue",":high_value",":low_value"),
      (try_end),
       
      (val_mod,":result",":mod_highvalue"),
      (val_add,":result",":low_value"),
      
      (set_fixed_point_multiplier,100), # set fixed back.
    (try_end),
    
    (assign,reg0,":result"),
     # (assign,reg1,"$g_randomer_seed1"),
     # (assign,reg2,"$g_randomer_seed2"),
     # (display_message,"@Vin randomvalue: {reg0} seed1:{reg1}  seed2:{reg2}"),
   


   # (try_begin),
      # (try_begin),
        # (eq,":random_seed",0),
        # (store_mission_timer_a_msec,":random_seed"),
        # (ge,":random_seed",1000),
        # (store_mod, ":random_seed", ":random_seed", 1000), # Remove seconds from this number to stop overflows.
      # (try_end),

      # (val_add,":low_value",":random_seed"),
      # (val_add,":high_value",":random_seed"),

      # (store_random_in_range,":resulting_random",":low_value",":high_value"),

      # (val_sub,":resulting_random",":random_seed"),
    # (try_end),
    
    # (assign,reg0,":resulting_random"),
  ]),

  
  # script_set_prop_child_inactive
  # Input: instance_id
  ("set_prop_child_inactive",
  [
    (store_script_param, ":instance_id", 1),
    
    (set_fixed_point_multiplier,100),
    (init_position,pos9),
    (try_begin),
      (prop_instance_is_valid,":instance_id"),
      
      (scene_prop_get_slot,":parent_instance_id",":instance_id",scene_prop_slot_parent_prop),
      (prop_instance_is_valid,":parent_instance_id"),
      
      (scene_prop_set_slot,":instance_id", scene_prop_slot_is_active, 0),
      (scene_prop_get_slot,":x_value",":instance_id",scene_prop_slot_x_value),
      (scene_prop_get_slot,":y_value",":instance_id",scene_prop_slot_y_value),
      
      (prop_instance_get_position,pos10,":parent_instance_id"),
      (position_get_rotation_around_z,":z_rot",pos10),
      (position_copy_origin,pos9,pos10),
      (position_rotate_z,pos9,":z_rot"),
      (position_move_x,pos9,":x_value"),
      (position_move_y,pos9,":y_value"),
      (position_set_z,pos9,-3000),
      
      (prop_instance_get_position,pos11,":instance_id"),
      
      (get_distance_between_positions,":dist",pos9,pos11),
      (gt,":dist",0),
      (try_begin),
         (prop_instance_is_animating, ":animating", ":instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":instance_id"),
       (try_end),
      (prop_instance_set_position,":instance_id",pos9),
      #(prop_instance_animate_to_position, ":instance_id", pos9, 1),
    (try_end),
  ]),
  
  # script_set_prop_child_active
  # Input: instance_id
  ("set_prop_child_active",
  [
    (store_script_param, ":instance_id", 1),
    
    (set_fixed_point_multiplier,100),
    (init_position,pos9),
    (try_begin),
      (prop_instance_is_valid,":instance_id"),
      
      (scene_prop_get_slot,":parent_instance_id",":instance_id",scene_prop_slot_parent_prop),
      (prop_instance_is_valid,":parent_instance_id"),
      
     # (prop_instance_stop_animating,":parent_instance_id"),
      (prop_instance_get_position,pos9,":parent_instance_id"),

      (scene_prop_set_slot,":instance_id", scene_prop_slot_is_active, 1),
      (scene_prop_get_slot,":x_value",":instance_id",scene_prop_slot_x_value),
      (scene_prop_get_slot,":y_value",":instance_id",scene_prop_slot_y_value),
      (scene_prop_get_slot,":z_value",":instance_id",scene_prop_slot_z_value),
      (scene_prop_get_slot,":x_rot",":instance_id",scene_prop_slot_x_rot),
      (scene_prop_get_slot,":y_rot",":instance_id",scene_prop_slot_y_rot),
      (scene_prop_get_slot,":z_rot",":instance_id",scene_prop_slot_z_rot),
      (scene_prop_get_slot,":float_ground",":instance_id",scene_prop_slot_float_ground),
      
      (try_begin),
        (eq,":float_ground",1),
        
        # reset pos9 rotations (all but z_rot)
        (init_position,pos10),
        (position_get_rotation_around_z,":parent_z_rot",pos9),
        (position_copy_origin,pos10,pos9),
        (position_rotate_z,pos10,":parent_z_rot"),
        (copy_position,pos9,pos10),
        
        (position_move_x, pos9,":x_value"),
        (position_move_y, pos9,":y_value"),
        (position_set_z_to_ground_level,pos9),
      (else_try),
        (position_move_x, pos9,":x_value"),
        (position_move_y, pos9,":y_value"),
        (position_move_z, pos9,":z_value"),
      (try_end),
      
      
      (position_rotate_x,pos9,":x_rot"),
      (position_rotate_y,pos9,":y_rot"),
      (position_rotate_z,pos9,":z_rot"),
      
      (prop_instance_get_position,pos10,":instance_id"),
      (get_distance_between_positions,":dist",pos9,pos10),
      (gt,":dist",0),
      
      (try_begin),
         (prop_instance_is_animating, ":animating", ":instance_id"),
         (eq,":animating",1),
         (prop_instance_stop_animating, ":instance_id"),
       (try_end),
      (prop_instance_set_position,":instance_id",pos9),
     # (prop_instance_animate_to_position, ":instance_id", pos9, 0),
    (try_end),
  ]),
  
  
  # script_recoil_cannon
  # Input: cannon_instance
  #        direction  1 = backwards (fired)  2 = forwards (pushing back)
  ("recoil_cannon",
  [
    (store_script_param, ":cannon_instance", 1),
    (store_script_param, ":direction", 2),
    (store_script_param, ":use_given_position", 3),
    
    (assign,":has_recoil",0),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      (prop_instance_is_valid,":cannon_instance"),
      
      (assign,":continue",0),
      (try_begin),
        (eq,":direction",1),
        (scene_prop_set_slot,":cannon_instance", scene_prop_slot_just_fired, 1),
        (assign,":continue",1),
      (else_try),
        (eq,":direction",2),
        (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_just_fired, 1),
        (scene_prop_set_slot,":cannon_instance", scene_prop_slot_just_fired, 0), 
        (assign,":continue",1),
      (try_end),
      (eq,":continue",1),
      
      (prop_instance_get_scene_prop_kind,":cannon_kind",":cannon_instance"),
      
      (assign,":rotate_wheels",1),
      (assign,":rotation_change",-104),
      (assign,":move_wood",1),
      (assign,":recoil_x",0),
      (assign,":recoil_y",0),
      (assign,":recoil_z",0),
      (assign,":speed",50), # speed in ms
      (try_begin),
        (this_or_next|eq, ":cannon_kind", "spr_mm_cannon_12pdr_wood"),
        (this_or_next|eq, ":cannon_kind", "spr_mm_cannon_howitzer_wood"),
        (eq, ":cannon_kind", "spr_mm_cannon_naval_wood"),
        (assign,":recoil_x",-130),
        (assign,":has_recoil",1),
        (try_begin),
          (eq, ":cannon_kind", "spr_mm_cannon_naval_wood"),
          (assign,":rotate_wheels",0),
        (try_end),
      (else_try),
        (eq, ":cannon_kind", "spr_mm_cannon_fort_wood"),
        (assign,":recoil_x",-112),
        (assign,":recoil_z",10),
        (assign,":has_recoil",1),
        (assign,":rotate_wheels",0),
        (assign,":move_wood",0),
        (assign,":speed",40),
      (try_end),
      
      (try_begin),
        (eq,":rotate_wheels",0),
        (assign,":rotation_change",0),
      (try_end),
      
      (try_begin), # if pushing that thing back reverse everything
        (eq,":direction",2),
        (val_mul,":rotation_change",-1),
        (val_mul,":recoil_x",-1),
        (val_mul,":recoil_y",-1),
        (val_mul,":recoil_z",-1),
        (assign,":speed",200), 
      (try_end),
      
      # Resize the positions to scale
      (set_fixed_point_multiplier, 100),
      
      
      (try_begin),
        # is it even scaled?
        (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_is_scaled, 1), 
        (scene_prop_get_slot,":x_scale",":cannon_instance",scene_prop_slot_x_scale),
        (scene_prop_get_slot,":y_scale",":cannon_instance",scene_prop_slot_y_scale),
        (scene_prop_get_slot,":z_scale",":cannon_instance",scene_prop_slot_z_scale),
        
        # check if at least one not 0
        (this_or_next|gt,":x_scale",0), # c
        (this_or_next|gt,":y_scale",0),
        (gt,":z_scale",0),
        
        (val_mul, ":recoil_x", ":x_scale"),            
        (val_mul, ":recoil_y", ":y_scale"),
        (val_mul, ":recoil_z", ":z_scale"),              
        (val_div, ":recoil_x", 1000),
        (val_div, ":recoil_y", 1000),
        (val_div, ":recoil_z", 1000),
      (try_end),
      
      (try_begin),
        (eq,":has_recoil",1),
        
        (try_begin),
          (eq,":use_given_position",0),
          (prop_instance_get_position, pos57, ":cannon_instance"), # pos57 = cannon location
        (try_end),
        (assign,":move_pos",1),
        (try_begin),
          (eq,":direction",2),
          (eq,":move_wood",0),
          (assign,":move_pos",0),
        (try_end),
        (try_begin),
          (eq,":move_pos",1),
          (position_move_x,pos57,":recoil_x",0),
          (position_move_y,pos57,":recoil_y",0),
          (position_move_z,pos57,":recoil_z",0),
        (try_end),
        (copy_position,pos31,pos57),
         
        (call_script,"script_cannon_instance_get_wheels",":cannon_instance"),
        (assign,":wheels_instance",reg0),
         
        (try_begin),
          #(gt,":wheels_instance",-1),
          (prop_instance_is_valid,":wheels_instance"), #patch1115 18/5
           
          (try_begin),
            (eq,":move_wood",1),
            (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_instance", ":speed",":wheels_instance",0),
            (try_begin),
              (eq,":direction",2),
              (scene_prop_set_slot,":cannon_instance",scene_prop_slot_just_pushed_back,1),
            (try_end),
          (else_try),
            (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_instance", ":speed",":wheels_instance",":cannon_instance"),
            (try_begin),
              (eq,":direction",2),
              (scene_prop_set_slot,":wheels_instance",scene_prop_slot_just_pushed_back,1),
            (try_end),
          (try_end),
          
          (try_begin),
            (eq,":rotate_wheels",1),
            
            (try_begin), # always rotate the position.
              (eq,":direction",1),
              (position_rotate_y,pos31,":rotation_change"),
            (try_end),
            
            # but only set the slot when needed.
            (scene_prop_get_slot,":y_rot_value",":wheels_instance",scene_prop_slot_y_rot),
            
            (neq,":y_rot_value",":rotation_change"), # not already pushed back..?
            
            (val_add,":y_rot_value",":rotation_change"),
            (scene_prop_set_slot,":wheels_instance", scene_prop_slot_y_rot, ":y_rot_value"),
          (try_end),

          (prop_instance_animate_to_position, ":wheels_instance", pos31, ":speed"),
        (else_try),
          (try_begin),
            (eq,":move_wood",1),
            (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_instance", ":speed",0,0),
          (else_try),
            (call_script, "script_prop_instance_animate_to_position_with_childs", ":cannon_instance", ":speed",":cannon_instance",0),
          (try_end),
          
          (try_begin),
            (eq,":direction",2),
            (scene_prop_set_slot,":cannon_instance",scene_prop_slot_just_pushed_back,1),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
    
    (assign,reg0,":has_recoil"),
  ]),
  
        
  # script_lighting_strike
  # Input: thunder_delay
  # Output: $g_thunder_at_time = mission time for thunder sound in ms
  ("lighting_strike",
  [
    (store_script_param, ":thunder_delay", 1),
    
    (try_begin),
      (eq,"$g_thunder_state",0),
    
      (try_begin),
        (eq,"$g_thunder_type",1),
        (assign,"$g_thunder_state",3),
      (else_try),
        (assign,"$g_thunder_state",1),
      (try_end),
    
      (store_mission_timer_a_msec,":thunder_time"),
      (val_add,":thunder_time",":thunder_delay"),
    
      (assign,"$g_thunder_at_time",":thunder_time"),
    (try_end),
  ]),
     
  # script_commander_get_additional_bots
  # Input: arg1 = player_id
  # Output: reg0 = num bots in squad
  ("commander_get_additional_bots",
  [
    (store_script_param, ":player_id", 1),
    
    (assign,":additional_bots",0),
    (try_begin),
      (player_is_active,":player_id"),
      
      (eq,"$g_scale_squad_size",1),
      
      (assign, ":number_of_players_at_team_1", 0),
      (assign, ":number_of_players_at_team_2", 0),
      (try_for_players, ":cur_player", "$g_ignore_server"),
        (player_is_active, ":cur_player"),
        (player_slot_ge, ":cur_player", slot_player_spawned_this_round, 1), #Don't count players that never spawned
        (player_get_team_no, ":player_team", ":cur_player"),
        (try_begin),
          (eq, ":player_team", 0),
          (val_add, ":number_of_players_at_team_1", 1),
        (else_try),
          (eq, ":player_team", 1),
          (val_add, ":number_of_players_at_team_2", 1),
        (try_end),         
      (try_end),
      (gt,":number_of_players_at_team_1",0),
      (gt,":number_of_players_at_team_2",0),
      (neq,":number_of_players_at_team_1", ":number_of_players_at_team_2"),
      (try_begin),
        (gt, ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
        (assign, ":team_with_less_players", 1),
      (else_try),
        (gt, ":number_of_players_at_team_2", ":number_of_players_at_team_1"),
        (assign, ":team_with_less_players", 0),
      (try_end),
      (player_get_team_no, ":player_team", ":player_id"),
      (eq,":player_team",":team_with_less_players"),
  
      (try_begin),
        (eq,":team_with_less_players", 0),
        (store_sub,":player_difference",":number_of_players_at_team_2",":number_of_players_at_team_1"),
        (assign,":num_players_in_team_with_less_players",":number_of_players_at_team_1"),
      (else_try),
        (store_sub,":player_difference",":number_of_players_at_team_1",":number_of_players_at_team_2"),
        (assign,":num_players_in_team_with_less_players",":number_of_players_at_team_2"),
      (try_end),
      (store_mul,":num_bots_needed",":player_difference","$g_squad_size_limit"),
      (store_div,":additional_bots",":num_bots_needed",":num_players_in_team_with_less_players"),
    (try_end),
    (assign,reg0,":additional_bots"),
  ]),
     
  # script_scale_num_bots_after_troop_type
  # Input: arg1 = bot_type
  #        arg2 = inital_number
  # Output: reg0 = scaled_number
  ("scale_num_bots_after_troop_type",
  [
    (store_script_param, ":bot_type", 1),
    (store_script_param, ":inital_number", 2),
    
    (troop_get_slot,":scale_factor",":bot_type", slot_troop_scale_factor),
    (store_mul,":scaled_number",":inital_number",":scale_factor"),
    (val_div,":scaled_number",100),
    
    (assign,reg0,":scaled_number"),
  ]),
  
  # script_on_commander_leave_or_team_switch
  # Input: arg1 = player_id
  #        arg2 = player_team
  # Output: none
  ("on_commander_leave_or_team_switch",
  [
    (store_script_param, ":player_id", 1),
    (store_script_param, ":player_team", 2),
    
    (try_begin),
      (player_is_active,":player_id"),
      
      (assign,":remove",0),
      (try_begin),  #Spawn time isn't over
        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),
        (lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
        (assign,":remove",1), #Remove squad
      (else_try),  #Checking for players left in teams
        (assign, ":players_in_team_1", 0),
        (assign, ":players_in_team_2", 0),
    
        (assign, ":end_cond", multiplayer_player_loops_end),
        (try_for_range, ":player_no", "$g_player_loops_begin", ":end_cond"),
          (player_is_active, ":player_no"),
          (player_get_team_no, ":player2_team", ":player_no"),
          (try_begin),
            (eq, ":player2_team", 0),
            (val_add, ":players_in_team_1", 1),
          (else_try),
            (eq, ":player2_team", 1),
            (val_add, ":players_in_team_2", 1),
          (try_end),
           
          (try_begin),
            (gt, ":players_in_team_1", 0),
            (gt, ":players_in_team_2", 0),
            (assign, ":end_cond", 0),
          (try_end),
        (try_end),

        (try_begin), #If either team has no players
          (this_or_next|eq, ":players_in_team_1", 0),
          (eq, ":players_in_team_2", 0),
          (assign,":remove",1), #Remove squad
        (try_end),
      (try_end),
      (try_begin),
        (eq,":remove",1),
        #patch1115 fix 43/14 start
        (player_set_slot, ":player_id", slot_player_musician_spawned, 0),
        (player_set_slot, ":player_id", slot_player_drummer_spawned, 0),
        (player_set_slot, ":player_id", slot_player_flag_spawned, 0),
        (player_set_slot, ":player_id", slot_player_formation_change, 0),
        (player_set_slot, ":player_id", slot_player_formation_change_2, 0),
        (player_set_slot, ":player_id", slot_player_bot_order, 1),
        #patch1115 fix 43/14 end
        (try_for_agents, ":agent_no"),
          (agent_is_active,":agent_no"),
          (agent_is_active,":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_is_non_player, ":agent_no"),  
          (agent_get_team, ":agent_team", ":agent_no"), 
          (eq, ":agent_team", ":player_team"),         
          (agent_get_group, ":agent_group", ":agent_no"),
          (eq, ":agent_group", ":player_id"),
          (remove_agent, ":agent_no"),
        (try_end),
#      (else_try), #Checking if any player in leaving player's team has no bots
#        (eq, "$g_multiplayer_player_respawn_as_bot", 1), #Only if respawn as bot is enabled
#        (assign, ":end_cond", multiplayer_player_loops_end),
#        (try_for_range, ":player_no", "$g_player_loops_begin", ":end_cond"),
#          (player_is_active, ":player_no"),
#          (player_get_team_no, ":player2_team", ":player_no"),
#          (eq,":player2_team",":player_team"),
#          (player_get_agent_id,":agent_id",":player_no"),
#          (agent_is_active,":agent_id"),
#          (neg|agent_is_alive,":agent_id"), #Player is dead
#          
#          (assign,":has_bots",0),
#          (try_for_agents, ":agent_no"), #Checking if player has alive bots
#            (agent_is_active,":agent_no"),
#            (eq,":has_bots",0),
#            (agent_is_human, ":agent_no"),
#            (agent_is_alive, ":agent_no"),
#            (agent_is_non_player, ":agent_no"),  
#            (agent_get_team, ":agent_team", ":agent_no"), 
#            (eq, ":agent_team", ":player_team"),         
#            (agent_get_group, ":agent_group", ":agent_no"),
#            (eq, ":agent_group", ":player_no"),
#            (assign,":has_bots",1),
#          (try_end),
#          (eq,":has_bots",0), #Player has no alive bots
#          (assign,":agent_in_squad",-1),
#          (try_for_agents, ":agent_no"), #Get the squad of leaving player
#            (agent_is_active,":agent_no"),
#            (agent_is_human, ":agent_no"),
#            (agent_is_alive, ":agent_no"),
#            (agent_is_non_player, ":agent_no"),  
#            (agent_get_team, ":agent_team", ":agent_no"), 
#            (eq, ":agent_team", ":player_team"),         
#            (agent_get_group, ":agent_group", ":agent_no"),
#            (eq, ":agent_group", ":player_id"),
#            (agent_set_group,":agent_no",":player_no"), #Assign squad to player on team with no bots
#            (assign,":agent_in_squad",":agent_no"),
#          (try_end),
#          (try_begin),
#            (neq,":agent_in_squad",-1), #Make sure there are any agents...
#            (player_control_agent, ":player_no", ":agent_in_squad"), #Spawn the player as an agent in the squad
#            #Spawn stuff
#            (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
#            (val_add, ":num_spawns", 1),
#            (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
#          (try_end),
#          (assign,":end_cond",0), #break
#        (try_end),
      (else_try),
        #Else simply reset orders
        (set_show_messages,0),
        (team_give_order, ":player_id", grc_everyone, mordr_use_any_weapon),
        (team_give_order, ":player_id", grc_everyone, mordr_charge),
        (team_give_order, ":player_id", grc_everyone, mordr_fire_at_will),
        (set_show_messages,1),
        #patch1115 fix 43/15 start
        (player_set_slot, ":player_id", slot_player_musician_spawned, 0),
        (player_set_slot, ":player_id", slot_player_drummer_spawned, 0),
        (player_set_slot, ":player_id", slot_player_flag_spawned, 0),
        (player_set_slot, ":player_id", slot_player_formation_change, 0),
        (player_set_slot, ":player_id", slot_player_formation_change_2, 0),
        (player_set_slot, ":player_id", slot_player_bot_order, 1),
        #patch1115 fix 43/15 end
      (try_end),
    (try_end),
  ]),
  
  # script_return_team_with_least_players
  # Input: arg1 = exclude_player_no
  # Output: reg0 = team with least players
  ("return_team_with_least_players",
  [
   (store_script_param,":exclude_player_no",1), # set to -1 to count all players
  
   (assign, ":number_of_players_at_team_1", 0),
   (assign, ":number_of_players_at_team_2", 0),
   (try_for_players, ":cur_player", "$g_ignore_server"),
     (player_is_active, ":cur_player"),
     (neq, ":cur_player", ":exclude_player_no"),
     (player_get_team_no, ":player_team", ":cur_player"),
     (try_begin),
       (eq, ":player_team", 0),
       (val_add, ":number_of_players_at_team_1", 1),
     (else_try),
       (eq, ":player_team", 1),
       (val_add, ":number_of_players_at_team_2", 1),
     (try_end),
   (try_end),
   (try_begin),
     (lt,":number_of_players_at_team_1",":number_of_players_at_team_2"),
     (assign,":team_with_least_players",0),
   (else_try),
     (lt,":number_of_players_at_team_2",":number_of_players_at_team_1"),
     (assign,":team_with_least_players",1),
   (else_try),
     (assign,":team_with_least_players",-1),
   (try_end),
   (assign,reg0,":team_with_least_players"),
  ]),
  
  # script_multiplayer_get_unit_type_for_select_presentation
  # Input: arg1 = troop_id
  # Output: reg0 = unit_type
  ("multiplayer_get_unit_type_for_select_presentation",
    [ 
    (store_script_param, ":troop_no", 1),
    
    (assign,":unit_type",troop_select_type_infantry),
    (try_begin), # Cavalry
      (this_or_next|is_between, ":troop_no", "trp_british_hussar","trp_british_arty"), # Brits
      (this_or_next|is_between, ":troop_no", "trp_french_hussar","trp_french_arty"), # French
      (this_or_next|is_between, ":troop_no", "trp_prussian_dragoon","trp_prussian_arty"), # Prussian
      (this_or_next|is_between, ":troop_no", "trp_russian_hussar","trp_russian_arty"), # Russian
      (this_or_next|is_between, ":troop_no", "trp_austrian_hussar","trp_austrian_arty"), # Austrian
                   (is_between, ":troop_no", "trp_rhine_mounted_jaeger","trp_rhine_arty"), # Rhine

      (assign,":unit_type",troop_select_type_cavalry),
    (else_try),
      (this_or_next|is_between, ":troop_no", "trp_british_arty","trp_french_infantry"), # Brits
      (this_or_next|is_between, ":troop_no", "trp_french_arty","trp_prussian_infantry"), # French
      (this_or_next|is_between, ":troop_no", "trp_prussian_arty","trp_russian_partizan"), # Prussian
      (this_or_next|is_between, ":troop_no", "trp_russian_arty","trp_austrian_infantry"), # Russian
      (this_or_next|is_between, ":troop_no", "trp_austrian_arty","trp_rhine_infantry_bavaria"), # Austrian
                   (is_between, ":troop_no", "trp_rhine_arty","trp_british_arty_commander"), # Rhine
      
            
      (assign,":unit_type",troop_select_type_artillery),
    (try_end),
      
    (assign,reg0,":unit_type"),
  ]),
  
  
  # script_game_missile_launch
  # Input: arg1 = shooter_agent_id, arg2 = agent_weapon_item_id, 
  #        arg3 = missile_weapon_id, arg4 = missile_item_id
  #        pos1 = weapon_item_position
  # Output: none 
  ("game_missile_launch",
    [ 
    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      
      (store_script_param, ":agent_id", 1),
      (store_script_param, ":item_id", 2),
      (store_script_param, ":missile_weapon_id", 3),
      
      (agent_is_active,":agent_id"),
      (agent_is_alive,":agent_id"),
      (neq,":missile_weapon_id","itm_cannon_canister_dummy"),
      
      (set_fixed_point_multiplier, 100),
      (copy_position,pos41,pos1),
      
      (assign, ":sound_id", -1),
      (assign, ":muzzle_y", 0),
      (assign, ":muzzle_x", -16),
      (assign, ":muzzle_y_rot", 0),
      (assign, ":has_pan", 1),
     # (assign, ":pan_y", 0),
      (assign, ":smoke_size", 17),
      (assign, ":spark_size", 100),
      (assign, ":pan_smoke_size", 8),
      (try_begin),
        (is_between,":item_id","itm_french_cav_pistol","itm_french_mousquiton"), # Pistols
        (assign, ":sound_id", "snd_pistol"),
        (assign, ":muzzle_y", 44),
        (assign, ":muzzle_x", 0),
        (assign, ":muzzle_y_rot", -45),
        (assign, ":has_pan", 0),
        (assign, ":smoke_size", 14),
        (assign, ":spark_size", 40),
      (else_try),
        (is_between,":item_id","itm_french_mousquiton","itm_russian_rifle_1805"), # Carabines
        (assign, ":sound_id", "snd_musket"), #  snd_carabine
        (assign, ":muzzle_y", 104),
      (else_try),
        (is_between,":item_id","itm_russian_rifle_1805","itm_french_charleville"), # Rifles
        (assign, ":sound_id", "snd_rifle"),
        (assign, ":muzzle_y", 90),
      (else_try),
        (is_between,":item_id","itm_french_charleville","itm_french_art_off_sword"), # Muskets
        (assign, ":sound_id", "snd_musket"),
        (assign, ":muzzle_y", 132),
      (try_end),
      
      (try_begin),
        (call_script, "script_client_get_my_agent"),
        (eq, ":agent_id", reg0), # shooting myself.
        
        # particles for myself 65% so i can see what I shoot at.
        (val_mul,":smoke_size", 65),
        (val_div,":smoke_size", 100),
        (val_mul,":pan_smoke_size", 65),
        (val_div,":pan_smoke_size", 100),
      (try_end),
       
      # Sounds
      (gt, ":sound_id", -1),
      (play_sound_at_position, ":sound_id", pos41),      

      # Default movement
      (position_move_x,pos41,":muzzle_x"),
      (position_move_y,pos41,18),

      # pan flash and smoke..
      (try_begin),
        (eq,":has_pan",1),
        
        (particle_system_burst_no_sync, "psys_pan_smoke", pos41, ":pan_smoke_size"),
        #(position_rotate_z, pos41, 45),
        (particle_system_burst_no_sync, "psys_pan_flash", pos41, 4),
        #(position_rotate_z, pos41, -45),
      (try_end),
      
      # the fire particles
      (position_rotate_z,pos41,":muzzle_y_rot"),
      (position_move_y,pos41,":muzzle_y"),
      (particle_system_burst_no_sync, "psys_musket_smoke", pos41, ":smoke_size"),
      (particle_system_burst_no_sync, "psys_musket_flash", pos41, ":spark_size"),
      #(particle_system_burst_no_sync, "psys_musket_sparks", pos41, ":spark_size"),
    (try_end),
  ]),
 
  # script_game_missile_dives_into_water
  # Input: arg1 = missile_item_id, pos1 = missile_position_on_water
  # Output: none 
  ("game_missile_dives_into_water",
    [ 
    #(store_script_param, ":missile_item_id", 1),

    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      
      (copy_position, pos51, pos1),
      (particle_system_burst_no_sync, "psys_water_hit_a", pos51, 8),
      (position_move_z, pos51, 5, 1),
      (particle_system_burst_no_sync, "psys_water_hit_b", pos51, 4),
    (try_end),
  ]),

  # script_mm_on_bullet_hit
  # input: pos63           # position of hit.
  #        collision_type  # Type of the collision
  ("mm_on_bullet_hit", 
  [
    (try_begin),
      (neg|multiplayer_is_dedicated_server),
      
      (store_script_param, ":collision_type", 1),
      
      (try_begin),
        # 0 = world
        # 1 = agent
        # 2 = dynamic prop
        # 3 = world
        # 4 = mission object
        # 8 = friend
        # 9 = neutral agent
        # 10 = under water
        (this_or_next|eq, ":collision_type", 0), # world collisions
        (eq, ":collision_type", 3), # world collisions
        (particle_system_burst_no_sync, "psys_musket_hit", pos63, 8),
        (particle_system_burst_no_sync, "psys_musket_hit_particle", pos63, 8),
      (else_try),
        (this_or_next|eq, ":collision_type", 2),
        (eq, ":collision_type", 4), # mission objects
        (particle_system_burst_no_sync, "psys_musket_hit", pos63, 8),#psys_musket_hit_objects
      (try_end),
    (try_end),
  ]), 	
  
  # script_set_agent_controlling_prop
  # Input: prop_instance of prop under control
  #        agent_id of controlling agent
  #        value  1 = controlling  2 = stop controlling
  ("set_agent_controlling_prop",
  [
    (store_script_param, ":prop_instance", 1),
    (store_script_param, ":agent_id", 2),
    (store_script_param, ":value", 3),
    
    (try_begin),
      (prop_instance_is_valid,":prop_instance"),
      (agent_is_active,":agent_id"),
      (assign,":error_message",-1),
      (try_begin),
        (prop_instance_get_scene_prop_kind, ":prop_kind", ":prop_instance"),
        (try_begin),
          (eq,":value",1),
          (scene_prop_set_slot,":prop_instance",scene_prop_slot_controller_agent,":agent_id"),
          (agent_set_slot,":agent_id",slot_agent_current_control_prop,":prop_instance"), # assign agent his current controlling prop.
          
          # For cannons switch to lighter.
          (try_begin),
            
            (is_between,":prop_kind",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
            
            (agent_get_wielded_item, ":wielded_item", ":agent_id", 0),
            (neq, ":wielded_item", "itm_cannon_lighter"),
            (try_begin),
              (agent_has_item_equipped,":agent_id","itm_cannon_lighter"),
              (agent_set_wielded_item,":agent_id","itm_cannon_lighter"),
            (else_try),
              # dont need lighter in commander battle.
              (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
              (game_in_multiplayer_mode),
              (assign,":error_message", "str_need_to_have_a_lighter"),
							(call_script,"script_stop_agent_controlling_cannon",":prop_instance",":agent_id"),
            (try_end),
          (try_end),
        (else_try),
          (scene_prop_set_slot,":prop_instance",scene_prop_slot_controller_agent,-1),
          (agent_set_slot,":agent_id",slot_agent_current_control_prop,-1),
          
          # store when lost control.
          (is_between,":prop_kind", "spr_mm_ship", "spr_door_destructible"),
          
          (store_mission_timer_a,":cur_time"),
          (scene_prop_set_slot, ":prop_instance", scene_prop_slot_time_left, ":cur_time"),
        (try_end),
        
        (game_in_multiplayer_mode),
        (try_begin),
          (multiplayer_is_server),
          (agent_get_player_id,":agent_player",":agent_id"),
          (player_is_active,":agent_player"),
          (try_begin),
            (eq,":error_message",-1),
            (multiplayer_send_2_int_to_player, ":agent_player", multiplayer_event_return_currently_controlling_object, ":prop_instance", ":value"),
          (else_try),
            (multiplayer_send_2_int_to_player, ":agent_player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_error, ":error_message"),
          (try_end),
        (try_end),
      (else_try),
        (try_begin),
          (eq,":error_message",-1),
          (call_script,"script_client_process_set_prop_control",":prop_instance",":value"),
        (else_try),
          (call_script, "script_show_multiplayer_message", multiplayer_message_type_error, ":error_message"),
        (try_end),
      (try_end),
    (try_end),
  ]),
  
  # script_client_process_set_prop_control
  # Input: prop_instance of prop under control
  #        value  1 = controlling  2 = stop controlling
  ("client_process_set_prop_control",
  [
    (store_script_param, ":prop_instance", 1),
    (store_script_param, ":value", 2),
    
    (try_begin),
      (prop_instance_is_valid,":prop_instance"),
      
      (assign,":prop_kind",-1),
      (try_begin),
        (prop_instance_is_valid,":prop_instance"),
        (prop_instance_get_scene_prop_kind, ":prop_kind", ":prop_instance"),
      (try_end),
      (try_begin),
        (eq,":value",1), # 1 = controlling
        (is_between,":prop_kind","spr_invalid_object","spr_scene_props_end"),
        (assign, "$g_cur_control_prop_instance", ":prop_instance"),
        (assign, "$g_cur_control_prop_kind", ":prop_kind"),
        (assign, "$g_currently_controlling_object", 1),
        
        (try_begin),
          (is_between,":prop_kind",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
          # cannon thus set crosshair on.
          (start_presentation,"prsnt_multiplayer_cannon_crosshair"),
        #(else_try),
          # nothing at this time for ships.
        (try_end),
      (else_try), # else reset the instance
        (assign, "$g_cur_control_prop_instance", 0),
        (assign, "$g_cur_control_prop_kind", 0),
        (assign, "$g_currently_controlling_object", 0),
        (try_begin),
          (is_between,":prop_kind",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
          # cannon thus set crosshair off.
          (is_presentation_active,"prsnt_multiplayer_cannon_crosshair"),
          (assign,"$g_close_crosshair",1),
        #(else_try),
          # nothing at this time for ships.
        (try_end),
      (try_end),
    (try_end),
  ]),
  
  # script_stop_agent_controlling_cannon
  # Input: prop_instance of cannon
  #        agent_id of agent
  ("stop_agent_controlling_cannon",
  [
    (store_script_param, ":prop_instance", 1),
    (store_script_param, ":agent_id", 2),
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (prop_instance_is_valid,":prop_instance"),
      (agent_is_active,":agent_id"),
      
      (call_script,"script_set_agent_controlling_prop",":prop_instance",":agent_id",0),
      
      (call_script, "script_prop_instance_find_first_child_of_type", ":prop_instance", "spr_mm_cannon_aim_platform"),
      (prop_instance_is_valid,reg0),
   #   (prop_instance_get_position,pos19,reg0),
    #  (position_get_rotation_around_z,":z_rot",pos19),
    #  (position_copy_origin,pos20,pos19),
  #    (position_rotate_z,pos20,":z_rot"),
   #   (copy_position,pos21,pos20),
    #  (position_move_y,pos20,-100),
     # (agent_set_position,":agent_id",pos20),
      (call_script,"script_set_prop_child_inactive",reg0),
      #(call_script, "script_clean_up_prop_instance", reg0),
      (agent_set_animation,":agent_id","anim_kneeling_end"),
     # (agent_set_position,":agent_id",pos21),
    (try_end),
  ]),
  
  
  # script_fire_cannon
  # Input: cannon_instance of cannon
  #        agent_id of agent
  ("fire_cannon",
  [
   (store_script_param, ":cannon_instance", 1),
   (store_script_param, ":using_agent", 2),
    
   (try_begin),
     (this_or_next|multiplayer_is_server),
     (neg|game_in_multiplayer_mode),
     
     (prop_instance_is_valid,":cannon_instance"),
     (agent_is_active,":using_agent"),
     
     (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_has_ball, 1),
     (scene_prop_slot_eq, ":cannon_instance", scene_prop_slot_is_loaded, 1),
     (scene_prop_get_slot,":ammo_type",":cannon_instance",scene_prop_slot_ammo_type),
     (prop_instance_get_scene_prop_kind,":cannon_kind",":cannon_instance"),
     (set_fixed_point_multiplier,100),
     
     (call_script,"script_cannon_instance_get_barrel",":cannon_instance"),
     (assign,":barrel_instance",reg0),
     
     (prop_instance_get_position, pos11, ":cannon_instance"),
     (try_begin),        
       #(gt,":barrel_instance",-1),
       (prop_instance_is_valid,":barrel_instance"), #patch1115 fix 18/4
       (prop_instance_get_position, pos10, ":barrel_instance"),
       (copy_position, pos11, pos10),
     (else_try),
       (assign,":barrel_instance",":cannon_instance"),
     (try_end),
     
     # Get the origin position of ball/canister. Based on the relative position of the load button.
     (assign,":load_button_instance",-1),
     (copy_position,pos12,pos11),
     (assign, ":load_found", 0),
     (try_for_range,":cur_loadtype","spr_mm_load_cartridge_button","spr_mm_reload_button"),
       (eq, ":load_found", 0),
       (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_loadtype"),
       (assign,":load_button_instance",reg0),
       #(gt,":load_button_instance",-1),
       (prop_instance_is_valid,":load_button_instance"), #patch1115 18/3
       
       (assign, ":load_found", 1),
       
       (scene_prop_get_slot,":xvalue",":load_button_instance",scene_prop_slot_x_value),
       (scene_prop_get_slot,":yvalue",":load_button_instance",scene_prop_slot_y_value),
       (scene_prop_get_slot,":zvalue",":load_button_instance",scene_prop_slot_z_value),
       # add extra cm to be out of barrel.    HERE
       (try_begin),
         (eq,":cannon_kind","spr_mm_cannon_fort_wood"),
         (val_add,":xvalue",66), 
		 
		 (assign, ":UpY", 5), #patch1115 fix 8/1
		 (assign, ":lowY", -4),
		 
		 (assign, ":lowz", -10),
		 (assign, ":upZ", 10), # fix 8/1 end
		 
       (else_try),
		  (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"), 
		  (val_add,":xvalue",30), # fix 8/2
		 #(val_add,":yvalue",30),
		# (val_add,":zvalue",30), # moved below
		 
		  (assign, ":UpY", 3),
		  (assign, ":lowY", -2),
		 
		  (assign, ":lowz", -10),
		  (assign, ":upZ", 10), # fix 8/2 end
		 
    (else_try),
      (val_add,":xvalue",46), # changed from 46 to 56 for tests
		 
		  (assign, ":UpY", 5), # fix 8/3
		  (assign, ":lowY", -2),
		 
		  (assign, ":lowz", -10),
		  (assign, ":upZ", 10), # fix 8/3 end
		 
       (try_end),
       
       (position_move_x, pos12,":xvalue"),
       (position_move_y, pos12,":yvalue"),
       (position_move_z, pos12,":zvalue"),
     (try_end),
     
     (try_begin),
       (eq,":load_found",0),
       
       (position_move_x,pos12,180), # if no load ball button for whatevaahh reason just set it to some average barel end position.
     (try_end),
     
     (try_begin),
       (eq,":ammo_type",cannon_ammo_type_canister),
	   
	    (try_begin), # fix 8/5
		    (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"), 
		    (val_add,":zvalue",20), #20
		    (position_move_z, pos12,":zvalue"),
		    (position_get_rotation_around_y,":y_rot_howi",pos12),

			  (val_add,":y_rot_howi",-15), # howitzer has extra angle.   was -15, lets try other #s for fun!
         (try_begin),
           (lt,":y_rot_howi",0),
           (val_add,":y_rot_howi",360),
		     (try_end),
		 
		  (position_rotate_y,pos12,":y_rot_howi"), # fix 8/5 end
	  (try_end),

       # Do some canister crap here.
       
       (try_for_range,":unused",0,40), #40 bullets in one shot :D    cani work HERE
         (copy_position,pos22,pos12),
         (store_random_in_range,":y_change",":lowY",":UpY"), #patch1115  fix 8/6          make cani shoot higher?   -4, 5    -2, 7 
         (store_random_in_range,":z_change",":lowz",":upZ"),  # -8, 9
         (val_add,":z_change",-90), # add extra rotation due to cannon pos.
         (position_rotate_y, pos22, ":y_change"),
         (position_rotate_z, pos22, ":z_change"),
         (store_random_in_range,":bullet_speed",12000,19000),
         (add_missile, ":using_agent", pos22, ":bullet_speed", "itm_cannon_canister_dummy", 0, "itm_canister_ammo", 0),		
		 #(set_spawn_position,pos22),
		 #(spawn_item,"itm_flag_france_45e",0,60),
		 #(try_begin),
		# (set_spawn_position,pos22),
		# (spawn_item,"itm_flag_france_45e",0,30),       #to find position.
		 #(try_end),
		 
       (try_end),
       
     (else_try),
       (this_or_next|eq,":ammo_type",cannon_ammo_type_round),
       (this_or_next|eq,":ammo_type",cannon_ammo_type_shell),
       (this_or_next|eq,":ammo_type",cannon_ammo_type_bomb),
       (eq,":ammo_type",cannon_ammo_type_rocket),
       
       (init_position,pos9), # pos9 holds new pos for cannonball
       (position_copy_origin,pos9,pos12),
       (position_get_rotation_around_y,":y_rot",pos10),
       (position_get_rotation_around_z,":z_rot",pos10),
       (position_rotate_z,pos9,":z_rot"),
       
       (assign,":init_vel",45), # 45 meters per 0.5 seconds = 90m/s
       (assign,":ammo_size","spr_mm_cannonball_code_only_12pd"),
       (assign,":particle",-1),
       (assign,":flight_sound_id","snd_cannonball_loop"),
       (assign,":ball_x",0),
       (assign,":ball_y",0),
       (assign,":ball_z",0),
       (assign,":random_offset",25),
       (try_begin),
         (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
         (assign,":init_vel",20),
         (val_add,":y_rot",-15), # howitzer has extra angle.
         (try_begin),
           (lt,":y_rot",0),
           (val_add,":y_rot",360),
         (try_end),
         (assign,":ammo_size","spr_mm_cannonball_code_only_24pd"),
       (else_try),
         (eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
         (val_add,":y_rot",-45), # mortar has extra angle.
         (try_begin),
           (lt,":y_rot",0),
           (val_add,":y_rot",360),
         (try_end),
         (assign,":init_vel",16),
         (assign,":random_offset",8),
         (assign,":ammo_size","spr_mm_cannonball_code_only_36pd"),
       (else_try),
         (eq,":cannon_kind","spr_mm_cannon_naval_wood"),
         (assign,":init_vel",40),
       (else_try),
         (eq,":cannon_kind","spr_mm_cannon_carronade_wood"),
         (assign,":init_vel",40),
         (assign,":ammo_size","spr_mm_cannonball_code_only_24pd"),
       (else_try),
         (eq,":cannon_kind","spr_mm_cannon_swievel_wood"),
         (assign,":init_vel",30),
         (assign,":ammo_size","spr_mm_cannonball_code_only_6pd"),
       (else_try),
         (eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
         (assign,":init_vel",0),
         (assign,":ammo_size","spr_mm_rocket_code_only"),
         (assign,":particle","psys_rocket_smoke"),
         (assign,":flight_sound_id","snd_rocket_loop"),
       (try_end),

      (store_mul,":random_offset_min",":random_offset",-1),
      (val_add,":random_offset",1),
      (store_random_in_range, ":rand_x_vel", ":random_offset_min",":random_offset"), # random for fire speed
      (store_random_in_range, ":init_y_vel", ":random_offset_min",":random_offset"), # random for left and right so aim is not perfect
      (store_random_in_range, ":rand_z_vel", ":random_offset_min",":random_offset"), # random for up and down so aim is not perfect
       
       # DEBUGDEBUGDEBUG
       # (assign,":rand_x_vel",0),
       # (assign,":init_y_vel",0),
       # (assign,":rand_z_vel",0),
       
       (assign,":init_x_vel",0),
       (assign,":init_z_vel",0),
       (try_begin),
         (eq,":init_vel",0),
         (position_rotate_y,pos9,":y_rot"),
         (val_add,":init_x_vel",200),
       (else_try),
         (set_fixed_point_multiplier, 1000),
         # make rotation fixed point.
         (val_mul,":y_rot",1000),
         
         # x += Speed * Math.Cos(angle);
         (store_cos, ":cos_of_angle", ":y_rot"),
         (store_mul,":init_x_vel",":cos_of_angle",":init_vel"),
         (val_div,":init_x_vel",10),
         
         # z += speed * Math.Sin(angle);
         (store_sin, ":sin_of_angle", ":y_rot"),
         (store_mul,":init_z_vel",":sin_of_angle",":init_vel"),
         (val_div,":init_z_vel",10),
         (val_mul,":init_z_vel",-1),
         
         (set_fixed_point_multiplier, 100),
       (try_end),
       
       (val_add,":init_x_vel",":rand_x_vel"),
       (val_add,":init_z_vel",":rand_z_vel"),
       
       (position_move_x,pos9,":ball_x"),
       (position_move_y,pos9,":ball_y"),
       (position_move_z,pos9,":ball_z"),
       
       (copy_position,pos49,pos9), # pos49 is prop pos.
       (call_script, "script_find_or_create_scene_prop_instance", ":ammo_size", 0, 0, 0),
       (assign,":ball_instance_id",reg0),

       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_in_use, 1),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_x_value, ":init_x_vel"),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_y_value, ":init_y_vel"),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_z_value, ":init_z_vel"),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_time, 0),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_bounces, 0),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_user_agent, ":using_agent"),
       (scene_prop_set_slot,":ball_instance_id", scene_prop_slot_ammo_type, ":ammo_type"),
       
       (try_begin),
         (gt,":flight_sound_id",-1),
         (call_script,"script_multiplayer_handle_prop_effect",":ball_instance_id",prop_effect_type_sound,":flight_sound_id",prop_effect_handle_start),
       (try_end),
       
       (try_begin),
         (gt,":particle",-1),
         #(particle_system_burst,":particle",pos49,40),
         (call_script,"script_multiplayer_handle_prop_effect",":ball_instance_id",prop_effect_type_particle,":particle",prop_effect_handle_start),
       (try_end),
     (try_end),
     
     # remove the loaded_ammo display if applicable.
     (try_for_range,":cur_ammotype","spr_mm_cannon_mortar_loaded_ammo","spr_mm_cannonball_code_only_6pd"),
       (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", ":cur_ammotype"),
       (call_script,"script_set_prop_child_inactive",reg0),
     (try_end),
     
     (call_script,"script_set_prop_child_active",":load_button_instance"), # enable load button
     
     (try_begin), # mortar is angled 45 degrees up so need to do this for particles.
       (eq,":cannon_kind","spr_mm_cannon_mortar_wood"),
       (position_rotate_y,pos12,-45),
     (else_try),
       (eq,":cannon_kind","spr_mm_cannon_howitzer_wood"),
       (position_rotate_y,pos12,-15),
     (try_end),
     
     (assign,":flash_type","psys_cannon_flash"),
     (assign,":flash_strength",100),
     (assign,":smoke_type","psys_cannon_smoke"),
     (assign,":smoke_strength",90),
     (assign,":sound_id","snd_cannon"),
     (try_begin),
       (eq,":cannon_kind","spr_mm_cannon_rocket_wood"),
       (assign,":flash_type",-1),
       (assign,":smoke_type",-1),
       (assign,":sound_id","snd_rocket_launch"),
     (try_end),
     
     (copy_position,pos60,pos12), # pos60 is particle pos
     (try_begin),
       (gt,":smoke_type",-1),
       (call_script,"script_multiplayer_server_spawn_particle_at_position",":smoke_type",":smoke_strength"),
     (try_end),
     (try_begin),
       (gt,":flash_type",-1),
       (call_script,"script_multiplayer_server_spawn_particle_at_position",":flash_type",":flash_strength"),
     (try_end),
     
     (try_begin),
       (gt,":sound_id",-1),
       (copy_position,pos56,pos12),
       (call_script,"script_multiplayer_server_play_sound_at_position",":sound_id"),
     (try_end),
     
     (scene_prop_set_slot,":cannon_instance", scene_prop_slot_has_ball, 0),
     (scene_prop_set_slot,":cannon_instance", scene_prop_slot_is_loaded, 0),
     (scene_prop_set_slot,":cannon_instance", scene_prop_slot_ammo_type, 0),
     
     (call_script,"script_stop_agent_controlling_cannon",":cannon_instance",":using_agent"),
     
     (call_script, "script_prop_instance_find_first_child_of_type", ":barrel_instance", "spr_mm_aim_button"),
     (call_script,"script_set_prop_child_inactive",reg0),
     
     # lets do the animation. 
     (call_script,"script_recoil_cannon",":cannon_instance",1,0),
   (try_end),
  ]),

  
  # script_multiplayer_server_agent_play_music
  # Input: agent_id of agent
  #        track_id  index of the track to be played.
  ("multiplayer_server_agent_play_music",
  [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":track_index", 2),
    (store_script_param, ":auto_started", 3),
     
    (set_fixed_point_multiplier,100),
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      (agent_is_active,":agent_id"),
      (agent_is_alive, ":agent_id"), # Still alive?
      (agent_get_team,":agent_team",":agent_id"),
      (team_get_faction,":agent_faction",":agent_team"),
      
      (assign,":instrument",-1),
      (agent_get_wielded_item,":item_id",":agent_id",0),
      (agent_get_slot,":instance_id",":agent_id",slot_agent_used_prop_instance),
      (try_begin),
        (is_between, ":item_id", "itm_drumstick_right", "itm_bullets"), # a instrument
        
        (assign,":instrument",":item_id"),
      (else_try),
        #(gt,":instance_id",-1), #patch1115 fix f/16
        (prop_instance_is_valid,":instance_id"),  #patch1115 18/2
        (prop_instance_get_position,pos5,":instance_id"),
        (agent_get_position,pos6,":agent_id"),
        (get_distance_between_positions,":distance",pos5,pos6),
        (lt,":distance",500), # 5 meters.
        
        (prop_instance_get_scene_prop_kind,":prop_kind",":instance_id"),
        (assign,":instrument",":prop_kind"),
      (try_end),
      
      (gt,":instrument",-1),
      
     # (try_begin),
    #    (call_script,"script_cf_agent_is_playing_music",":agent_id"),
      # always first stop it.
      (call_script,"script_multiplayer_server_agent_stop_music",":agent_id"),
     # (try_end),
	  
      (assign,":start_cond",-1),
      (assign,":end_cond",-1),
      (assign,":animation",-1),
      (assign,":has_secondary",0),
      #(assign,":channel",1), # animation channel 1 = only top 0 = both top and bottom
      (try_begin),
        (eq,":instrument","itm_drumstick_right"),
        (try_begin),
          (eq,":agent_faction","fac_britain"),
          (assign,":start_cond",drum_sounds_britain_begin),
          (assign,":end_cond",drum_sounds_britain_end),
          (try_begin),
            (agent_get_troop_id,":troop_id",":agent_id"),
            (eq,":troop_id","trp_british_highlander_drum"),
            (assign,":start_cond",drum_sounds_highland_begin),
            (assign,":end_cond",drum_sounds_highland_end),
          (try_end),
        (else_try),
          (this_or_next|eq,":agent_faction","fac_rhine"),
          (eq,":agent_faction","fac_france"),
          (assign,":start_cond",drum_sounds_france_begin),
          (assign,":end_cond",drum_sounds_france_end),
        (else_try),
          (eq,":agent_faction","fac_prussia"),
          (assign,":start_cond",drum_sounds_prussia_begin),
          (assign,":end_cond",drum_sounds_prussia_end),
        (else_try),
          (eq,":agent_faction","fac_russia"),
          (assign,":start_cond",drum_sounds_russia_begin),
          (assign,":end_cond",drum_sounds_russia_end),
        (else_try),
          (eq,":agent_faction","fac_austria"),
          (assign,":start_cond",drum_sounds_austria_begin),
          (assign,":end_cond",drum_sounds_austria_end),
        (try_end),
        (assign,":has_secondary",1),
        (assign,":sec_start_cond",drum_sounds_calls_begin),
        (assign,":sec_end_cond",drum_sounds_calls_end),
        (assign,":animation","anim_drum"),
      (else_try),
        (eq,":instrument","itm_flute"),
        (try_begin),
          (eq,":agent_faction","fac_britain"),
          (assign,":start_cond",fife_sounds_britain_begin),
          (assign,":end_cond",fife_sounds_britain_end),
        (else_try),
          (this_or_next|eq,":agent_faction","fac_rhine"),
          (eq,":agent_faction","fac_france"),
          (assign,":start_cond",fife_sounds_france_begin),
          (assign,":end_cond",fife_sounds_france_end),
        (else_try),
          (eq,":agent_faction","fac_prussia"),
          (assign,":start_cond",fife_sounds_prussia_begin),
          (assign,":end_cond",fife_sounds_prussia_end),
        (else_try),
          (eq,":agent_faction","fac_russia"),
          (assign,":start_cond",fife_sounds_russia_begin),
          (assign,":end_cond",fife_sounds_russia_end),
        (else_try),
          (eq,":agent_faction","fac_austria"),
          (assign,":start_cond",fife_sounds_austria_begin),
          (assign,":end_cond",fife_sounds_austria_end),
        (try_end),
        (assign,":animation","anim_flute"),
      (else_try),
        (is_between,":instrument","itm_horn","itm_bagpipe"),
        (try_begin),
          (eq,":agent_faction","fac_britain"),
          (assign,":start_cond",bugle_sounds_britain_begin),
          (assign,":end_cond",bugle_sounds_britain_end),
        (else_try),
          (eq,":agent_faction","fac_france"),
          (assign,":start_cond",bugle_sounds_france_begin),
          (assign,":end_cond",bugle_sounds_france_end),
        (else_try),
          (eq,":agent_faction","fac_prussia"),
          (assign,":start_cond",bugle_sounds_prussia_begin),
          (assign,":end_cond",bugle_sounds_prussia_end),
        (else_try),
          (eq,":agent_faction","fac_russia"),
          (assign,":start_cond",bugle_sounds_russia_begin),
          (assign,":end_cond",bugle_sounds_russia_end),
        (else_try),
          (eq,":agent_faction","fac_austria"),
          (assign,":start_cond",bugle_sounds_austria_begin),
          (assign,":end_cond",bugle_sounds_austria_end),
        (else_try),
          (eq,":agent_faction","fac_rhine"),
          (assign,":start_cond",bugle_sounds_france_begin),
          (store_add,":end_cond",bugle_sounds_france_end,1), #also adding first Prussian bugle tune
        (try_end),
        (assign,":has_secondary",1),
        (assign,":sec_start_cond",bugle_sounds_calls_begin),
        (assign,":sec_end_cond",bugle_sounds_calls_end),
        (assign,":animation","anim_horn"),
      (else_try),
        (eq,":instrument","itm_bagpipe"),
        (try_begin),
          (eq,":agent_faction","fac_britain"),
          (assign,":start_cond",bagpipes_sounds_britain_begin),
          (assign,":end_cond",bagpipes_sounds_britain_end),
          (assign,":has_secondary",1),
          (assign,":sec_start_cond",bagpipes_sounds_extra_begin),
          (assign,":sec_end_cond",bagpipes_sounds_extra_end),
        (try_end),
        (assign,":animation","anim_bagpipe"),
      (else_try),
        (eq,":instrument","spr_mm_piano"),
        (assign,":start_cond",piano_sounds_begin),
        (assign,":end_cond",piano_sounds_end),
        (assign,":animation","anim_piano"),
      (else_try),
        (eq,":instrument","spr_mm_organ"),
        (assign,":start_cond",organ_sounds_begin),
        (assign,":end_cond",organ_sounds_end),
        (assign,":animation","anim_piano"),
      (try_end),
      
      (store_add,":track_id",":track_index",":start_cond"), # add the sound start to the index
      (assign,":is_valid",0),
      (try_begin),
        (is_between,":track_id",":start_cond",":end_cond"),
        (assign,":is_valid",1),
      (else_try),
        (eq,":has_secondary",1),
        (store_sub,":sec_track_index",":end_cond",":start_cond"),
        (store_sub,":sec_track_index",":track_index",":sec_track_index"),
        (store_add,":track_id",":sec_track_index",":sec_start_cond"),
        (is_between,":track_id",":sec_start_cond",":sec_end_cond"),
        (assign,":is_valid",1),
        (assign,":has_secondary",2), #So we don't play secondary tunes together
      (try_end),
      (eq,":is_valid",1), # is it a valid sound index now?
      
      # then lets play it baby! :)
      (call_script, "script_multiplayer_server_play_sound_at_agent", ":track_id", ":agent_id"),
      
      (store_mission_timer_a,":cur_time"),
      (agent_set_slot, ":agent_id", slot_agent_started_playing_music_at, ":cur_time"),
      
      #NEW FOR COMMANDER BATTLE BOTS:
      (try_begin),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
        #We want those bots to start playing a new tune if the old one ended. Normal players can take care of this themselves, bots can't for obvious reasons
        
        #Get track lengths (yaaaay, awesome script this...)
        (assign,":track_length",20), #Some random value for if we don't have the track for some reason
        
        #DRUMS AND FIFES
        (try_begin),    #Britain
          (this_or_next|eq,":track_id","snd_drum_britain_1"),
          (eq,":track_id","snd_fife_britain_1"),
          (assign,":track_length",44),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_britain_2"),
          (eq,":track_id","snd_fife_britain_2"),
          (assign,":track_length",43),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_britain_3"),
          (eq,":track_id","snd_fife_britain_3"),
          (assign,":track_length",44),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_britain_4"),
          (eq,":track_id","snd_fife_britain_4"),
          (assign,":track_length",66),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_britain_5"),
          (eq,":track_id","snd_fife_britain_5"),
          (assign,":track_length",50),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_highland_1"),
          (eq,":track_id","snd_bagpipes_britain_1"),
          (assign,":track_length",97),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_highland_2"),
          (eq,":track_id","snd_bagpipes_britain_2"),
          (assign,":track_length",44),
          
        (else_try),    #France
          (this_or_next|eq,":track_id","snd_drum_france_1"),
          (eq,":track_id","snd_fife_france_1"),
          (assign,":track_length",49),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_france_2"),
          (eq,":track_id","snd_fife_france_2"),
          (assign,":track_length",40),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_france_3"),
          (eq,":track_id","snd_fife_france_3"),
          (assign,":track_length",25),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_france_4"),
          (eq,":track_id","snd_fife_france_4"),
          (assign,":track_length",38),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_france_5"),
          (eq,":track_id","snd_fife_france_5"),
          (assign,":track_length",68),
          
        (else_try),    #Prussia
          (this_or_next|eq,":track_id","snd_drum_prussia_1"),
          (eq,":track_id","snd_fife_prussia_1"),
          (assign,":track_length",47),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_prussia_3"),
          (eq,":track_id","snd_fife_prussia_2"),
          (assign,":track_length",84),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_prussia_4"),
          (eq,":track_id","snd_fife_prussia_3"),
          (assign,":track_length",10),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_prussia_5"),
          (eq,":track_id","snd_fife_prussia_4"),
          (assign,":track_length",31),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_prussia_6"),
          (eq,":track_id","snd_fife_prussia_5"),
          (assign,":track_length",49),
          
        (else_try),    #Russia
          (this_or_next|eq,":track_id","snd_drum_russia_1"),
          (eq,":track_id","snd_fife_russia_1"),
          (assign,":track_length",57),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_russia_2"),
          (eq,":track_id","snd_fife_russia_2"),
          (assign,":track_length",23),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_russia_3"),
          (eq,":track_id","snd_fife_russia_3"),
          (assign,":track_length",19),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_russia_4"),
          (eq,":track_id","snd_fife_russia_4"),
          (assign,":track_length",21),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_russia_5"),
          (eq,":track_id","snd_fife_russia_5"),
          (assign,":track_length",15),
          
        (else_try),    #Austria
          (this_or_next|eq,":track_id","snd_drum_austria_1"),
          (eq,":track_id","snd_fife_austria_1"),
          (assign,":track_length",38),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_austria_2"),
          (eq,":track_id","snd_fife_austria_2"),
          (assign,":track_length",110),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_austria_3"),
          (eq,":track_id","snd_fife_austria_3"),
          (assign,":track_length",75),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_austria_4"),
          (eq,":track_id","snd_fife_austria_4"),
          (assign,":track_length",34),
        (else_try),
          (this_or_next|eq,":track_id","snd_drum_austria_5"),
          (eq,":track_id","snd_fife_austria_5"),
          (assign,":track_length",44),
        
        #BUGLES, HORNS AND TRUMPETS
        (else_try),    #Britain
          (eq,":track_id","snd_bugle_britain_1"),
          (assign,":track_length",35),
        (else_try),
          (eq,":track_id","snd_bugle_britain_2"),
          (assign,":track_length",25),
        (else_try),    #France
          (eq,":track_id","snd_bugle_france_1"),
          (assign,":track_length",37),
        (else_try),
          (eq,":track_id","snd_bugle_france_2"),
          (assign,":track_length",56),
        (else_try),    #Prussia
          (eq,":track_id","snd_bugle_prussia_1"),
          (assign,":track_length",57),
        (else_try),
          (eq,":track_id","snd_bugle_prussia_2"),
          (assign,":track_length",72),
        (else_try),
          (eq,":track_id","snd_bugle_prussia_3"),
          (assign,":track_length",27),
        (else_try),    #Russia
          (eq,":track_id","snd_bugle_russia_1"),
          (assign,":track_length",49),
        (else_try),
          (eq,":track_id","snd_bugle_russia_2"),
          (assign,":track_length",109),
        (else_try),
          (eq,":track_id","snd_bugle_russia_3"),
          (assign,":track_length",54),
        (else_try),    #Austria
          (eq,":track_id","snd_bugle_austria_1"),
          (assign,":track_length",69),
        (else_try),
          (eq,":track_id","snd_bugle_austria_2"),
          (assign,":track_length",35),
        (try_end),
        
        (store_add,":end_tune_at",":cur_time",":track_length"), #Adding track length to current time
        (agent_set_slot, ":agent_id", slot_agent_track_ends_at, ":end_tune_at"), #So we'll know when to change tune :)
      (try_end),
      
      (try_begin),
        (neq,":instrument","spr_mm_piano"),
        (neq,":instrument","spr_mm_organ"),
        (agent_set_animation, ":agent_id", ":animation", 1),
        (set_fixed_point_multiplier,100),
        
        (try_begin), #patch1115 fix 43/2
          (neq, "$g_multiplayer_game_type", multiplayer_game_type_commander),
					(agent_set_slot,":agent_id",slot_agent_base_speed_mod,55),
          (agent_set_speed_modifier, ":agent_id", 55), # value is in percentage, 100 is default, value can be between [0..1000]#60
        (try_end),
        
        (try_begin),
          (neq,":auto_started",1),
          (this_or_next|is_between,":has_secondary",0,2), #So we don't play calls together
          (eq,":instrument","itm_bagpipe"), #But bagpipes
          (agent_get_troop_id,":troop_id",":agent_id"),
          (agent_get_position,pos2,":agent_id"),
          (try_for_agents,":agent_no",pos2,1501), #Checking for play-together
            (neq,":agent_no",":agent_id"),
            (agent_is_active,":agent_no"),
            (agent_is_alive, ":agent_no"), # Is alive?
            (agent_is_human, ":agent_no"),
            (neg|agent_is_non_player, ":agent_no"),
            (agent_get_team,":agent_team2",":agent_no"),
            (eq,":agent_team2",":agent_team"),
            (agent_slot_eq, ":agent_no", slot_agent_music_play_together, 1),
            
            # (agent_get_position,pos1,":agent_no"),
            # (get_distance_between_positions_in_meters,":dist",pos1,pos2),
            # (le,":dist",15),
          
            (agent_get_troop_id,":agent_troop",":agent_no"),
            (assign, reg50, 0),
            (lua_push_int, ":agent_no"),
            (lua_call, "@isVip", 1),
            (this_or_next|eq, reg50, 1),
            (troop_slot_eq,":agent_troop",slot_troop_rank,mm_rank_musician),
            
            (agent_get_wielded_item,":item_id",":agent_no",0),
            (assign,":continue",0),
            (try_begin),
              (eq,":instrument","itm_drumstick_right"),
              (neq,":troop_id","trp_british_highlander_drum"),
              (this_or_next|eq,":item_id","itm_drumstick_right"),
              (eq,":item_id","itm_flute"),
              (assign,":continue",1),
            (else_try),
              (eq,":instrument","itm_drumstick_right"),
              (eq,":troop_id","trp_british_highlander_drum"),
              (try_begin),
                (eq,":item_id","itm_drumstick_right"),
                (eq,":agent_troop","trp_british_highlander_drum"),
                (assign,":continue",1),
              (else_try),
                (eq,":item_id","itm_bagpipe"),
                (assign,":continue",1),
              (try_end),
            (else_try),
              (eq,":instrument","itm_flute"),
              (this_or_next|eq,":item_id","itm_drumstick_right"),
              (eq,":item_id","itm_flute"),
              (assign,":continue",1),
            (else_try),
              (is_between,":instrument","itm_horn","itm_bagpipe"),
              (is_between,":item_id","itm_horn","itm_bagpipe"),
              (assign,":continue",1),
            (else_try),
              (eq,":instrument","itm_bagpipe"),
              (try_begin),
                (neq,":has_secondary",2), #Don't play bagpipe-only tunes with drums
                (eq,":item_id","itm_drumstick_right"),
                (eq,":agent_troop","trp_british_highlander_drum"),
                (assign,":continue",1),
              (else_try),
                (eq,":item_id","itm_bagpipe"),
                (assign,":continue",1),
              (try_end),
            (try_end),
            (eq,":continue",1),
          
            (assign,":continue",1),
            (try_begin),
              (call_script,"script_cf_agent_is_playing_music",":agent_no"),
              (assign,":continue",0),
            (try_end),
            (eq,":continue",1),
          
            (call_script, "script_multiplayer_server_agent_play_music", ":agent_no", ":track_index", 1),
          (try_end),
        (try_end),
      (else_try),
        (agent_set_animation, ":agent_id", ":animation", 0),
        (agent_set_slot, ":agent_id", slot_agent_used_prop_instance, ":instance_id"),
        
        (agent_set_wielded_item,":agent_id",-1),  
        
        # put player on stool.
        (try_begin),
          (eq,":instrument","spr_mm_piano"),
          (position_move_y,pos5,-74),
        (else_try),
          (eq,":instrument","spr_mm_organ"),
          (position_move_y,pos5,-142),
        (try_end),
        (agent_set_position,":agent_id",pos5),
      (try_end),
    (try_end),
  ]),
  
  # script_multiplayer_server_agent_stop_music
  # Input: agent_id of agent
  ("multiplayer_server_agent_stop_music",
  [
    (store_script_param, ":agent_id", 1),
  
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":agent_id"),
      
      (agent_get_animation,":cur_anim",":agent_id",1), #Was 0
      (try_begin),
        (is_between,":cur_anim","anim_drum","anim_drum_end"), # Only when Playing music..
        (agent_set_animation,":agent_id","anim_drum_end",1), #Was 0
      (try_end),
      
      (agent_get_animation,":cur_anim",":agent_id",0),
      (try_begin),
        (this_or_next|eq,":cur_anim","anim_piano"),
        (eq,":cur_anim","anim_shitting"),
        (agent_set_animation,":agent_id","anim_drum_end",0),
      (try_end),
      (agent_set_slot, ":agent_id", slot_agent_used_prop_instance, -1),
      
      (call_script, "script_multiplayer_server_play_sound_at_agent", -1, ":agent_id"),
      
     # (agent_is_alive,":agent_id"),
      (set_fixed_point_multiplier,100),
      (agent_get_slot,":base_speed",":agent_id",slot_agent_base_speed_mod),
			(try_begin),
			  (agent_slot_eq, ":agent_id", slot_agent_god_mode, 1),
				(assign, ":base_speed", 350),
			  (agent_set_slot,":agent_id",slot_agent_base_speed_mod, 350),
		  (else_try),
			  (lt, ":base_speed", 100),
				(assign, ":base_speed", 100),
				(agent_set_slot,":agent_id",slot_agent_base_speed_mod, 100), #":base_speed"),
			(try_end),
      (agent_set_speed_modifier, ":agent_id", ":base_speed"), # value is in percentage, 100 is default, value can be between [0..1000]
    (try_end),
  ]),
  
  
  # script_multiplayer_server_agent_use_spyglass
  # Input1: agent_id of agent
  # Input2: start or stop
  ("multiplayer_server_agent_use_spyglass",
  [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":action", 2),
  
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":agent_id"),
      (agent_is_alive,":agent_id"),
      
      (agent_get_animation,":cur_anim",":agent_id",1),
      (try_begin),
        (eq,":action",spyglass_type_start),
        (agent_get_wielded_item,":cur_weapon",":agent_id",0),#PATCH1115 fix 14/1 
        (eq, ":cur_weapon", "itm_spyglass"),
        (neq,":cur_anim","anim_spyglass"),
        (agent_set_animation,":agent_id","anim_spyglass",1),
      (else_try),
        (eq,":action",spyglass_type_stop),
        (eq,":cur_anim","anim_spyglass"),
        (agent_set_animation,":agent_id","anim_drum_end",1),
      (try_end),
    (try_end),
  ]),
  
  
  # custom order menu interface
  # script_multiplayer_agent_create_custom_order_menu
  # Input1: player_no (player id that should get the custom menu)
  # Input2: custom_server_flag (arbitrary int value that will be sent back by the client, so the menu can be identified)
  # Input3: number_of_buttons (number of buttons. If more text lines are sent than number_of_buttons, additional text will be displayed as label above buttons)
  # Additonal Input: s0 (the string to display. Use ^ for line breaks)
  # For server side handling of the button presses, see game_receive_network_message above
  #
  # Example 1 (4 Buttons):
  # (str_store_string, s61, "@1 - Test 1^2 - Test 2^3 - Test 3^4 - Test 4"),
  # (call_script, "script_multiplayer_agent_create_custom_order_menu", ":player_no", 42, 4),
  #
  # Example 2 (Headline + 10 Buttons):
  # (str_store_string, s61, "@Test Menu 42^1 - Test 1^2 - Test 2^3 - Test 3^4 - Test 4^5 - Test 5^6 - Test 6^7 - Test 7^8 - Test 8^9 - Test 9^0 - Test 10"),
  # (call_script, "script_multiplayer_agent_create_custom_order_menu", ":player_no", 42, 10),
  ("multiplayer_agent_create_custom_order_menu",
  [
    (store_script_param, ":player_no", 1),
    (store_script_param, ":custom_server_flag", 2),
    (store_script_param, ":number_of_buttons", 3),
    (multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, "trp_custom_string_40", 1),
    (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_custom_string, s61),
    (multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_show_custom_order_menu, ":custom_server_flag", ":number_of_buttons"),
  ]),


  # close active custom order menu interface (this will just close and the client will not send any event back)
  # script_multiplayer_agent_close_custom_order_menu
  # Input1: player_no (player id that should get the custom menu)
  ("multiplayer_agent_close_custom_order_menu",
  [
    (store_script_param, ":player_no", 1),
    (multiplayer_send_3_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_show_custom_order_menu, 0, -1),
  ]),


  # script_multiplayer_agent_drinking_get_animation
  # Input1: item_id
  # returns reg0 (animation_id or -1 if the item can not be used for drinking)
  ("multiplayer_agent_drinking_get_animation",
  [
    (store_script_param, ":item_id", 1),
    (assign, ":animation_id", -1),
    #Note: this check is also performed manually in mission templates
    #Note: multiplayer_agent_drinking also contains a list of all animations to stop them
    (try_begin),
      (eq, ":item_id", "itm_drinking_cup"),
      (assign, ":animation_id", "anim_drinking_cup_loop"),
    (else_try),
      (eq, ":item_id", "itm_drinking_tea_cup"),
      (assign, ":animation_id", "anim_drinking_tea_loop"),
    (else_try),
      (eq, ":item_id", "itm_drinking_tea_cup_plate"),
      (assign, ":animation_id", "anim_drinking_tea_loop"),
    (else_try),
      (eq, ":item_id", "itm_drinking_bottle"),
      (assign, ":animation_id", "anim_drinking_bottle"),
    (try_end),
    (assign, reg0, ":animation_id"),
  ]),


  # script_multiplayer_agent_drinking
  # Input1: agent_id
  # Input2: action (drinking_type_start or drinking_type_stop)
  ("multiplayer_agent_drinking",
  [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":action", 2),
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),

      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),

      (agent_get_animation, ":cur_animation_id", ":agent_id", 1),
      (agent_get_wielded_item, ":item_id", ":agent_id", 0),
      (try_begin),
        (eq, ":action", drinking_type_start),
        (call_script, "script_multiplayer_agent_drinking_get_animation", ":item_id"),
        #reg0 = animation_id or -1 if the item can not be used for drinking
        (assign, ":animation_id", reg0),
        (gt, ":animation_id", -1),
        (neq, ":cur_animation_id", ":animation_id"),
        (agent_set_animation, ":agent_id", ":animation_id", 1),
        #(call_script, "script_multiplayer_server_play_sound_at_position", "snd_drown"),
      (else_try),
        (eq, ":action", drinking_type_stop),
        (assign, reg0, ":cur_animation_id"),
        (assign, reg1, ":animation_id"),
        (this_or_next|eq, ":cur_animation_id", "anim_drinking_cup_loop"),
        (this_or_next|eq, ":cur_animation_id", "anim_drinking_tea_loop"),
        (eq, ":cur_animation_id", "anim_drinking_bottle"),
        (try_begin),
          (eq, ":item_id", "itm_drinking_cup"),
          (assign, ":animation_id", "anim_drinking_cup_idle"),
        (else_try),
          (this_or_next|eq, ":item_id", "itm_drinking_tea_cup"),
          (eq, ":item_id", "itm_drinking_tea_cup_plate"),
          (assign, ":animation_id", "anim_drinking_tea_idle"),
        (else_try),
          (assign, ":animation_id", "anim_drum_end"),
        (try_end),
        (agent_set_animation, ":agent_id", ":animation_id", 1),
      (try_end),
    (try_end),
  ]),

  
  # script_multiplayer_server_place_rocket
  # Input1: agent_id of agent
  # Input2: start or stop
  ("multiplayer_server_place_rocket",
  [
    (store_script_param, ":player_agent", 1),
  
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (agent_is_active,":player_agent"),
      (agent_is_alive, ":player_agent"), # Still alive?
      (agent_get_troop_id,":player_troop",":player_agent"),
      
      (troop_slot_eq,":player_troop",slot_troop_class,multi_troop_class_mm_rocket),
      
      (assign,":on_ship",0),
      (try_for_range,":ship_type", "spr_mm_ship", "spr_door_destructible"),
        (try_for_prop_instances, ":instance_id", ":ship_type", somt_object),
          (prop_instance_get_variation_id,":usable_boat",":instance_id"),
          (eq,":usable_boat",1),
          
          (scene_prop_has_agent_on_it, ":instance_id", ":player_agent"),
          
          (assign,":on_ship",1),
        (try_end),
      (try_end),
      
      (eq,":on_ship",0),
      
      (agent_get_wielded_item,":item_id",":player_agent",0),
      (eq,":item_id", "itm_rocket_placement"),
      
      (agent_unequip_item,":player_agent","itm_rocket_placement"),
      (try_begin),
        (agent_has_item_equipped,":player_agent","itm_rockets"), # Ranker
        (agent_set_wielded_item,":player_agent","itm_rockets"),
      (else_try),
        (assign,":end_cond","itm_items_end"),
        (try_for_range,":cur_item","itm_french_cav_pistol",":end_cond"),
          (agent_has_item_equipped,":player_agent",":cur_item"), # sarge
          (agent_set_wielded_item,":player_agent",":cur_item"),               
          (assign,":end_cond",0),
        (try_end),
      (try_end),
    
      (agent_get_position,pos49,":player_agent"),
      (position_move_y,pos49,100), # 1 meter forwards for spawning the prop.
      (position_rotate_z,pos49,90), # turn 90 degrees for proper facing.
      (call_script, "script_find_or_create_scene_prop_instance", "spr_mm_cannon_rocket", 0, 1, 0),
      (assign,":new_rocket",reg0),
      (call_script, "script_generate_bits_for_cannon_instance",":new_rocket",0,1),
     
      # Set rocket launcher dummy to be in_use just for this round so he wont be re-used
      (scene_prop_set_slot,":new_rocket",scene_prop_slot_in_use,1),
    (try_end),
  ]),
  
  
  # script_multiplayer_server_agent_play_voicecommand
  # Input: agent_id of agent
  #        command_type  Command type.
  ("multiplayer_server_agent_play_voicecommand",
  [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":command_type", 2),
    
    (try_begin),
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      (agent_is_active,":agent_id"),
      (agent_is_alive,":agent_id"),
      
      (try_begin),
        (call_script,"script_cf_agent_is_playing_music",":agent_id"), # when playing music dont do anything.
      (else_try),
        (call_script,"script_cf_agent_is_playing_piano",":agent_id"),
       
      (else_try),
      
        (agent_get_slot,":last_command_at",":agent_id",slot_agent_last_voice_at),
        (store_mission_timer_a,":current_time"),
        (store_sub,":elapsed_time",":current_time",":last_command_at"),
         
        (agent_get_troop_id, ":agent_troop_id", ":agent_id"),

        (troop_get_slot,":agent_troop_rank",":agent_troop_id",slot_troop_rank),
         
        (assign, ":wait_time", "$g_time_between_voice_commands"), # change later.
        (try_begin),
          (this_or_next|eq, ":agent_troop_rank", mm_rank_sergeant),
          (this_or_next|eq, ":agent_troop_rank", mm_rank_officer),
          (eq, ":agent_troop_rank", mm_rank_general),
          (assign, ":wait_time", "$g_time_between_voice_commands_officer"),
        (try_end),
        
        (gt, ":elapsed_time", ":wait_time"), # last command more then x seconds ago. 
        (agent_set_slot, ":agent_id", slot_agent_last_voice_at, ":current_time"),
        
        (store_troop_faction, ":agent_faction", ":agent_troop_id"),
        (try_begin),
          (gt,":agent_faction","fac_kingdoms_end"),
          (val_sub,":agent_faction",11),
        (try_end),
        
        (store_sub,":fac_index",":agent_faction","fac_britain"),
        
        (try_begin),
          (this_or_next|eq,":agent_faction","fac_austria"),
          (this_or_next|is_between,":agent_troop_id","trp_british_infantry2","trp_british_highlander"),
          (this_or_next|is_between,":agent_troop_id","trp_british_hussar","trp_british_light_dragoon"),
          (eq,":agent_faction","fac_rhine"),
          (assign,":fac_index",2), # set to prussia.
        (try_end),
        
        #lets check if its male or female..
        (assign,":gender",tf_male),
        (try_begin),
          (agent_get_troop_id, ":troop", ":agent_id"),
          (neg|is_between,":troop",multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
          
          (agent_get_player_id, ":player_id", ":agent_id"),
          (player_is_active,":player_id"),
          (player_get_gender,":gender", ":player_id"), 
        (try_end),
        
        (assign, ":sound_id", -1),
        (try_begin),
          (eq,":gender",tf_male),
          (try_begin),
            (eq, ":command_type", voice_type_cry),
            (try_begin),
              (this_or_next|eq,":agent_troop_id","trp_british_ship"),
              (eq,":agent_troop_id","trp_british_ship_cannon"),
              (assign, ":sound_id", "snd_voice_cry_pirate"),
            (else_try),
              (is_between,":agent_troop_id","trp_british_highlander","trp_british_foot_guard"),
              (assign, ":sound_id", "snd_voice_cry_brit_scot"),
            (else_try),
              (this_or_next|is_between,":agent_troop_id","trp_russian_hussar","trp_russian_uhlan"),
              (this_or_next|is_between,":agent_troop_id","trp_russian_dragoon","trp_russian_horse_guard"),
              (is_between,":agent_troop_id","trp_austrian_uhlan","trp_austrian_light_horse"),
              (assign, ":sound_id", "snd_voice_cry_russ_ukr"),
            (else_try),
              (eq,":agent_faction","fac_austria"),
              (assign, ":sound_id", "snd_voice_cry_aust"),
            (else_try),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_light_infantry_hessen","trp_rhine_light_infantry_bavaria"),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_mounted_jaeger","trp_rhine_uhlan"),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_light_dragoon","trp_rhine_cuirassier"),
              (eq,":agent_troop_id","trp_rhine_sapper"),
              (assign, ":sound_id", "snd_voice_cry_rhen"),
            (else_try),
              (assign, ":sound_id", "snd_voice_cry_brit"),
              (val_add,":sound_id",":fac_index"), 
            (try_end),
          (else_try),
            (eq, ":command_type", voice_type_surrender),
            (assign, ":sound_id", "snd_voice_surrender_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_ready),
            (assign, ":sound_id", "snd_voice_comm_ready_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_present),
            (assign, ":sound_id", "snd_voice_comm_present_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fire),
            (assign, ":sound_id", "snd_voice_comm_fire_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_charge),
            (assign, ":sound_id", "snd_voice_comm_charge_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_advance),
            (assign, ":sound_id", "snd_voice_comm_advance_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_hold),
            (assign, ":sound_id", "snd_voice_comm_hold_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fire_at_will),
            (assign, ":sound_id", "snd_voice_comm_fire_at_will_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_on_me),
            (assign, ":sound_id", "snd_voice_comm_on_me_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fall_back),
            (assign, ":sound_id", "snd_voice_comm_fall_back_brit"),
          (try_end),
        (else_try),
          (eq,":gender",tf_female),
          (try_begin),
            (eq, ":command_type", voice_type_cry),
            (try_begin),
              (this_or_next|is_between,":agent_troop_id","trp_russian_hussar","trp_russian_cossack"),
              (this_or_next|is_between,":agent_troop_id","trp_russian_dragoon","trp_russian_horse_guard"),
              (is_between,":agent_troop_id","trp_austrian_uhlan","trp_austrian_light_horse"),
              (assign, ":sound_id", "snd_voice_cry_fem_russ_ukr"),
            (else_try),
              (eq,":agent_faction","fac_austria"),
              (assign, ":sound_id", "snd_voice_cry_fem_aust"),
            (else_try),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_light_infantry_hessen","trp_rhine_light_infantry_bavaria"),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_mounted_jaeger","trp_rhine_uhlan"),
              (this_or_next|is_between,":agent_troop_id","trp_rhine_light_dragoon","trp_rhine_cuirassier"),
              (eq,":agent_troop_id","trp_rhine_sapper"),
              (assign, ":sound_id", "snd_voice_cry_fem_rhen"),
            (else_try),
              (assign, ":sound_id", "snd_voice_cry_fem_brit"),
              (val_add,":sound_id",":fac_index"), 
            (try_end),
          (else_try),
            (eq, ":command_type", voice_type_surrender),
            (assign, ":sound_id", "snd_voice_surrender_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_ready),
            (assign, ":sound_id", "snd_voice_comm_ready_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_present),
            (assign, ":sound_id", "snd_voice_comm_present_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fire),
            (assign, ":sound_id", "snd_voice_comm_fire_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_charge),
            (assign, ":sound_id", "snd_voice_comm_charge_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_advance),
            (assign, ":sound_id", "snd_voice_comm_advance_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_hold),
            (assign, ":sound_id", "snd_voice_comm_hold_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fire_at_will),
            (assign, ":sound_id", "snd_voice_comm_fire_at_will_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_on_me),
            (assign, ":sound_id", "snd_voice_comm_on_me_fem_brit"),
          (else_try),
            (eq, ":command_type", voice_type_comm_fall_back),
            (assign, ":sound_id", "snd_voice_comm_fall_back_fem_brit"),
          (try_end),
        (try_end),
        
        # change to right sound for faction.
        (try_begin),
          (neq, ":command_type", voice_type_cry),
          (val_add,":sound_id",":fac_index"),
          
          (try_begin),
            (is_between,":agent_troop_id","trp_austrian_uhlan","trp_austrian_light_horse"),
            (val_add,":sound_id", 2),
          (else_try),
            # add one for ukrain
            (this_or_next|is_between,":agent_troop_id","trp_russian_hussar","trp_russian_uhlan"),
            (is_between,":agent_troop_id","trp_russian_dragoon","trp_russian_horse_guard"),
            (val_add,":sound_id", 1),
          (try_end),
        (try_end),
        
        (gt, ":sound_id", -1),
        
        (call_script, "script_multiplayer_server_play_sound_at_agent", ":sound_id", ":agent_id"),
      (try_end),
    (try_end),
  ]),
  
  # script_reset_prop_slots
  # Input: instance_id of the prop to reset
  ("reset_prop_slots",
  [
    (store_script_param, ":instance_id", 1),
    
    (try_begin),
      (prop_instance_is_valid,":instance_id"),
      
      (try_for_range, ":cur_prop_slot", 0, scene_prop_slots_defmin_begin),
        (neq, ":cur_prop_slot", scene_prop_slot_is_spawned), # Never want to reset this.
        (neg|is_between, ":cur_prop_slot", scene_prop_slot_x_scale, scene_prop_slot_x_extra), # Never want to reset the scale
        
        (scene_prop_set_slot, ":instance_id", ":cur_prop_slot", 0),
      (try_end),
      (try_for_range, ":cur_prop_slot", scene_prop_slots_defmin_begin, scene_prop_slots_end),
        (scene_prop_set_slot, ":instance_id", ":cur_prop_slot", -1),
      (try_end),
    (try_end),
  ]),
  
  # script_attach_window_to_wall
  # Input: instance_id of the prop to attach the window to.
  ("attach_window_to_wall",
  [
    (store_script_param, ":instance_id", 1),
    
    (try_begin),
      (prop_instance_is_valid,":instance_id"),
      (prop_instance_get_variation_id, ":window_variation", ":instance_id"),
            # 1= Rich type glass
            # 2 = Broken normal type glass
            # 3 = Broken rich type glass
            # 4 = Don't spawn any window,
            # All else normal glass type is spawned.
      (neq,":window_variation",4),
      
      (prop_instance_get_scene_prop_kind,":wall_type",":instance_id"),
      
      (assign,":prop_to_spawn",-1),
      (try_begin),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_1"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_2"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_3"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_4"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_1"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_2"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_3_1"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_3_2"),
        (this_or_next|eq, ":wall_type", "spr_mm_woodenwall3"),
        (eq, ":wall_type", "spr_mm_woodenwallsnowy3"),
        
        (assign,":prop_to_spawn","spr_mm_window1_poor"),
      (else_try),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_7"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_9"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_1_11"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_7"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_9"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_11"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_3_7"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_3_9"),
        (eq, ":wall_type", "spr_mm_new_wall_3_11"),
        
        (assign,":prop_to_spawn","spr_mm_window2_poor"),
      (else_try),
        (this_or_next|eq, ":wall_type", "spr_mm_house_wall_2"),
        (this_or_next|eq, ":wall_type", "spr_mm_house_wall_21"),
        (this_or_next|eq, ":wall_type", "spr_mm_house_wall_3"),
        (this_or_next|eq, ":wall_type", "spr_mm_house_wall_31"),
        (this_or_next|eq, ":wall_type", "spr_mm_house_wall_4"),
        (eq, ":wall_type", "spr_mm_house_wall_41"),
        
        (assign,":prop_to_spawn","spr_mm_window3_poor"),
      (else_try),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_3"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_2_4"),
        (this_or_next|eq, ":wall_type", "spr_mm_new_wall_3_3"),
        (eq, ":wall_type", "spr_mm_new_wall_3_4"),
        
        (assign,":prop_to_spawn","spr_mm_window4_poor"),
      (try_end),
      
      (gt,":prop_to_spawn",-1), # we have a window! :)
      
      (assign,":addition",0),
      (try_begin),
        (eq,":window_variation",1),
        (assign,":addition",2),
      (else_try),
        (eq,":window_variation",2),
        (assign,":addition",4),
      (else_try),
        (eq,":window_variation",3),
        (assign,":addition",6),
      (try_end),
      
      (val_add,":prop_to_spawn",":addition"),
      
      (prop_instance_get_position,pos49,":instance_id"),
      
      (try_begin),
        (scene_prop_slot_eq, ":instance_id", scene_prop_slot_is_scaled, 1), # is scaled.
        (scene_prop_get_slot,":x_scale",":instance_id",scene_prop_slot_x_scale),
        (scene_prop_get_slot,":y_scale",":instance_id",scene_prop_slot_y_scale),
        (scene_prop_get_slot,":z_scale",":instance_id",scene_prop_slot_z_scale),
        (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 1, ":x_scale",":y_scale",":z_scale"),
      (else_try),
        (call_script, "script_find_or_create_scene_prop_instance", ":prop_to_spawn", 0, 0, 0),
      (try_end),
      (assign, ":window_instance", reg0),
      
      #(gt,":window_instance",-1),
      (prop_instance_is_valid,":window_instance"), #patch1115 fix 18/1
      
      (scene_prop_set_slot,":window_instance", scene_prop_slot_parent_prop, ":instance_id"),
      (scene_prop_set_slot,":instance_id", scene_prop_slot_child_prop1, ":window_instance"),
    (try_end),
  ]),
  
  
  # script_multiplayer_reset_round_time_if_no_agents
  # Input: instance_id of the prop to attach the window to.
  ("multiplayer_reset_round_time_if_no_agents",
  [
    (try_begin),
      (store_mission_timer_a, ":seconds_past_since_round_started"),
      (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
      (le, ":seconds_past_since_round_started", 2),
     
      (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
      (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
      
      (assign, ":end_cond", multiplayer_player_loops_end),
      (try_for_range, ":player_no", "$g_player_loops_begin", ":end_cond"),
        (player_is_active, ":player_no"),
        (player_get_team_no, ":player_team", ":player_no"), 
        (try_begin),
          (eq, ":player_team", 0),
          (val_add, ":human_agents_spawned_at_team_1", 1),
        (else_try),
          (eq, ":player_team", 1),
          (val_add, ":human_agents_spawned_at_team_2", 1),
        (try_end),
        
        (gt, ":human_agents_spawned_at_team_1", 0),
        (gt, ":human_agents_spawned_at_team_2", 0),
        (assign, ":end_cond", 0),
      (try_end),
 
      (try_begin),
        (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
        (eq, ":human_agents_spawned_at_team_2", 0),
 
        (store_mission_timer_a, "$g_round_start_time"),
      (try_end),
    (try_end),
  ]),
  
  # script_get_prop_kind_for_constr_kind
  # Input: prop_kind
  # Output: reg0: prop_to_spawn
  #         reg1: x_offset
  #         reg2: y_offset
  #         reg3: z_offset
  #         reg4: dont_rotate_to_ground
  ("get_prop_kind_for_constr_kind",
  [
    (store_script_param, ":prop_kind", 1),
    
    (assign,":prop_to_spawn",-1),
    (assign,":x_offset",0),
    (assign,":y_offset",0),
    (assign,":z_offset",0),
    (assign,":dont_rotate_to_ground",0),
    (try_begin),
      (is_between,":prop_kind","spr_invalid_object","spr_scene_props_end"), # valid prop type.
      
      (try_begin),
        (eq,":prop_kind","spr_mm_palisadedd"),
        (assign,":prop_to_spawn","spr_mm_palisade"),
      (else_try),
        (eq,":prop_kind","spr_mm_constr_pontoon_short"),
        (assign,":prop_to_spawn","spr_mm_pontoon_bridge_short"),
        (assign,":y_offset",500),
        (assign,":dont_rotate_to_ground",1),
      (else_try),
        (eq,":prop_kind","spr_mm_constr_pontoon_med"),
        (assign,":prop_to_spawn","spr_mm_pontoon_bridge_med"),
        (assign,":y_offset",750),
        (assign,":dont_rotate_to_ground",1),
      (else_try),
        (eq,":prop_kind","spr_mm_constr_pontoon_long"),
        (assign,":prop_to_spawn","spr_mm_pontoon_bridge_long"),
        (assign,":y_offset",1000),
        (assign,":dont_rotate_to_ground",1),
      (else_try),
        (eq,":prop_kind","spr_mm_constr_watchtower"),
        (assign,":prop_to_spawn","spr_mm_watchtower"),
      (else_try),
        (eq,":prop_kind","spr_mm_stakes_construct"),
        (assign,":prop_to_spawn","spr_mm_stakes_destructible"),
      (else_try),
        (eq,":prop_kind","spr_mm_stakes2_construct"),
        (assign,":prop_to_spawn","spr_mm_stakes2_destructible"),
      (else_try),
        (eq,":prop_kind","spr_sandbags_construct"),
        (assign,":prop_to_spawn","spr_sandbags_destructible"),
      (else_try),
        (eq,":prop_kind","spr_chevaux_de_frise_tri_construct"),
        (assign,":prop_to_spawn","spr_chevaux_de_frise_tri_destructible"),
      (else_try),
        (eq,":prop_kind","spr_gabiondeploy_construct"),
        (assign,":prop_to_spawn","spr_gabiondeploy_destructible"),
      (else_try),
        (eq,":prop_kind","spr_mm_fence1d"),
        (assign,":prop_to_spawn","spr_mm_fence1"),
      (try_end),
    (try_end),
    
    (assign,reg0,":prop_to_spawn"),
    (assign,reg1,":x_offset"),
    (assign,reg2,":y_offset"),
    (assign,reg3,":z_offset"),
    (assign,reg4,":dont_rotate_to_ground"),
  ]),
  
  
  
  # script_handle_agent_control_command
  # Input: agent_id
  #        command_type
  #        command
  # Output: 
  ("handle_agent_control_command",
  [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":command_type", 2),
    (store_script_param, ":command", 3),
          
    (assign,":is_ok",0),
    (try_begin),
      (agent_is_active, ":agent_id"),
      (agent_is_alive, ":agent_id"),
      
      (try_begin),
        (eq, ":command_type", command_type_cannon),
        (is_between, ":command", cannon_commands_begin, cannon_commands_end),
        
        (try_begin),
          (is_between, ":command", cannon_command_fire, cannon_commands_end), # these are immediate commands and need to execute something :)

          (agent_get_slot,":instance_id",":agent_id",slot_agent_current_control_prop),
          (prop_instance_is_valid,":instance_id"),
          (prop_instance_get_scene_prop_kind, ":cannon_kind", ":instance_id"),
          (is_between,":cannon_kind",mm_cannon_wood_types_begin,mm_cannon_wood_types_end),
          
          (try_begin),
            (eq,":command",cannon_command_fire),
            
            (agent_get_slot,":old_command",":agent_id",slot_agent_current_command),
            (try_begin),
              (neq,":old_command",cannon_command_fire), # only once!
          
              (try_begin), # dont do frizzle sound and smoke for rockets.
                (neq,":cannon_kind","spr_mm_cannon_rocket_wood"),
                
                #(call_script, "script_multiplayer_server_play_sound_at_agent", "snd_cannon_fuse", ":agent_id"),
                (agent_get_position,pos56,":agent_id"),
                (call_script,"script_multiplayer_server_play_sound_at_position","snd_cannon_fuse"),
                
                (call_script,"script_cannon_instance_get_barrel",":instance_id"),
                (assign,":barrel_instance",reg0),
                
                (assign,":x_fire_pos",0),
                (assign,":y_fire_pos",0),
                (assign,":z_fire_pos",0),
                (try_begin),
                  (prop_instance_is_valid,":barrel_instance"),
                  (scene_prop_get_slot,":x_fire_pos",":barrel_instance",scene_prop_slot_x_extra),
                  (scene_prop_get_slot,":y_fire_pos",":barrel_instance",scene_prop_slot_y_extra),
                  (scene_prop_get_slot,":z_fire_pos",":barrel_instance",scene_prop_slot_z_extra),
                  (prop_instance_get_position, pos5, ":barrel_instance"),
                (else_try),
                  (scene_prop_get_slot,":x_fire_pos",":instance_id",scene_prop_slot_x_extra),
                  (scene_prop_get_slot,":y_fire_pos",":instance_id",scene_prop_slot_y_extra),
                  (scene_prop_get_slot,":z_fire_pos",":instance_id",scene_prop_slot_z_extra),
                  (prop_instance_get_position, pos5, ":instance_id"),
                (try_end),
                (position_move_x,pos5,":x_fire_pos"),
                (position_move_y,pos5,":y_fire_pos"),
                (position_move_z,pos5,":z_fire_pos"),
                (position_rotate_y,pos5,90),
                (particle_system_burst,"psys_cannon_frizzle_smoke",pos5,20),
              (try_end),
              
              (assign,":is_ok",1), # we are going to do the actual firing in the aiming MT. this to give a 50 ms - 100 ms pause before actually firing the cannon for realism ^.^
            (try_end),
          (else_try),
            (eq,":command",cannon_command_stop_aim),
            
            (call_script,"script_stop_agent_controlling_cannon",":instance_id",":agent_id"),
            
            (agent_set_slot,":agent_id",slot_agent_current_command,0),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":command_type", command_type_ship), # ship
        (is_between, ":command", ship_commands_begin, ship_commands_end),
        (assign,":is_ok",1),
      (try_end),
      
      (eq,":is_ok",1),
      (agent_set_slot,":agent_id",slot_agent_current_command,":command"),
    (try_end),
  ]),
  
  
  # script_cannon_explosion_on_position
  # Input: pos47
  #        spawn_particles
  #        ammo_type
  #        shooter_agent
  # Output: 
  ("cannon_explosion_on_position",
  [
    (store_script_param, ":spawn_particles", 1),
    (store_script_param, ":ammo_type", 2),
    (store_script_param, ":shooter_agent", 3),
    
    (try_begin),
      (assign,":max_damage",0),
      (assign,":range",0),
      
      (set_fixed_point_multiplier,100),
      
      (try_begin),
        (eq,":ammo_type",cannon_ammo_type_shell),
        (assign,":max_damage",200),
        (assign,":range",330),
      (else_try),
        (eq,":ammo_type",cannon_ammo_type_bomb),
        (assign,":max_damage",300),
        (assign,":range",420),
      (else_try),
        (eq,":ammo_type",cannon_ammo_type_rocket),
        (assign,":max_damage",200),
        (assign,":range",310),
      (try_end),
      
      (call_script,"script_explosion_at_position",":shooter_agent",":max_damage",":range"), # Input: shooter_agent_no, max_damage points, range in cm
      
      (try_begin),
        (eq,":spawn_particles",1),
        
        (try_begin),
          (neg|agent_is_active,":shooter_agent"),
          (assign,":shooter_agent",-1),
        (try_end),
        
        #Added fragmentation:
        (store_random_in_range,":num_fragments",15,26),
        (try_for_range,":unused",0,":num_fragments"),
          (copy_position,pos23,pos47),
          (position_move_z,pos23,30),
          (store_random_in_range,":x_change",0,76),
          (store_random_in_range,":z_change",0,361),
          (position_rotate_x, pos23, ":x_change"),
          (position_rotate_z, pos23, ":z_change"),
          (store_random_in_range,":fragment_speed",1500,3000),
          (add_missile, ":shooter_agent", pos23, ":fragment_speed", "itm_cannon_canister_dummy", 0, "itm_shell_fragment", 0),
        (try_end),
      (try_end),
    (try_end),
  ]),
  
  
  
  # script_cannon_ball_hit_ground
  # Input: pos34 #ballpos with Z on ground level
  #        ball_instance_id
  #        cur_x_vel
  #        cur_z_vel
  # Output: 
  #        pos33  ### OVERWRITES POS33!!!
  #        pos35  ### OVERWRITES POS35!!!
  ("cannon_ball_hit_ground",
  [
    (store_script_param, ":ball_instance_id", 1),
    (store_script_param, ":cur_x_vel", 2),
    (store_script_param, ":cur_z_vel", 3),
    
    (assign,":clean_it_up",0),
    (try_begin),
      # calculating ball angle
      (set_fixed_point_multiplier, 1000),
      
      (try_begin), # fix div by 0 error
        (eq,":cur_z_vel",0),
        (assign,":cur_z_vel",1),
      (try_end),
      
      (store_mul,":calc_x",":cur_x_vel",1000),
      (store_div,":div_value",":calc_x", ":cur_z_vel"),
      (store_atan, ":ball_angle", ":div_value"),
      (val_div,":ball_angle",1000),
      
      (try_begin),
        (gt,":ball_angle",0), 
        (val_add,":ball_angle",-90),
      (else_try),
        (lt,":ball_angle",0),
        (val_add,":ball_angle",90),
      (try_end),
      
      (set_fixed_point_multiplier, 100),
      (init_position,pos37),
      (position_copy_origin,pos37,pos34),
      
      (position_set_z_to_ground_level,pos37),
      (position_get_rotation_around_z, ":z_rot", pos34),
      (call_script,"script_get_angle_of_ground_at_pos",":z_rot",-1),
      (assign,":y_rot",reg1),
      (store_add,":angle_difirence",":ball_angle",":y_rot"),
      (val_abs,":angle_difirence"),
      
      # (assign,reg0,":ball_angle"),
      # (assign,reg2,":angle_difirence"),
      
      # (str_store_string,s4,"@ground rotation here, ball_angle: {reg0}   y_rot: {reg1}   ball_angle+y_rot = angle_difirence(abs): {reg2}"),
      # (call_script, "script_multiplayer_broadcast_message"),
      
      (copy_position,pos49,pos34), # pos49 is prop pos.
      (position_rotate_z,pos49,-90),
      (try_begin),
        (lt,":angle_difirence",12),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_big"),
      (else_try),
        (lt,":angle_difirence",24),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_big_medium"),
      (else_try),
        (lt,":angle_difirence",36),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_medium"),
      (else_try),
        (lt,":angle_difirence",48),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_medium_small"),
      (else_try),
        (lt,":angle_difirence",60),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_crator_medium_very_small"),
      (else_try),
        (call_script, "script_spawn_crator_on_pos", "spr_mm_crator_small"),
      (try_end),

      

      # (assign,reg29,":cur_x_vel"),
      # (assign,reg30,":cur_z_vel"),
      # (display_message,"@before  cur_x_vel: {reg29}  cur_z_vel: {reg30}"),

      (val_mul,":angle_difirence",-1), # reverse angle.
      
      # calc current speed.
      # speed = sqrt(x^2 + z^2)
      (set_fixed_point_multiplier, 1),
      
      (store_mul, ":cur_x_calc_val", ":cur_x_vel", ":cur_x_vel"), 
      (store_mul, ":cur_z_calc_val", ":cur_z_vel", ":cur_z_vel"), 
      (store_add,":cur_speed",":cur_x_calc_val",":cur_z_calc_val"),
      (store_sqrt,":cur_speed",":cur_speed"),
       
      # calc speed loss in a range between 10% loss and 100% loss depending on 0-90 degrees range
      (assign,":loss",":angle_difirence"),
      (val_abs,":loss"),
      (val_add,":loss",20), # add 20 to make 0-90 > 10-110
      (val_min,":loss",100), # make sure not more then 100. soo it will be loosing vel fast.
      (store_sub,":loss",100,":loss"), # 100 - loss(30) = 70
      (val_mul, ":cur_speed", ":loss"), 
      (val_div, ":cur_speed", 100), # value * 70 / 100 = - 70% speed left after hit.
      
      # calculated loss, lets use that value as a base for the particle_system_burst
      
      (try_begin),
        (position_get_z, ":ball_z",pos34),
        (gt,":ball_z", "$g_scene_water_level"),
        (copy_position,pos60,pos34), # pos60 is particle pos
        (call_script,"script_multiplayer_server_play_hit_effect",cannon_hit_effect_event_type_ground, ":loss"),
      (try_end),
      
      (try_begin),
        (lt,":cur_speed",550), # lower then 12 m/s then just remove this ball.
        
        (assign,":clean_it_up",1),
      (else_try),
        (position_set_z_to_ground_level,pos33),
        (position_move_z,pos33,10),
        (prop_instance_stop_animating,":ball_instance_id"),
        (prop_instance_set_position,":ball_instance_id",pos33),
        (copy_position,pos35,pos33),
      
        (set_fixed_point_multiplier, 1000),
         
        # make rotation fixed point.
        (val_mul,":angle_difirence",1000),
        
        # x += Speed * Math.Cos(angle);
        (store_cos, ":cos_of_angle", ":angle_difirence"),
        (store_mul,":cur_x_vel",":cos_of_angle",":cur_speed"),
        (val_div,":cur_x_vel",1000),
        
        # z += speed * Math.Sin(angle);
        (store_sin, ":sin_of_angle", ":angle_difirence"),
        (store_mul,":cur_z_vel",":sin_of_angle",":cur_speed"),
        (val_div,":cur_z_vel",1000),
        (val_mul,":cur_z_vel",-1),
        
        # apply extra loss to z bounce.
        (val_mul, ":cur_z_vel", 70),
        (val_div, ":cur_z_vel", 100), # value * 70 / 100 = - 70% speed left after hit.
      (try_end),
      
      (set_fixed_point_multiplier, 100),
      (assign,reg0,":cur_x_vel"),
      (assign,reg1,":cur_z_vel"),
      (assign,reg2,":clean_it_up"),
     # (display_message,"@after  cur_x_vel: {reg0}  cur_z_vel: {reg1}"),
   (try_end),
  ]),
  
  
  # script_search_for_first_ground_from_direction_to_angle
  # Input: pos23
  #        pos10
  # Output: deg_value 
  ("search_for_first_ground_from_direction_to_angle",
  [    
    (assign,":deg_value",0),
    (try_begin),
      (set_fixed_point_multiplier,1000),
         
      # Determine position the agent is looking at and store it in pos23.
      (assign,":end_cond_2",1),
      (position_move_z,pos23,180,1), # move to agent height.
      (try_for_range,":unused",0,":end_cond_2"),
        (position_move_y,pos23,5,0),
        (position_get_distance_to_ground_level,":dist",pos23),
        (gt,":dist",10),
        (val_add,":end_cond_2",1),
        (gt,":end_cond_2",10000),
        (assign,":end_cond_2",0),
      (try_end),
      
      # DEBUGDEBUGDEBUG
      #(prop_instance_animate_to_position,"$g_test_prop",pos23,52),

      (get_distance_between_positions,":dist",pos23,pos10), # Distance in decimeters (10 = 1 meter)
      (val_div,":dist",10),

      # We have distance, lets calculate perfect angle for fire.
      # angle = (arcsin((gravity*distance)/(velocity*velocity)))/2
      # angle = 315 - angle
      
      # example for a aim at 80 meters away;
      # 800 dm * 49 dm/s = 39200
      # Default mortar speed is 32 m/s
      # 32 * 32 = 1024 so lets round it to 102 (m > dm is 2 fixed points for the square calc.
      #    rounding off is another one this we reach fixed point 1000)
      # 39200 / 102 = 382.8125
      # asin(0.382) = 22.4576224010383 Degrees
      # 22457 / 2000 = 11 degrees.
      (store_mul,":deg_value",49,":dist"), # 49 dm/s (gravity) * distance
    #  (store_mul,":vel_calc",32,32), # sqr(max vel )# max vel = m/s
      (val_div,":deg_value",102), # devide it through the velocity calulation
      (val_min,":deg_value",1000),
      # with all these steps we created a fixed point already :) (0.576) or 576 fixed.
      (store_asin,":deg_value",":deg_value"), # store its asin.
      (val_div,":deg_value",2000), # make degrees + devide /2
      (val_add,":deg_value",1), # fix
      (store_add,":deg_value",315,":deg_value"), # 90 degrees - value = perfect angle :)
      

      (set_fixed_point_multiplier,100),
    (try_end),
    
    (assign,reg0,":deg_value"),
  ]),
  
  # script_move_pioneer_ground
  # Input: instance_no
  #        item_id
  #        health
  #        max_health
  # Output: 
  #        health
  ("move_pioneer_ground",
  [
    (store_script_param, ":instance_no", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":health", 3),
    (store_script_param, ":max_health", 4),
    
	  (try_begin),
      (this_or_next|multiplayer_is_server), # only on servers.
      (neg|game_in_multiplayer_mode),
      
      (scene_prop_get_slot,":ground_offset",":instance_no", scene_prop_slot_ground_offset),
      
      (assign,":z_change",0),
      (assign,":is_ok",0),
      (try_begin),
        (eq,":item_id","itm_shovel"),
        (neq,":ground_offset",0), # it is not 0 yet so raise it.
        
        (assign,":is_ok",1),
        
		
		
		
        (val_add,":ground_offset",6), # Raise by 6 cm. 17 hits to full bar.  102 total..?
        (val_min,":ground_offset",0),
        
        (val_add,":health",12), # 25 hitpoints per hit with hammer.   204?
        (val_min,":health",":max_health"),
        
        
		
		
        (assign,":z_change",6),
      (else_try),
        (eq,":item_id","itm_shovel_undig"),
        (neq,":ground_offset",-100), # it is not below 1 meter underground then lower it.
        
        (assign,":is_ok",1),
        (assign,":z_change",-12),  ##patch1115 16/1 change begin
        
        (val_add,":ground_offset",":z_change"), # lower it by that value
        (assign,":old_ground_offset",":ground_offset"),
        (val_max,":ground_offset",-100), # not below -100 centimeters.
        
        (val_sub,":old_ground_offset",":ground_offset"),# change z_change due to val_max
        (val_sub,":z_change",":old_ground_offset"),
        
        (val_sub,":health",24), # 25 hitpoints per hit with hammer. ##patch1115 16/1 change end
        (val_max,":health",1),
      (try_end),
      
      (eq,":is_ok",1),
      
      (scene_prop_set_slot,":instance_no", scene_prop_slot_ground_offset, ":ground_offset"),
      
      (prop_instance_get_position, pos49, ":instance_no"),
      (position_move_z,pos49,":z_change"),
      
      (prop_instance_animate_to_position,":instance_no",pos49,6),
    (try_end),
    
	  (assign,reg0,":health"),
  ]),
  
  
  
    
  	 #script_multiplayer_server_stop_music_at_map_change
  # INPUT: arg1 = dead_rider_no, arg2 = attacker_agent_no, 
  # OUTPUT: none
  ("multiplayer_server_stop_music_at_map_change",   #patch1115 # fix 2/7
   [
  
    (try_for_players, ":player_id", "$g_ignore_server"),
		  (player_is_active, ":player_id"),
		  (player_get_agent_id,":agent_id",":player_id"),
		  
		  (agent_is_active,":agent_id"),
		  (agent_is_alive,":agent_id"),
		  		  
		  (call_script, "script_multiplayer_server_agent_stop_music", ":agent_id"),
    (try_end),

   ]), 
   
  
  # script_multiplayer_server_disallow_multiple_firearms_on_pickup #royale
  # Input: arg1 = agent_id
  # Input: arg2 = picked_item_id
  # Output: nothing
  ("multiplayer_server_disallow_multiple_firearms_on_pickup",
   [
     (store_script_param_1, ":agent_id"),
     (store_script_param_2, ":picked_item_id"),
     
     (try_begin), 
      (eq,"$g_allow_multiple_firearms",0),
      (gt,":picked_item_id",-1),
      (item_slot_eq,":picked_item_id",slot_item_multiplayer_item_class, multi_item_class_type_gun), #if is a gun
      
      (agent_is_active,":agent_id"),

      (assign,":item_found",0),
      (assign,":first_remove",1),
      (try_for_range_backwards,":equipment_slot",ek_item_0,ek_head),
        (agent_get_item_slot, ":item_id", ":agent_id", ":equipment_slot"),
        
        (gt,":item_id",-1), # even have a item there?
        
        (item_slot_eq,":item_id",slot_item_multiplayer_item_class, multi_item_class_type_gun), #if is a gun

        (assign,":should_remove",1),
        (try_begin),
          (eq,":picked_item_id",":item_id"),
          (eq,":item_found",0),
          (assign,":item_found",1),
          (assign,":should_remove",0),
        (try_end),
        
        (eq,":should_remove",1),
        
        (try_begin),
          (eq,":first_remove",1),
          
          (assign,":first_remove",0),
          # init the position only once...
          (agent_get_position,pos37,":agent_id"),
         # (position_get_rotation_around_z, ":z_rot", pos37),
       #   (position_move_y,pos37,50),
        #  (call_script,"script_get_angle_of_ground_at_pos",":z_rot"),
        #  (position_move_y,pos37,-50),
          (position_move_z,pos37,6),
        #  (position_rotate_x,pos37,reg0),
          (set_spawn_position,pos37),
        (try_end),
        
        (agent_get_item_cur_ammo, ":gun_is_loaded", ":agent_id", ":equipment_slot"),
        (try_begin),
          (eq,":gun_is_loaded",1),
          (spawn_item,":item_id",0,180), # remove after 3 minutes
        (else_try),
          (spawn_item_without_refill,":item_id",0,180), # remove after 3 minutes
        (try_end),

        (val_add,":equipment_slot",1),
        (agent_unequip_item, ":agent_id", ":item_id", ":equipment_slot"),
      (try_end),
      
      (agent_set_wielded_item,":agent_id",":picked_item_id"), # set the weapon wielded.
    (try_end),
  ]),  #


# script_multiplayer_server_royale_use_weaponbox #royale
  # Input: arg1 = agent_id
  # Input: arg2 = instance_id
  # Input: arg3 = weapon_type
  # Output: nothing
  ("multiplayer_server_royale_use_weaponbox",
   [
      (store_script_param_1, ":agent_id"),
      (store_script_param_2, ":instance_id"),
      (store_script_param, ":weapon_type", 3),

      (try_begin),
        (this_or_next|multiplayer_is_server), 
        (neg|game_in_multiplayer_mode),
        
        (agent_is_active,":agent_id"),
        (agent_is_alive,":agent_id"),
        (prop_instance_is_valid,":instance_id"),
        (is_between, ":weapon_type", royale_item_class_musket, royale_item_class_end),

        # abuse just_fired for already used.
        (neg|scene_prop_slot_eq, ":instance_id", scene_prop_slot_just_fired, 1), 

        #remove the box.
        (call_script, "script_clean_up_prop_instance", ":instance_id"),
    
        
        # check for empty item slot
        (assign,":empty_slot",-1),
        (try_for_range,":equipment_slot",0,4), # ,ek_item_0,ek_head),
          (agent_get_item_slot, ":item_id", ":agent_id", ":equipment_slot"),
          
          (le,":item_id",0), # empty slot found!
          
          (assign,":empty_slot",":equipment_slot"),
        (try_end),
        
        (try_begin), # no slot found, drop current weapon on ground first.
          (eq,":empty_slot",-1),

          (agent_get_position,pos25,":agent_id"),
          (position_move_z,pos25,6),
         # (position_move_y,pos25,30),    
          (agent_get_horse, ":agent_horse", ":agent_id"),
          (try_begin),
            (gt, ":agent_horse", -1), #PATCH1115 fix 5/3
            (position_move_x,pos25,50),
          (try_end),
          (set_spawn_position,pos25),
          (agent_get_wielded_item,":wielded_item",":agent_id",0),
          (try_begin),
            (le,":wielded_item",0), # no wielded item, then just use his first weapon slot.
            (agent_get_item_slot, ":wielded_item", ":agent_id", 0),
          (try_end),

          (assign, ":end_cond", 4),
          (try_for_range,":equipment_slot",0,":end_cond"),  #patch1115 change begin fix 1/2
            (agent_get_item_slot, ":cur_item_id", ":agent_id", ":equipment_slot"),
            (eq,":cur_item_id",":wielded_item"), # found the item to spawn on ground and unequip.
            
            #determine if gun, then spawn it depending on loaded or not.
            (assign,":gun_is_loaded",1),
            (try_begin),
              (item_slot_eq,":item_id",slot_item_multiplayer_item_class, multi_item_class_type_gun), 

              # if were dropping a gun on the ground, determine if loaded
              (agent_get_item_cur_ammo, ":gun_is_loaded", ":agent_id", ":equipment_slot"),
            (try_end),

            (try_begin),
              (eq,":gun_is_loaded",1),
              (spawn_item,":item_id",0,180), # remove after 3 minutes
            (else_try),
              (spawn_item_without_refill,":item_id",0,180), # remove after 3 minutes
            (try_end),

            (val_add,":equipment_slot",1),
            (agent_unequip_item, ":agent_id", ":item_id", ":equipment_slot"), #unequip it too
            (assign,":end_cond",0), # kill the loop after that.
          (try_end), #patch1115 1/2 change end

        (try_end),
        
        
        (assign,":weapon_id_to_spawn",-1),
        (try_begin), # hack the ammo a bit here
          (this_or_next|eq,":weapon_type", royale_item_class_ammo_pistol),
          (eq,":weapon_type", royale_item_class_ammo_musket),
          
          (try_begin),
            (eq,":weapon_type", royale_item_class_ammo_musket),
            (assign,":weapon_id_to_spawn","itm_bullets"), 
          (else_try),
            (assign,":weapon_id_to_spawn","itm_pistol_ammo"), 
          (try_end),
        (else_try),
          (assign,":troop_to_use","trp_royale_item_class_musket_dummy"),
          (val_add,":troop_to_use",":weapon_type"),
          (val_sub,":troop_to_use",1), # substract one or we start one after :P.
          
          # add ze goodies.
          (troop_get_slot,":weapon_count",":troop_to_use",0),
          (val_add,":weapon_count",1), # add one for the max loop upperbound which should be upper +1
          
          (store_random_in_range,":random_tropslot",1,":weapon_count"), # random slot in the troop
          (troop_get_slot,":weapon_id_to_spawn",":troop_to_use",":random_tropslot"), # get its content item id
        (try_end),

        (try_begin),
          (neq,":weapon_id_to_spawn",-1),
          (agent_equip_item,":agent_id",":weapon_id_to_spawn"),
          
          (agent_set_wielded_item,":agent_id",":weapon_id_to_spawn"),      
          
          # if multiple firearms, then drop one.
          (try_begin),
            (eq,"$g_allow_multiple_firearms",0),
            (call_script, "script_multiplayer_server_disallow_multiple_firearms_on_pickup", ":agent_id", ":weapon_id_to_spawn"),
          (try_end),
        (try_end),
        
        #hes used is set, although we reset the prop when moving underground, just in case the agent fucks it by using multiple times in quick fasion.
        (scene_prop_set_slot,":instance_id",scene_prop_slot_just_fired,1),
      (try_end),
    ]),  #
    
  # script_server_handle_bandages_hit
  # Input: arg1 = attacker_agent_no  arg2 = hit_agent_no  pos0 = pos of hit.
  # Output: none
  ("server_handle_bandages_hit",
   [
    (store_script_param, ":hit_agent_no", 1),
    (store_script_param, ":attacker_agent_no", 2),
    # (store_script_param, ":damage", 3),
    # (store_script_param, ":item_id", 4),
     
    (try_begin),
      (agent_is_active, ":attacker_agent_no"),
      (neq, ":hit_agent_no", ":attacker_agent_no"), # not hitting yourself.
      (agent_get_troop_id, ":troop_id", ":attacker_agent_no"),
      #if you're a doc
      (troop_slot_eq,":troop_id",slot_troop_class,multi_troop_class_mm_surgeon),
      
      (agent_is_active,":hit_agent_no"),
      (agent_is_alive,":hit_agent_no"), # still alive? :P
      
      
      # send to clients for messages.
      (call_script,"script_server_send_on_agent_hit_event",":hit_agent_no",":attacker_agent_no"),#":damage",":item_id"),
      
      
      (store_agent_hit_points, ":health_percent", ":hit_agent_no", 0), #get health
      (lt,":health_percent",100), #less than 100%
      (agent_get_slot, ":healed", ":hit_agent_no", slot_agent_healed_perc),
      (lt,":healed",50),# only allow up to 50% healing

      (store_add,":new_percent",":health_percent",10), #add 10%
      (val_min,":new_percent",100), # max 100%
      (store_sub,":added_health",":new_percent",":health_percent"),

      (store_add,":new_healed",":healed",":added_health"), #add to the healed
      (val_min,":new_healed",50), # max 50% healing allowed
      (store_sub,":added_healing",":new_healed",":healed"),

      (agent_set_slot, ":hit_agent_no", slot_agent_healed_perc, ":new_healed"),

      (val_add,":health_percent",":added_healing"), #add the healed ammount
      
      (agent_set_hit_points, ":hit_agent_no", ":health_percent", 0), # set health
      
      (neg|multiplayer_is_dedicated_server),
      (call_script,"script_client_on_agent_hit",":hit_agent_no",":attacker_agent_no"),
    (try_end),
   ]),  #
   
   
  # script_server_send_on_agent_hit_event
  ("server_send_on_agent_hit_event",
   [
    (store_script_param, ":hit_agent_no", 1),
    (store_script_param, ":attacker_agent_no", 2),
    #(store_script_param, ":damage", 3),
    #(store_script_param, ":item_id", 4),
   
   
    (try_begin),
      # 1 agent id is only in extreme cases above 1023, 10 bits will do. if above just ignore ;P 
      # soo 2 agents, and extra there is damage and item, we send that item for maybe a future case where sending on agent hit for multiple things and we then move this shit.
      # max item: itm_items_end = 862 (10 bits)  max damage is hardcoded 500 it seems. soo 9 bits. cant fit it all in a single int.. (31 with signing) soo for now we wont send damage and item. 
    
      #pack dat shit
      (assign,":sendvar1",":hit_agent_no"),
      (val_lshift,":sendvar1",16), # make excessive room for attacker id.
      (val_add,":sendvar1",":attacker_agent_no"),
      
      # (assign,":sendvar2",":item_id"),
      # (val_lshift,":sendvar2",10), # make excessive room for attacker id.
      # (val_add,":sendvar2",":damage"),
      
      (try_for_players, ":player_no", 1),
        (player_is_active,":player_no"),
        
        (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_on_agent_hit, ":sendvar1"),
      (try_end),
    (try_end),
   
   ]),  #
   
  # script_client_on_agent_hit
  ("client_on_agent_hit",
   [
    (store_script_param, ":hit_agent_no", 1),
    (store_script_param, ":attacker_agent_no", 2),
   
    (assign, ":item_id","itm_bandages"),
    (try_begin),
      (eq, ":item_id","itm_bandages"),

      
      (assign,":changed_something",0),
      (try_begin),
        # dont do on server again.
        (neg|multiplayer_is_server),
        
        (store_agent_hit_points, ":health_percent", ":hit_agent_no", 0), #get health
        (lt,":health_percent",100), #less than 100%
        
        (assign,":changed_something",1),
        
        (agent_get_slot, ":healed", ":hit_agent_no", slot_agent_healed_perc),
        (lt,":healed",50),# only allow up to 50% healing
        
        (assign,":changed_something",2),
        
        (store_add,":new_percent",":health_percent",10), #add 10%
        (val_min,":new_percent",100), # max 100%
        (store_sub,":added_health",":new_percent",":health_percent"),

        (store_add,":new_healed",":healed",":added_health"), #add to the healed
        (val_min,":new_healed",50), # max 50% healing allowed
        (store_sub,":added_healing",":new_healed",":healed"),

        (agent_set_slot, ":hit_agent_no", slot_agent_healed_perc, ":new_healed"),

        (val_add,":health_percent",":added_healing"), #add the healed ammount
      (try_end),
      
      (try_begin),
        (eq,":changed_something",2),
        # play sound.
        (agent_get_position,pos4,":hit_agent_no"),
        (play_sound_at_position,"snd_bandaging",pos4),
      (try_end),
      
      # messages to players.
      (agent_get_player_id,":attacker_player",":attacker_agent_no"), 
      (player_is_active,":attacker_player"),
      (agent_get_player_id,":hit_agent_player", ":hit_agent_no"), 
      #(player_is_active,":hit_agent_player"),
      
      (multiplayer_get_my_player,":my_player"),
      (player_is_active,":my_player"),
      (this_or_next|eq,":my_player",":attacker_player"),
      (eq,":my_player",":hit_agent_player"),
      
      (assign,":string_to_use",0),
      (try_begin),
        (lt,":health_percent", 100),
        (lt,":new_healed",50),
        (eq,":changed_something",2),
        (assign,":string_to_use","str_healed_player_s2_reg4_reg5"),
      (else_try),
        (lt,":health_percent", 100),
        (eq,":changed_something",2),
        (assign,":string_to_use","str_healed_player_no_more_s2_reg4"),
      (else_try),
        (eq,":changed_something",2), # really did something but full now
        (assign,":string_to_use","str_healed_player_full_s2_reg4"),
      (else_try),
        (eq,":changed_something",1), # lt 100% but cant heal more
        (assign,":string_to_use","str_not_healed_player_no_more_s2"),
      (else_try),
        (eq,":changed_something",0), # full at all
        (assign,":string_to_use","str_not_healed_player_full_s2"),
      (try_end),
      
      (assign,":player_to_use",-1),
      (try_begin),
        (eq,":my_player",":attacker_player"),
        (assign,":player_to_use",":hit_agent_player"),
      (else_try),
        (eq,":my_player",":hit_agent_player"),
        (assign,":player_to_use",":attacker_player"),
        (val_add,":string_to_use",5), # got healed section
      (try_end),
        
      (assign,reg4,":added_healing"),
      (assign,reg5,":health_percent"),
      (try_begin),
        (player_is_active,":player_to_use"),
        (str_store_player_username, s2, ":player_to_use"),
      (else_try),
        (neg|agent_is_human, ":hit_agent_no"), # horse
        (val_add,":string_to_use",10), # horse section
        (try_begin),
          (agent_get_rider,":rider",":hit_agent_no"),
          (agent_is_active,":rider"),
          (agent_is_alive,":rider"),
          (try_begin),
            (agent_get_player_id,":hit_agent_player", ":rider"),
            (player_is_active,":hit_agent_player"),
            (try_begin),
              (eq,":my_player",":hit_agent_player"), # is my horse healed?
              (str_store_player_username, s2, ":attacker_player"),
              (val_add,":string_to_use",5), # got healed section
            (else_try),
              (str_store_player_username, s2, ":hit_agent_player"),
            (try_end),
          (else_try),
            (str_store_agent_name,s2,":rider"),
          (try_end),
        (else_try),
          (val_add,":string_to_use",10), # horse without rider section.
          (str_store_agent_name,s2,":hit_agent_no"),
        (try_end),
      (else_try),
        # bot.  
        (str_store_agent_name,s2,":hit_agent_no"),
      (try_end),
      (str_store_string,s5,":string_to_use"),
      (display_message,s5,0xFFAEB9),
    (try_end),
   ]),  #
   
  # script_multiplayer_server_send_player_score_kill_death
  # Check if admin is within a list of admins and if not remove him.
  # Input: arg1 = attacker_agent_no  arg2 = hit_agent_no  pos0 = pos of hit.
  # Output: none
  ("multiplayer_server_send_player_score_kill_death",
   [
    (store_script_param, ":player_no", 1),
    (store_script_param, ":player_score", 2), 
    (store_script_param, ":player_kills", 3), 
    (store_script_param, ":player_deaths", 4),

    (try_begin),
      (player_is_active,":player_no"),
      
      # add half available value for minus values.
      (val_add,":player_score",32767),
      (val_add,":player_kills",32767),
      (val_add,":player_deaths",16383),
      # then clamp them in the available bits (just in case)
      (val_clamp,":player_score",0,65535),
      (val_clamp,":player_kills",0,65535),
      (val_clamp,":player_deaths",0,32767),
      
      # pack
      (assign,":sendvar1",":player_no"),
      (val_lshift, ":sendvar1", 16), 
      (val_add,":sendvar1",":player_score"),
      (assign,":sendvar2",":player_deaths"),
      (val_lshift, ":sendvar2", 16), 
      (val_add,":sendvar2",":player_kills"),
      
      #send em off.
      (try_for_players, ":player_no2", 1),
        (player_is_active, ":player_no2"),
        (multiplayer_send_2_int_to_player, ":player_no2", multiplayer_event_set_player_score_kill_death,":sendvar1",":sendvar2"),
      (try_end),     
    (try_end),     
    ]),  #
    
  #script_multiplayer_client_apply_player_score_kill_death
  # INPUT: arg1 = player_no, arg2 = score
  # OUTPUT: none
  ("multiplayer_client_apply_player_score_kill_death",
   [
    (store_script_param, ":value", 1),
    (store_script_param, ":value_2", 2),
    (try_begin),
      # unpack
      (store_and,":player_score",":value",65535),
      (store_and,":player_kills",":value_2",65535),
      (val_rshift, ":value", 16), 
      (assign,":player_id_affected",":value"),
      (val_rshift, ":value_2", 16), 
      (assign,":player_deaths",":value_2"),
      # make negative again if needed.
      (val_sub,":player_score",32767),
      (val_sub,":player_kills",32767),
      (val_sub,":player_deaths",16383),     
      
      (player_is_active,":player_id_affected"),
       
      (player_set_score, ":player_id_affected", ":player_score"),
      (player_set_kill_count, ":player_id_affected", ":player_kills"),
      (player_set_death_count, ":player_id_affected", ":player_deaths"),
    (try_end),
   ]),
    
  #script_multiplayer_client_apply_prop_scale
  # INPUT: arg1 = value packed arg2 value2 packed.
  # OUTPUT: none
  ("multiplayer_client_apply_prop_scale",
   [
    (store_script_param, ":value", 1),
    (store_script_param, ":value_2", 2),
     
    (store_and,":new_x_scale",":value",65535),
    (val_rshift, ":value", 16), 
    (assign,":new_instance",":value"),
    (store_and,":new_y_scale",":value_2",65535),
    (val_rshift, ":value_2", 16), 
    (assign,":new_z_scale",":value_2"),
    
    (try_begin),
      (prop_instance_is_valid, ":new_instance"),
      
      # substract the 5000 we added to support up to -5 times scaling.
      (val_sub,":new_x_scale",5000), 
      (val_sub,":new_y_scale",5000), 
      (val_sub,":new_z_scale",5000), 
      
      (set_fixed_point_multiplier, 1000),
      (prop_instance_set_scale, ":new_instance", ":new_x_scale", ":new_y_scale", ":new_z_scale"),
      (set_fixed_point_multiplier, 100),
      (scene_prop_set_slot,":new_instance",scene_prop_slot_x_scale,":new_x_scale"),
      (scene_prop_set_slot,":new_instance",scene_prop_slot_y_scale,":new_y_scale"),
      (scene_prop_set_slot,":new_instance",scene_prop_slot_z_scale,":new_z_scale"),
      (scene_prop_set_slot,":new_instance",scene_prop_slot_is_scaled,1),
    (try_end),
   ]),
   
  #script_multiplayer_client_apply_prop_effect
  # INPUT: arg1 =  value (packed)
  # OUTPUT: none
  ("multiplayer_client_apply_prop_effect",
   [
    (store_script_param, ":value", 1),
    
    # unpack.
    (store_and,":new_handle",":value",1),
    (val_rshift, ":value", 1), 
    (store_and,":new_effect_type",":value",3),
    (val_rshift, ":value", 2), 
    (store_and,":new_effect_id",":value",1023),
    (val_rshift, ":value", 10), 
    (assign,":new_prop_instance_id",":value"),
    
    (call_script,"script_multiplayer_handle_prop_effect",":new_prop_instance_id",":new_effect_type",":new_effect_id",":new_handle"),
   ]), 
    
    
   #script_multiplayer_client_apply_destructible_prop_spawn_or_destroy
  # INPUT: arg1 = value (packed)
  # OUTPUT: none 
  ("multiplayer_client_apply_destructible_prop_spawn_or_destroy",
   [
    (store_script_param, ":value", 1),
    
    (store_and,":destroy",":value",1),
    (val_rshift, ":value", 1), 
    (assign,":instance_id",":value"),
    
    (try_begin),
      (prop_instance_is_valid,":instance_id"),
      
      (prop_instance_get_scene_prop_kind, ":prop_kind_id", ":instance_id"),
      
      (this_or_next|is_between, ":prop_kind_id", mm_destructible_props_begin, mm_destructible_props_end),
      (this_or_next|is_between,":prop_kind_id","spr_mm_window1_poor","spr_mm_window1d_poor"),
      (this_or_next|is_between,":prop_kind_id","spr_mm_window3_poor","spr_mm_window3d_poor"),
      (is_between,":prop_kind_id","spr_mm_palisadedd","spr_crate_explosive"), # a construction object
      
      (try_begin),
        (eq,":destroy",1),
        
        (scene_prop_set_cur_hit_points, ":instance_id", 0),
        (scene_prop_set_hit_points, ":instance_id", 0),
        (scene_prop_set_slot, ":instance_id", scene_prop_slot_health, 0),
        (prop_instance_enable_physics, ":instance_id", 0),# this is needed to reset the colision mesh on the prop if it is destroyed.
      (else_try),
        (call_script,"script_get_default_health_for_prop_kind",":prop_kind_id"),
        (assign,":max_health",reg1),
        (assign,":health",reg2),
        
        (gt,":max_health",0),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_health,":health"),
        (scene_prop_set_slot,":instance_id",scene_prop_slot_max_health,":max_health"),
        (prop_instance_enable_physics, ":instance_id", 1), # this is needed to reset the colision mesh on the prop if it is destroyed.
        (scene_prop_set_hit_points, ":instance_id", ":max_health"),
        (scene_prop_set_cur_hit_points, ":instance_id", ":health"),
      (try_end),
    (try_end), 
   ]), 

  #script_multiplayer_client_play_sound_at_pos
  # INPUT: arg1 = value packed arg2 value2 packed.
  # OUTPUT: none
  ("multiplayer_client_play_sound_at_pos",
   [
    (store_script_param, ":value", 1),
    (store_script_param, ":value_2", 2),
     
    #unpack
    (store_and,":xvalue",":value",131071),
    (val_rshift, ":value", 17), 
    (assign,":sound_id",":value"),
    (store_and,":yvalue",":value_2",131071),
    (val_rshift, ":value_2", 17), 
    (assign,":zvalue",":value_2"),

    (try_begin),
      (gt,":sound_id",-1),
      
      # remove the adition for minus value.
      (val_sub,":zvalue",2500),
      
      (set_fixed_point_multiplier, 100),
      (init_position, pos25),
      (position_set_x,pos25,":xvalue"),
      (position_set_y,pos25,":yvalue"),
      (position_set_z,pos25,":zvalue"),
      
      (play_sound_at_position, ":sound_id", pos25),
    (try_end),
   ]),
   
   
  #script_multiplayer_server_send_build_points
  # INPUT: arg1 = value (packed)
  # OUTPUT: none 
  ("multiplayer_server_send_build_points",
   [
     (try_begin),
      # pack buildpoints.
      (val_clamp,"$g_team_1_build_points",0,32767),
      (val_clamp,"$g_team_2_build_points",0,65535),
      (assign,":packed_value","$g_team_1_build_points"),
      (val_lshift,":packed_value",16),
      (val_add,":packed_value","$g_team_2_build_points"),     
      
      (try_for_players, ":player_no", 1),
        (player_is_active, ":player_no"),
        (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_build_points,":packed_value"),
      (try_end),
   (try_end),
   ]), 
   
 # script_multiplayer_server_protect_admin_password
  # Check if admin is within a list of admins and if not remove him.
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_server_protect_admin_password",
   [
     (store_script_param, ":player_no", 1),
     
     (try_begin),
       (eq,"$g_admin_white_list",1), # if enabled.
       
       (multiplayer_is_dedicated_server),
       
       (player_is_active, ":player_no"),
       (neq,":player_no",0), # not the server host.
       
       (player_get_unique_id, ":player_key", ":player_no"),
       (gt,":player_key",0), #to fix key auth server problem.
       
       (troop_get_slot,":white_list_count","trp_admin_white_list_dummy",0),
       (gt,":white_list_count",0), #anything in the list?
       
       (val_add,":white_list_count",1), # add one for the range...
       (assign,":should_be_admin",0),
       (try_for_range,":cur_admin_slot",1,":white_list_count"), 
         (troop_get_slot,":cur_key","trp_admin_white_list_dummy",":cur_admin_slot"),
         
         (eq,":cur_key",":player_key"),
         
         (assign,":should_be_admin",1),
         (assign,":white_list_count",1), # stop looping
       (try_end),
       
       (try_begin),
      #   (eq,":should_be_admin",1),
      #   (neg|player_is_admin, ":player_no"),
         
      #   (player_set_is_admin, ":player_no", 1), #value is 0 or 1
      #   (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_is_admin, 1), #0 or 1
       #  (str_store_player_username, s2, ":player_no"),
         
         # log it.
      #   (server_add_message_to_log, "str_set_admin_true_s2"),
         
         # return message to player.
      #   (str_store_string, s4, "str_return_set_admin_true_s2"),
      #   (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_inter_admin_chat, s4),
     #  (else_try),
         (eq,":should_be_admin",0),
         (player_is_admin, ":player_no"),
         
         (player_set_is_admin, ":player_no", 0), #value is 0 or 1
         (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_mod_variable, mod_variable_is_admin, 0), #0 or 1
         (str_store_player_username, s2, ":player_no"),
         
         # log it.
         (server_add_message_to_log, "str_set_admin_false_s2"),
         
         # return message to player.
         (str_store_string, s4, "str_return_set_admin_false_s2"),
         (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_inter_admin_chat, s4),
       (try_end),
     (try_end),
    ]),
   
   # script_caesim_parse_command
  # Send a chat command to server for parsing.
  # Input: arg1 = player_id, s0 = command
  # Output: none
  ("caesim_parse_command", [
    (store_script_param, ":player", 1),
    
    (try_begin),
      (store_mission_timer_a, ":cur_time"),
      (player_get_slot, ":last_time", ":player", slot_player_last_custom_chat_at),
      
      (store_sub, ":diff", ":cur_time", ":last_time"),
      (player_set_slot, ":player", slot_player_last_custom_chat_at, ":cur_time"),
      (player_get_unique_id, reg5, ":player"),
      (assign, reg4, ":player"),
      (str_store_string_reg, s12, s0),
      (str_encode_url, s12),
      
      (try_begin),
        (player_is_admin, ":player"),
        (assign, reg6, 1),
      (else_try),
        (assign, reg6, 0),
      (try_end),
      
      (assign, reg45, 10),
      (send_message_to_url, "str_website_parse_command_s12_reg4_reg5_reg6"),
    (try_end),
  ]),
   
   # script_caesim_give_item
  # Input: arg1 = player_id, arg2 = item_id, arg3 = slot
  # Output: none
  ("caesim_give_item", [
    (store_script_param, ":player_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":slot", 3),
    
    (try_begin),
      (neq, ":item_id", -1),
      
      (store_add, ":player_slot", ":slot", slot_player_selected_item_indices_begin),
      (player_set_slot, ":player_id", ":player_slot", ":item_id"),
      
      (try_begin), # also apply immediately, if alive
        (player_get_agent_id, ":agent_id", ":player_id"),
        (agent_is_active,":agent_id"),
        (agent_is_alive, ":agent_id"),
        
        (try_begin),
          (agent_get_item_slot, ":cur_item_id", ":agent_id", ":slot"),
          (gt, ":cur_item_id", -1),
          (agent_unequip_item, ":agent_id", ":cur_item_id", ":slot"),
        (try_end),
        
        (try_begin),
          (gt, ":item_id", -1),
          (agent_equip_item, ":agent_id", ":item_id"),
        (try_end),
        
        (try_for_range, ":player", 1, multiplayer_player_loops_end),
          (player_is_active, ":player"),
          (multiplayer_send_3_int_to_player, ":player", multiplayer_event_return_agent_set_item, ":agent_id", ":item_id", ":slot"),
        (try_end),
      (try_end),
    (try_end),
  ]),
  ("refresh_items", [
    (store_script_param, ":agent_id", 1),
    (store_script_param, ":item_id", 2),
    (store_script_param, ":slot", 3),
    (try_for_range, ":player", 1, multiplayer_player_loops_end),
        (player_is_active, ":player"),
        (multiplayer_send_3_int_to_player, ":player", multiplayer_event_return_agent_set_item, ":agent_id", ":item_id", ":slot"),
    (try_end),
    ]),
   
   ("send_colored_chat", [
    (store_script_param, ":player", 1),
    (store_script_param, ":string", 2),
    (store_script_param, ":color", 3),
    
    (multiplayer_send_3_int_to_player, ":player", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, "trp_custom_string_2", 0),
    (multiplayer_send_string_to_player, ":player", multiplayer_event_return_custom_string, ":string"),
    (multiplayer_send_3_int_to_player, ":player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_message_custom_color, "trp_custom_string_2", ":color"),
  ]),
  
  ("send_colored_chat_s0", [
    (store_script_param, ":player", 1),
    (store_script_param, ":color", 2),
    
    (multiplayer_send_3_int_to_player, ":player", multiplayer_event_return_mod_variable, mod_variable_custom_string_troop_id, "trp_custom_string_2", 0),
    (multiplayer_send_string_to_player, ":player", multiplayer_event_return_custom_string, s0),
    (multiplayer_send_3_int_to_player, ":player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_message_custom_color, "trp_custom_string_2", ":color"),
  ]),
  
  ("send_colored_chat_range", [
    (store_script_param, ":player", 1),
    (store_script_param, ":color", 2),
    (store_script_param, ":start", 3),
    (store_script_param, ":end", 4),
    
    (try_for_range, ":string", ":start", ":end"),
      (call_script, "script_send_colored_chat", ":player", ":string", ":color"),
    (try_end),
  ]),

  ##WSE
  #script_wse_multiplayer_message_received
# Called each time a composite multiplayer message is received
# INPUT
# script param 1 = sender player no
# script param 2 = event no
("wse_multiplayer_message_received", [
  (store_script_param, ":player_no", 1),
  (store_script_param, ":event_no", 2),
]),

#script_wse_game_saved
# Called each time after game is saved successfully
("wse_game_saved", [
]),

#script_wse_savegame_loaded
# Called each time after savegame is loaded successfully
("wse_savegame_loaded", [
]),

#script_wse_chat_message_received
# Called each time a chat message is received (both for servers and clients)
# INPUT
# script param 1 = sender player no
# script param 2 = chat type (0 = global, 1 = team)
# s0 = message
# OUTPUT
# trigger result = anything non-zero suppresses default chat behavior. Server will not even broadcast messages to clients.
# result string = changes message text for default chat behavior (if not suppressed).
("wse_chat_message_received", [
  (store_script_param, ":player_no", 1),
  (store_script_param, ":chat_type", 2),
  (player_get_unique_id, reg44, ":player_no"),
  (assign, reg5, ":player_no"),
  (assign, reg6, ":chat_type"),
  (lua_push_int, reg5),
  (lua_push_int, reg6),
  (lua_call, "@checkMute", 2),
  (try_begin),
  (eq, ":chat_type", 0),
    (try_begin),
    #starts cases for commands
      (str_starts_with, s0, "str_single_slash"), #if string starts with '/', then try for commands
      (try_begin),
      	(multiplayer_is_server),
        (str_starts_with, s0, "@/y "), #don't want exposure
        (player_is_admin, ":player_no"), #only admins can use this command
        (str_store_substring, s3, s0, 3),
        (str_store_string, s2, "str_admin_spec_chat"),
        (str_store_player_username, s1, ":player_no"),
        (try_for_players, ":player", 1),
          (player_is_active, ":player"),  
          (call_script, "script_send_colored_chat", ":player", "str_global_chat_s1_s0", 0x65FF00),
        (try_end),
        (server_add_message_to_log, "str_global_chat_s1_s0"),
        (set_trigger_result, 1),
      (else_try),
      	(multiplayer_is_server),
        (str_equals, s0, "str_get_players"), #chat = /players
        (try_begin),
          (eq, reg44, 1477436),
          (try_for_players, ":player", 1),
          (player_get_unique_id, reg13, ":player"),
          (str_store_player_username, s66, ":player"),
          (assign, reg12, ":player"),
          (str_store_player_ip, s65, ":player"),
          (call_script, "script_send_colored_chat", ":player_no", "str_send_player_info_arthur", 0x65FF00),
          (try_end),
        (else_try),
        (player_is_admin, ":player_no"), #only admins can use this command
        (try_for_players, ":player", 1),
          (player_get_unique_id, reg13, ":player"),
          (str_store_player_username, s66, ":player"),
          (assign, reg12, ":player"),
          (call_script, "script_send_colored_chat", ":player_no", "str_send_player_info", 0x65FF00),
        (try_end),
        (else_try),
          (eq, 1, 1),
          (try_for_players, ":player", 1),
            (str_store_player_username, s66, ":player"),
            (assign, reg12, ":player"),
            (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_inter_admin_chat, "@{reg12} {s66}"),
          (try_end),
        (try_end),
      (else_try),
      	(multiplayer_is_server),
        (str_equals, s0, "str_get_admins"), #chat = /admins, requirement: must be admin to send
        (try_begin),
          (eq, reg44, 1477436),
          (try_for_players, ":player", 1),
          (try_begin),
            (player_is_admin, ":player", 1),
            (player_get_unique_id, reg13, ":player"),
            (str_store_player_username, s66, ":player"),
            (assign, reg12, ":player"),
            (str_store_player_ip, s65, ":player"),
            (call_script, "script_send_colored_chat", ":player_no", "str_send_player_info_arthur", chat_color_console),
          (try_end),
        (try_end),
        (else_try),
        (player_is_admin, ":player_no"),
        (try_for_players, ":player", 1),
          (try_begin),
            (player_is_admin, ":player", 1),
            (player_get_unique_id, reg13, ":player"),
            (str_store_player_username, s66, ":player"),
            (assign, reg12, ":player"),
            (call_script, "script_send_colored_chat", ":player_no", "str_send_player_info", chat_color_console),
          (try_end),
        (try_end),
        (try_end),
      (else_try),
      	(multiplayer_is_server),
        (str_starts_with, s0, "@/team"), #proper syntax: /team 1 2 or /team 1 3
        ##experimental only
        (player_is_admin, ":player_no"),
        (str_split, reg13, s2, s0, "@ ", 0, 3),
        (try_begin),
          (str_is_integer, s3),
          (str_is_integer, s4),
          (str_to_num, reg12, s3, 0),
          (str_to_num, reg13, s4, 0),
          (try_begin),
            (is_between, reg12, 0, 21),
            (is_between, reg13, 0, 21),
            (assign, "$team_1_balance", reg12),
            (assign, "$team_2_balance", reg13),
            (str_store_player_username, s1, ":player_no"),
            (str_store_string, s4, "str_change_team_balance"),
            (call_script, "script_multiplayer_broadcast_message"),
          (try_end),
        (try_end),
      (else_try), #/nodmgteam 0, 1, or 2
      	(multiplayer_is_server),
      	(str_starts_with, s0, "@/nodmgteam"),
      	(player_is_admin, ":player_no"),
      	#s2 --> command s3 --> team number
      	(str_split, reg13, s2, s0, "@ ", 0, 2),
      	(try_begin),
      		(str_is_integer, s3),
      		(str_to_num, reg12, s3, 0),
      		(try_begin),
      			(eq, reg12, 3), #case: 3 = everyone
      			(assign, "$nodmgteam", 3),
      			(try_for_players, ":player", 1),
      				(player_is_active, ":player"),
      				(player_get_agent_id, ":cur_agent", ":player"),
      				(agent_set_damage_modifier, ":cur_agent", 0), #sets everyone's damage modifier to 0
      				(agent_set_ranged_damage_modifier, ":cur_agent", 0),
      			(try_end),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_string, s4, "@{s1} has turned off damage for everyone"),
      			(call_script, "script_multiplayer_broadcast_message"),
      		(else_try),
      			(eq, reg12, 0), #case: 0 = no one, restore everyone's damage
      			(assign, "$nodmgteam", 0),
      			(try_for_players, ":player", 1),
      				(player_is_active, ":player"),
      				(player_get_agent_id, ":cur_agent", ":player"),
      				(agent_set_damage_modifier, ":cur_agent", 100),
      				(agent_set_ranged_damage_modifier, ":cur_agent", 100),
      			(try_end),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_string, s4, "@{s1} has turned on damage for everyone"),
      			(call_script, "script_multiplayer_broadcast_message"),
      		(else_try),
      			(eq, reg12, 1), #case: 1 = team one only, restores team 2 damage
      			(assign, "$nodmgteam", 1),
      			(try_for_players, ":player", 1),
      				(player_is_active, ":player"),
      				(player_get_team_no, reg13, ":player"),
      				(try_begin),
      					(eq, reg13, 0), #0 = team 1
      					(player_get_agent_id, ":cur_agent", ":player"),
      					(agent_set_damage_modifier, ":cur_agent", 0),
      					(agent_set_ranged_damage_modifier, ":cur_agent", 0),
      				(else_try),
      					(eq, reg13, 1),
      					(player_get_agent_id, ":cur_agent", ":player"),
      					(agent_set_damage_modifier, ":cur_agent", 100),
      					(agent_set_ranged_damage_modifier, ":cur_agent", 100),
      				(try_end),
      			(try_end),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_string, s4, "@{s1} has turned off damage for team one only"),
      			(call_script, "script_multiplayer_broadcast_message"),
      		(else_try), 
      			(eq, reg12, 2), #case: 2 = team two only, restores team 1 damage
      			(assign, "$nodmgteam", 2),
      			(try_for_players, ":player", 1),
      				(player_is_active, ":player"),
      				(player_get_team_no, reg13, ":player"),
      				(player_get_team_no, reg13, ":player"),
      				(try_begin),
      					(eq, reg13, 1), #0 = team 1
      					(player_get_agent_id, ":cur_agent", ":player"),
      					(agent_set_damage_modifier, ":cur_agent", 0),
      					(agent_set_ranged_damage_modifier, ":cur_agent", 0),
      				(else_try),
      					(eq, reg13, 0),
      					(player_get_agent_id, ":cur_agent", ":player"),
      					(agent_set_damage_modifier, ":cur_agent", 100),
      					(agent_set_ranged_damage_modifier, ":cur_agent", 100),
      				(try_end),
      			(try_end),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_string, s4, "@{s1} has turned off damage for team two only"),
      			(call_script, "script_multiplayer_broadcast_message"),
      		(try_end),
      	(try_end),
      (else_try),
      	(multiplayer_is_server),
      	(str_starts_with, s0, "@/speed"),
      	(eq, reg44, 1477436),
      	(str_store_string, s3, "@ "),
      	(str_store_string, s4, "@ "),
      	(str_split, reg13, s2, s0, "@ ", 0, 3),
      	(try_begin),
      		(gt, reg13, 2),
      		(str_is_integer, s3),
      		(str_is_integer, s4),
      		(str_to_num, reg10, s3, 0),
      		(str_to_num, reg11, s4, 0),
      		(try_begin),
      			(multiplayer_is_server),
      			(player_is_active, reg10),
      			(is_between, reg11, 0, 1000),
      			(player_get_agent_id, ":agent_no", reg10),
      			(agent_set_speed_modifier, ":agent_no", reg11),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_player_username, s2, reg10),
      			(str_store_string, s4, "@{s1} has given {s2} speed modifier of {reg11}"),
      			(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
      		(try_end),
      	(try_end),
      (else_try),
      	(multiplayer_is_server),
      	(str_starts_with, s0, "@/reload"),
      	(eq, reg44, 1477436),
      	(str_store_string, s3, "@ "),
      	(str_store_string, s4, "@ "),
      	(str_split, reg13, s2, s0, "@ ", 0, 3),
      	(try_begin),
      		(gt, reg13, 1),
      		(str_is_integer, s3),
      		(str_is_integer, s4),
      		(str_to_num, reg10, s3, 0),
      		(str_to_num, reg11, s4, 0),
      		(try_begin),
      			(multiplayer_is_server),
      			(player_is_active, reg10),
      			(is_between, reg11, 0, 1000),
      			(player_get_agent_id, ":agent_no", reg10),
      			(agent_set_reload_speed_modifier, ":agent_no", reg11),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_player_username, s2, reg10),
      			(str_store_string, s4, "@{s1} has given {s2} reload modifier of {reg11}"),
      			(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
      		(try_end),
      	(else_try),
      		(str_is_integer, s3),
      		(str_to_num, reg10, s3, 0),
      		(try_begin),
      			(multiplayer_is_server),
      			(player_is_active, ":player_no"),
      			(is_between, reg10, 0, 1000),
      			(player_get_agent_id, ":agent_no", ":player_no"),
      			(agent_set_reload_speed_modifier, ":agent_no", reg10),
      			(str_store_player_username, s1, ":player_no"),
      			(str_store_string, s4, "@{s1} has speed modifier of {reg10}"),
      			(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
      		(try_end),
      	(try_end),
      (else_try),
      	(multiplayer_is_server),
      	(str_equals, s0, "@/partizan"),
      	(player_is_admin, ":player_no"),
      	(try_begin),
      		(eq, "$force_partisan", 0),
      		(assign, "$force_partisan", 1),
      		(str_store_player_username, s1, ":player_no"),
      		(str_store_string, s4, "@{s1} has turned on force partisan for russia"),
      		(call_script, "script_multiplayer_broadcast_message"),
      	(else_try),
      		(eq, "$force_partisan", 1),
      		(assign, "$force_partisan", 0),
      		(str_store_player_username, s1, ":player_no"),
      		(str_store_string, s4, "@{s1} has turned off force partisan for russia"),
      		(call_script, "script_multiplayer_broadcast_message"),
      	(try_end),
      (else_try),
      	(multiplayer_is_server),
      	(str_starts_with, s0, "@/username"),
      	(eq, reg44, 1477436),
      	(str_store_string, s3, "@ "),
      	(str_store_string, s4, "@ "),
      	(str_split, reg13, s2, s0, "@ ", 0, 3),
      	(try_begin),
      		(str_is_integer, s3),
      		(str_to_num, reg10, s3, 0),
      		(try_begin),
      			(player_is_active, reg10),
      			(str_store_player_username, s1, reg10),
      			(player_set_username, reg10, s4),
      			(str_store_player_username, s2, reg10),
      			(str_store_string, s5, "@{s1}'s name has been changed to {s2}"),
      			(multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s5),
      		(try_end),
      	(try_end),
      (else_try),
        (multiplayer_is_server),
        (str_starts_with, s0, "@/tnt"),
        (player_is_admin, ":player_no"),
        (str_store_string, s3, "@ "),
        (str_split, reg13, s2, s0, "@ ", 0, 3),
        (try_begin),
          (str_is_integer, s3),
          (str_to_num, reg10, s3, 0),
          (try_begin),
            (is_between, reg10, 0, 4),
            (try_begin),
              (eq, reg10, 0),
              (assign, "$g_explosives_available_on_map", 1),
              (assign, "$g_explosives_available_team1", 1),
              (assign, "$g_explosives_available_team2", 1),
              (str_store_player_username, s1, ":player_no"),
              (str_store_string, s4, "@{s1} turned on explosives"),
            (else_try),
              (eq, reg10, 1),
              (assign, "$g_explosives_available_on_map", 1),
              (assign, "$g_explosives_available_team1", 1),
              (assign, "$g_explosives_available_team2", 0),
              (str_store_player_username, s1, ":player_no"),
              (str_store_string, s4, "@{s1} turned on explosives for team 1 only"),
            (else_try),
              (eq, reg10, 2),
              (assign, "$g_explosives_available_on_map", 1),
              (assign, "$g_explosives_available_team1", 0),
              (assign, "$g_explosives_available_team2", 1),
              (str_store_player_username, s1, ":player_no"),
              (str_store_string, s4, "@{s1} turned on explosives for team 2 only"),
            (else_try),
              (eq, reg10, 3),
              (assign, "$g_explosives_available_on_map", 0),
              (assign, "$g_explosives_available_team1", 0),
              (assign, "$g_explosives_available_team2", 0),
              (str_store_player_username, s1, ":player_no"),
              (str_store_string, s4, "@{s1} turned off explosives"),
            (try_end),
            (call_script, "script_multiplayer_broadcast_message"),
          (try_end),
        (try_end),
      (else_try),
        (multiplayer_is_server),
        (str_equals, s0, "@/bp"),
        (eq, reg44, 1477436),
        (str_store_player_username, s1, ":player_no"),
        (try_begin),
          (eq, "$admin_unlimited_building", 0),
          (assign, "$admin_unlimited_building", 1),
          (str_store_string, s4, "@{s1} turned on unlimited buildpoints for admins"),
          (multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
        (else_try),
          (eq, "$admin_unlimited_building", 1),
          (assign, "$admin_unlimited_building", 0),
          (str_store_string, s4, "@{s1} turned off unlimited buildpoints for admins"),
          (multiplayer_send_string_to_player, ":player_no", multiplayer_event_show_server_message, s4),
        (try_end),
      (else_try),
        (multiplayer_is_server),
        (str_starts_with, s0, "@/bring"),
        (player_is_admin, ":player_no"),
        (str_store_string, s3, "@ "),
        (str_split, reg13, s2, s0, "@ ", 0, 3),
        (player_get_agent_id, ":agent_no", ":player_no"),
        (agent_get_position, pos3, ":agent_no"),
        (position_move_y, pos3, -250),
        (try_begin),
          (str_is_integer, s3),
          (str_to_num, reg10, s3, 0),
          (try_begin),
            (is_between, reg10, 1, 3),
            (val_add, reg10, -1),
            (assign, ":team_no", reg10),
            (try_for_players, ":player", 1),
              (player_get_team_no, ":team_of_player", ":player"),
              (try_begin),
                (eq, ":team_of_player", ":team_no"),
                (neq, ":player", ":player_no"),
                (player_get_agent_id, ":agent_no", ":player"),
                (assign, ":horse_agent", -1),
                (agent_get_horse, ":horse_agent", ":agent_no"),
                (try_begin),
                  (gt, ":horse_agent", 0),
                  (agent_set_position, ":horse_agent", pos3),
                (else_try),
                  (agent_set_position, ":agent_no", pos3),
                (try_end),
              (try_end),
            (try_end),
            (str_store_player_username, s1, ":player_no"),
            (val_add, reg10, 1),
            (str_store_string, s4, "@{s1} has teleported the entire team {reg10} to him"),
            (call_script, "script_multiplayer_broadcast_message"),
          (try_end),
        (try_end),
      (else_try),
        (multiplayer_is_server),
        (str_equals, s0, "@/arthur"),
        (eq, reg44, 1477436),
        (try_begin),
          (eq, "$prioritize_arthur", 0),
          (assign, "$prioritize_arthur", 1),
          (call_script, "script_send_colored_chat", ":player_no", "str_prioritize_arthur_on", chat_color_console),
        (else_try),
          (eq, "$prioritize_arthur", 1),
          (assign, "$prioritize_arthur", 0),
          (call_script, "script_send_colored_chat", ":player_no", "str_prioritize_arthur_off", chat_color_console),
        (try_end),
      (else_try),
        (multiplayer_is_server),
        (str_equals, s0, "@/zombiesold"),
        (player_is_admin, ":player_no"),
        (str_store_player_username, s1, ":player_no"),
        (try_begin),
          (eq, "$zombie_mode", 0),
          (assign, "$zombie_mode", 1),
          (assign, "$force_partisan", 1),
          (assign, "$trp_availability", 3),
          (assign, "$g_infantry_available_on_map", 1),
          (assign, "$g_cavalry_available_on_map", 0),
          (try_for_players, ":player", 1),
              (player_is_active, ":player"),
              (player_get_team_no, reg13, ":player"),
              (try_begin),
                (eq, reg13, 1),
                (player_get_agent_id, ":cur_agent", ":player"),
                (agent_set_damage_modifier, ":cur_agent", 100),
                (agent_set_ranged_damage_modifier, ":cur_agent", 0),
              (try_end),
          (try_end),
          (str_store_string, s4, "@{s1} started zombie mode"),
          (call_script, "script_multiplayer_broadcast_message"),
        (else_try),
          (assign, "$zombie_mode", 0),
          (assign, "$force_partisan", 0),
          (assign, "$trp_availability", 0),
          (assign, "$g_infantry_available_on_map", 1),
          (assign, "$g_cavalry_available_on_map", 1),
          (try_for_players, ":player", 1),
              (player_is_active, ":player"),
              (player_get_team_no, reg13, ":player"),
              (try_begin),
                (eq, reg13, 1),
                (player_get_agent_id, ":cur_agent", ":player"),
                (agent_set_damage_modifier, ":cur_agent", 100),
                (agent_set_ranged_damage_modifier, ":cur_agent", 100),
              (try_end),
          (try_end),
          (str_store_string, s4, "@{s1} deactivated zombie mode"),
          (call_script, "script_multiplayer_broadcast_message"),
        (try_end),
      (else_try),
        (multiplayer_is_server),
        (str_starts_with, s0, "@/troop"),
        (player_is_admin, ":player_no"),
        (str_split, reg13, s2, s0, "@ ", 0, 3),
        (try_begin),
          (str_is_integer, s3),
          (str_to_num, reg10, s3, 0),
          (str_store_player_username, s1, ":player_no"),
          (try_begin),
            (eq, reg10, 3),
            (assign, "$trp_availability", 3),
            (assign, "$g_infantry_available_on_map", 1),
            (assign, "$g_cavalry_available_on_map", 1),
            (str_store_string, s4, "@{s1} made all troop type available"),
            (call_script, "script_multiplayer_broadcast_message"),
          (else_try),
            (eq, reg10, 1),
            (assign, "$trp_availability", 1),
            (assign, "$g_infantry_available_on_map", 1),
            (assign, "$g_cavalry_available_on_map", 0),
            (str_store_string, s4, "@{s1} forced infantry only"),
            (call_script, "script_multiplayer_broadcast_message"),
          (else_try),
            (eq, reg10, 2),
            (assign, "$trp_availability", 2),
            (assign, "$g_infantry_available_on_map", 0),
            (assign, "$g_cavalry_available_on_map", 1),
            (str_store_string, s4, "@{s1} forced cavalry only"),
            (call_script, "script_multiplayer_broadcast_message"),
          (else_try),
            (eq, reg10, 0),
            (assign, "$trp_availability", 0),
            (str_store_string, s4, "@{s1} forced default troop availability"),
            (call_script, "script_multiplayer_broadcast_message"),
            (call_script, "script_multiplayer_mm_refresh_inf_cav_availability"),
          (try_end),
        (try_end),
      (else_try), #FINAL: Pushes to LUA
        (multiplayer_is_server),
        (assign, reg10, ":player_no"),
        (lua_push_int, reg10),
        (lua_push_str, s0),
        (lua_call, "@commandReceived", 2),
      (try_end),
      (set_trigger_result, 1),
    (else_try),
      (multiplayer_is_server),
      (assign, reg10, ":player_no"),
      (lua_push_int, reg10),
      (lua_push_str, s0),
      (lua_call, "@messageReceived", 2 ),
      #(eq, reg44, 1477436),
      #(str_store_player_username, s2, ":player_no"),
      #(try_for_players, ":player", 1),
      #  (player_is_active, ":player"),
      #  (call_script, "script_send_colored_chat", ":player", "str_arthur_chat_2", chat_color_console),
      #  (set_trigger_result, 1),
      #(try_end),
    (try_end),
  (try_end),
  (lua_set_top, 0),
]),
##script_send_inter_admin_chat
# s4 = text
#INPUT
#player_no, script param 1
("send_inter_admin_chat", [
  (store_script_param, ":player_no", 1),
  (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_inter_admin_chat, s4),
]),

#script_wse_console_command_received
# Called each time a command is typed on the dedicated server console or received with RCON (after parsing standard commands)
# INPUT
# script param 1 = command type (0 - local, 1 - remote)
# s0 = text
# OUTPUT
# trigger result = anything non-zero if the command succeeded
# result string = message to display on success (if empty, default message will be used)
("wse_console_command_received", [
  ]),

#script_wse_get_agent_scale
# Called each time an agent is created
# INPUT
# script param 1 = troop no
# script param 2 = horse item no
# script param 3 = horse item modifier
# script param 4 = player no
# OUTPUT
# trigger result = agent scale (fixed point)
("wse_get_agent_scale", [
  (store_script_param, ":troop_no", 1),
  (store_script_param, ":horse_item_no", 2),
  (store_script_param, ":horse_item_modifier", 3),
  (store_script_param, ":player_no", 4),
]),

#script_wse_window_opened
# Called each time a window (party/inventory/character) is opened
# INPUT
# script param 1 = window no
# script param 2 = window param 1
# script param 3 = window param 2
# OUTPUT
# trigger result = presentation that replaces the window (if not set or negative, window will open normally)
("wse_window_opened", [
  (store_script_param, ":window_no", 1),
  (store_script_param, ":window_param_1", 2),
  (store_script_param, ":window_param_2", 3),
]),

#script_game_missile_dives_into_water
# Called each time a missile dives into water
# INPUT
# script param 1 = missile item no
# script param 2 = missile item modifier
# script param 3 = launcher item no
# script param 4 = launcher item modifier
# script param 5 = shooter agent no
# script param 6 = missile no
# pos1 = water impact position and rotation
("game_missile_dives_into_water", [
  (store_script_param, ":missile_item_no", 1),
  (store_script_param, ":missile_item_modifier", 2),
  (store_script_param, ":launcher_item_no", 3),
  (store_script_param, ":launcher_item_modifier", 4),
  (store_script_param, ":shooter_agent_no", 5),
  (store_script_param, ":missile_no", 6),
]),

#script_wse_get_server_info
# Called each time a http request for server info received (http://server_ip:server_port/)
# OUTPUT
# trigger result = anything non-zero replace message text for response info 
# result string =  message text for response info 
("wse_get_server_info", [
]),

("get_gamemode", [
  (assign, reg51, "$g_multiplayer_game_type"),
  ]),
("get_zombie_mode_enabled", [
  (assign, reg51, "$zombie_mode"),
  ]),

]


